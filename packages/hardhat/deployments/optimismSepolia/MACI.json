{
  "address": "0xc075BC0f734EFE6ceD866324fc2A9DBe1065CBB1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "_pollFactory",
          "type": "address"
        },
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "_messageProcessorFactory",
          "type": "address"
        },
        {
          "internalType": "contract ITallySubsidyFactory",
          "name": "_tallyFactory",
          "type": "address"
        },
        {
          "internalType": "contract ITallySubsidyFactory",
          "name": "_subsidyFactory",
          "type": "address"
        },
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "_signUpGatekeeper",
          "type": "address"
        },
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "_initialVoiceCreditProxy",
          "type": "address"
        },
        {
          "internalType": "contract TopupCredit",
          "name": "_topupCredit",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_stateTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "CallerMustBePoll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaciPubKeyLargerThanSnarkFieldSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "name": "PollDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoseidonHashLibrariesNotLinked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "name": "PreviousPollNotCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignupTemporaryBlocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManySignups",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyY",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "subsidy",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollAddr",
          "type": "tuple"
        }
      ],
      "name": "DeployPoll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stateIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voiceCreditBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "SignUp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useSubsidy",
          "type": "bool"
        }
      ],
      "name": "deployPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "subsidy",
              "type": "address"
            }
          ],
          "internalType": "struct MACI.PollContracts",
          "name": "pollAddr",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPoll",
      "outputs": [
        {
          "internalType": "address",
          "name": "poll",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStateAqRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "array",
          "type": "uint256[2]"
        }
      ],
      "name": "hash2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "array",
          "type": "uint256[3]"
        }
      ],
      "name": "hash3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "array",
          "type": "uint256[4]"
        }
      ],
      "name": "hash4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "array",
          "type": "uint256[5]"
        }
      ],
      "name": "hash5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "right",
          "type": "uint256"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "hashMessageAndEncPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DomainObjs.PubKey",
              "name": "pubKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "voiceCreditBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.StateLeaf",
          "name": "_stateLeaf",
          "type": "tuple"
        }
      ],
      "name": "hashStateLeaf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ciphertext",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialVoiceCreditProxy",
      "outputs": [
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "mergeStateAq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numSrQueueOps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "mergeStateAqSubRoots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageProcessorFactory",
      "outputs": [
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSignUps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "dataToPad",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "msgType",
          "type": "uint256"
        }
      ],
      "name": "padAndHashMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "padKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pollFactory",
      "outputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "polls",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "name": "sha256Hash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_pubKey",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signUpGatekeeperData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_initialVoiceCreditProxyData",
          "type": "bytes"
        }
      ],
      "name": "signUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signUpGatekeeper",
      "outputs": [
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateAq",
      "outputs": [
        {
          "internalType": "contract AccQueue",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateTreeDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subsidyFactory",
      "outputs": [
        {
          "internalType": "contract ITallySubsidyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subtreesMerged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyFactory",
      "outputs": [
        {
          "internalType": "contract ITallySubsidyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topupCredit",
      "outputs": [
        {
          "internalType": "contract TopupCredit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "updateManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x348f381d5dfc72babe95eb7769479017fbfe10186eeb11f8230c07f096f46b43",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc075BC0f734EFE6ceD866324fc2A9DBe1065CBB1",
    "transactionIndex": 3,
    "gasUsed": "4425972",
    "logsBloom": "0x
    "blockHash": "0x6bfe9adde5daaf3bb849fa315716d8f4b670de20d70cab0d8299e9ecc6fa2e07",
    "transactionHash": "0x348f381d5dfc72babe95eb7769479017fbfe10186eeb11f8230c07f096f46b43",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9415502,
        "transactionHash": "0x348f381d5dfc72babe95eb7769479017fbfe10186eeb11f8230c07f096f46b43",
        "address": "0xc075BC0f734EFE6ceD866324fc2A9DBe1065CBB1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x6bfe9adde5daaf3bb849fa315716d8f4b670de20d70cab0d8299e9ecc6fa2e07"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9415502,
        "transactionHash": "0x348f381d5dfc72babe95eb7769479017fbfe10186eeb11f8230c07f096f46b43",
        "address": "0xd1fDb8826C75D6B11c904ce4FA5aECf951306500",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c075bc0f734efe6ced866324fc2a9dbe1065cbb1"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x6bfe9adde5daaf3bb849fa315716d8f4b670de20d70cab0d8299e9ecc6fa2e07"
      }
    ],
    "blockNumber": 9415502,
    "cumulativeGasUsed": "4709631",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x05bB67cB592C1753425192bF8f34b95ca8649f09",
    "0xa85EffB2658CFd81e0B1AaD4f2364CdBCd89F3a1",
    "0x8aAC5570d54306Bb395bf2385ad327b7b706016b",
    "0x64f5219563e28EeBAAd91Ca8D31fa3b36621FD4f",
    "0x38F6F2caE52217101D7CA2a5eC040014b4164E6C",
    "0x26291175Fa0Ea3C8583fEdEB56805eA68289b105",
    "0x12456Fa31e57F91B70629c1196337074c966492a",
    10
  ],
  "numDeployments": 3,
  "solcInputHash": "7691986b9cf2acec079fd1b55855e243",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"_pollFactory\",\"type\":\"address\"},{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"_messageProcessorFactory\",\"type\":\"address\"},{\"internalType\":\"contract ITallySubsidyFactory\",\"name\":\"_tallyFactory\",\"type\":\"address\"},{\"internalType\":\"contract ITallySubsidyFactory\",\"name\":\"_subsidyFactory\",\"type\":\"address\"},{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"_signUpGatekeeper\",\"type\":\"address\"},{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"_initialVoiceCreditProxy\",\"type\":\"address\"},{\"internalType\":\"contract TopupCredit\",\"name\":\"_topupCredit\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stateTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"CallerMustBePoll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaciPubKeyLargerThanSnarkFieldSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"name\":\"PollDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoseidonHashLibrariesNotLinked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"name\":\"PreviousPollNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignupTemporaryBlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySignups\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyY\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subsidy\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollAddr\",\"type\":\"tuple\"}],\"name\":\"DeployPoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stateIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voiceCreditBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SignUp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useSubsidy\",\"type\":\"bool\"}],\"name\":\"deployPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subsidy\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollAddr\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPoll\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateAqRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"array\",\"type\":\"uint256[2]\"}],\"name\":\"hash2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"array\",\"type\":\"uint256[3]\"}],\"name\":\"hash3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"array\",\"type\":\"uint256[4]\"}],\"name\":\"hash4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"array\",\"type\":\"uint256[5]\"}],\"name\":\"hash5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"hashMessageAndEncPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"voiceCreditBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.StateLeaf\",\"name\":\"_stateLeaf\",\"type\":\"tuple\"}],\"name\":\"hashStateLeaf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialVoiceCreditProxy\",\"outputs\":[{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"mergeStateAq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numSrQueueOps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"mergeStateAqSubRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageProcessorFactory\",\"outputs\":[{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSignUps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"dataToPad\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"}],\"name\":\"padAndHashMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"padKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollFactory\",\"outputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"sha256Hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_pubKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signUpGatekeeperData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_initialVoiceCreditProxyData\",\"type\":\"bytes\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUpGatekeeper\",\"outputs\":[{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateAq\",\"outputs\":[{\"internalType\":\"contract AccQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subsidyFactory\",\"outputs\":[{\"internalType\":\"contract ITallySubsidyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subtreesMerged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyFactory\",\"outputs\":[{\"internalType\":\"contract ITallySubsidyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topupCredit\",\"outputs\":[{\"internalType\":\"contract TopupCredit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_initialVoiceCreditProxy\":\"The InitialVoiceCreditProxy contract\",\"_messageProcessorFactory\":\"The MessageProcessorFactory contract\",\"_pollFactory\":\"The PollFactory contract\",\"_signUpGatekeeper\":\"The SignUpGatekeeper contract\",\"_stateTreeDepth\":\"The depth of the state tree\",\"_subsidyFactory\":\"The SubsidyFactory contract\",\"_tallyFactory\":\"The TallyFactory contract\",\"_topupCredit\":\"The TopupCredit contract\"}},\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,bool)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"How long should the Poll last for\",\"_treeDepths\":\"The depth of the Merkle trees\",\"_verifier\":\"The Verifier Contract\",\"_vkRegistry\":\"The VkRegistry Contract\",\"useSubsidy\":\"If true, the Poll will use the Subsidy contract\"},\"returns\":{\"pollAddr\":\"a new Poll contract address\"}},\"getPoll(uint256)\":{\"params\":{\"_pollId\":\"The identifier of the Poll to retrieve\"},\"returns\":{\"poll\":\"The Poll contract object\"}},\"getStateAqRoot()\":{\"returns\":{\"root\":\"The Merkle root\"}},\"hash2(uint256[2])\":{\"params\":{\"array\":\"An array of two uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hash3(uint256[3])\":{\"params\":{\"array\":\"An array of three uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the three elements.\"}},\"hash4(uint256[4])\":{\"params\":{\"array\":\"An array of four uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the four elements.\"}},\"hash5(uint256[5])\":{\"params\":{\"array\":\"An array of five uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the five elements.\"}},\"hashLeftRight(uint256,uint256)\":{\"params\":{\"left\":\"the first element to hash.\",\"right\":\"the second element to hash.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))\":{\"params\":{\"_encPubKey\":\"the encryption public key to be hashed\",\"_message\":\"the message to be hashed\"},\"returns\":{\"msgHash\":\"The hash of the message and the encryption public key\"}},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"params\":{\"_stateLeaf\":\"the state leaf to be hashed\"},\"returns\":{\"ciphertext\":\"The hash of the state leaf\"}},\"mergeStateAq(uint256)\":{\"params\":{\"_pollId\":\"The active Poll ID\"},\"returns\":{\"root\":\"The calculated Merkle root\"}},\"mergeStateAqSubRoots(uint256,uint256)\":{\"params\":{\"_numSrQueueOps\":\"Number of operations\",\"_pollId\":\"The ID of the active Poll\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"padAndHashMessage(uint256[2],uint256)\":{\"params\":{\"dataToPad\":\"the data to be padded\",\"msgType\":\"the type of the message\"},\"returns\":{\"message\":\"The padded message\",\"msgHash\":\"The hash of the padded message and encryption key\",\"padKey\":\"The padding public key\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sha256Hash(uint256[])\":{\"params\":{\"array\":\"The array of uint256 elements.\"},\"returns\":{\"result\":\"The SHA256 hash of the array.\"}},\"signUp((uint256,uint256),bytes,bytes)\":{\"params\":{\"_initialVoiceCreditProxyData\":\"Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.\",\"_pubKey\":\"The user's desired public key.\",\"_signUpGatekeeperData\":\"Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MACI - Minimum Anti-Collusion Infrastructure Version 1\",\"version\":1},\"userdoc\":{\"errors\":{\"CallerMustBePoll(address)\":[{\"notice\":\"custom errors\"}],\"InvalidMessage()\":[{\"notice\":\"custom errors\"}]},\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"constructor\":{\"notice\":\"Create a new instance of the MACI contract.\"},\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,bool)\":{\"notice\":\"Deploy a new Poll contract.\"},\"getPoll(uint256)\":{\"notice\":\"Get the Poll details\"},\"getStateAqRoot()\":{\"notice\":\"Return the main root of the StateAq contract\"},\"hash2(uint256[2])\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hash3(uint256[3])\":{\"notice\":\"Computes the Poseidon hash of three uint256 elements.\"},\"hash4(uint256[4])\":{\"notice\":\"Computes the Poseidon hash of four uint256 elements.\"},\"hash5(uint256[5])\":{\"notice\":\"Computes the Poseidon hash of five uint256 elements.\"},\"hashLeftRight(uint256,uint256)\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))\":{\"notice\":\"An utility function used to hash a MACI message and an encryption public key\"},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"notice\":\"An utility function used to hash a state leaf\"},\"initialVoiceCreditProxy()\":{\"notice\":\"The contract which provides the values of the initial voice credit balance per user\"},\"mergeStateAq(uint256)\":{\"notice\":\"Allow Poll contracts to merge the state root\"},\"mergeStateAqSubRoots(uint256,uint256)\":{\"notice\":\"Allow Poll contracts to merge the state subroots\"},\"messageProcessorFactory()\":{\"notice\":\"Factory contract that deploy a MessageProcessor contract\"},\"nextPollId()\":{\"notice\":\"Each poll has an incrementing ID\"},\"numSignUps()\":{\"notice\":\"The number of signups\"},\"padAndHashMessage(uint256[2],uint256)\":{\"notice\":\"An utility function used to pad and hash a MACI message\"},\"pollFactory()\":{\"notice\":\"Factory contract that deploy a Poll contract\"},\"polls(uint256)\":{\"notice\":\"A mapping of poll IDs to Poll contracts.\"},\"sha256Hash(uint256[])\":{\"notice\":\"Computes the SHA256 hash of an array of uint256 elements.\"},\"signUp((uint256,uint256),bytes,bytes)\":{\"notice\":\"Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue.\"},\"signUpGatekeeper()\":{\"notice\":\"Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote\"},\"stateAq()\":{\"notice\":\"The state AccQueue. Represents a mapping between each user's public key and their voice credit balance.\"},\"stateTreeDepth()\":{\"notice\":\"The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625 this should also match the parameter of the circom circuits.\"},\"subsidyFactory()\":{\"notice\":\"Factory contract that deploy a Subsidy contract\"},\"subtreesMerged()\":{\"notice\":\"Whether the subtrees have been merged (can merge root before new signup)\"},\"tallyFactory()\":{\"notice\":\"Factory contract that deploy a Tally contract\"},\"topupCredit()\":{\"notice\":\"ERC20 contract that hold topup credits\"}},\"notice\":\"A contract which allows users to sign up, and deploy new polls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MACI.sol\":\"MACI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\nimport { ITallySubsidyFactory } from \\\"./interfaces/ITallySubsidyFactory.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\nimport { SignUpGatekeeper } from \\\"./gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { AccQueueQuinaryBlankSl } from \\\"./trees/AccQueueQuinaryBlankSl.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { TopupCredit } from \\\"./TopupCredit.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACI is IMACI, Params, Utilities, Ownable {\\n\\t/// @notice The state tree depth is fixed. As such it should be as large as feasible\\n\\t/// so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625\\n\\t/// this should also match the parameter of the circom circuits.\\n\\tuint8 public immutable stateTreeDepth;\\n\\n\\t/// @notice IMPORTANT: remember to change the ballot tree depth\\n\\t/// in contracts/ts/genEmptyBallotRootsContract.ts file\\n\\t/// if we change the state tree depth!\\n\\tuint8 internal constant STATE_TREE_SUBDEPTH = 2;\\n\\tuint8 internal constant TREE_ARITY = 5;\\n\\n\\t/// @notice The hash of a blank state leaf\\n\\tuint256 internal constant BLANK_STATE_LEAF_HASH =\\n\\t\\tuint256(\\n\\t\\t\\t6769006970205099520508948723718471724660867171122235270773600567925038008762\\n\\t\\t);\\n\\n\\t/// @notice Each poll has an incrementing ID\\n\\tuint256 public nextPollId;\\n\\n\\t/// @notice A mapping of poll IDs to Poll contracts.\\n\\tmapping(uint256 => address) public polls;\\n\\n\\t/// @notice Whether the subtrees have been merged (can merge root before new signup)\\n\\tbool public subtreesMerged;\\n\\n\\t/// @notice The number of signups\\n\\tuint256 public numSignUps;\\n\\n\\t/// @notice ERC20 contract that hold topup credits\\n\\tTopupCredit public immutable topupCredit;\\n\\n\\t/// @notice Factory contract that deploy a Poll contract\\n\\tIPollFactory public immutable pollFactory;\\n\\n\\t/// @notice Factory contract that deploy a MessageProcessor contract\\n\\tIMessageProcessorFactory public immutable messageProcessorFactory;\\n\\n\\t/// @notice Factory contract that deploy a Tally contract\\n\\tITallySubsidyFactory public immutable tallyFactory;\\n\\n\\t/// @notice Factory contract that deploy a Subsidy contract\\n\\tITallySubsidyFactory public immutable subsidyFactory;\\n\\n\\t/// @notice The state AccQueue. Represents a mapping between each user's public key\\n\\t/// and their voice credit balance.\\n\\tAccQueue public immutable stateAq;\\n\\n\\t/// @notice Address of the SignUpGatekeeper, a contract which determines whether a\\n\\t/// user may sign up to vote\\n\\tSignUpGatekeeper public immutable signUpGatekeeper;\\n\\n\\t/// @notice The contract which provides the values of the initial voice credit\\n\\t/// balance per user\\n\\tInitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\\n\\taddress public manager;\\n\\n\\t/// @notice A struct holding the addresses of poll, mp and tally\\n\\tstruct PollContracts {\\n\\t\\taddress poll;\\n\\t\\taddress messageProcessor;\\n\\t\\taddress tally;\\n\\t\\taddress subsidy;\\n\\t}\\n\\n\\t// Events\\n\\tevent SignUp(\\n\\t\\tuint256 _stateIndex,\\n\\t\\tuint256 indexed _userPubKeyX,\\n\\t\\tuint256 indexed _userPubKeyY,\\n\\t\\tuint256 _voiceCreditBalance,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\tevent DeployPoll(\\n\\t\\tuint256 _pollId,\\n\\t\\tuint256 indexed _coordinatorPubKeyX,\\n\\t\\tuint256 indexed _coordinatorPubKeyY,\\n\\t\\tPollContracts pollAddr\\n\\t);\\n\\n\\t/// @notice Only allow a Poll contract to call the modified function.\\n\\tmodifier onlyPoll(uint256 _pollId) {\\n\\t\\tif (msg.sender != address(polls[_pollId]))\\n\\t\\t\\trevert CallerMustBePoll(msg.sender);\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice custom errors\\n\\terror CallerMustBePoll(address _caller);\\n\\terror PoseidonHashLibrariesNotLinked();\\n\\terror TooManySignups();\\n\\terror MaciPubKeyLargerThanSnarkFieldSize();\\n\\terror PreviousPollNotCompleted(uint256 pollId);\\n\\terror PollDoesNotExist(uint256 pollId);\\n\\terror SignupTemporaryBlocked();\\n\\n\\t/// @notice Create a new instance of the MACI contract.\\n\\t/// @param _pollFactory The PollFactory contract\\n\\t/// @param _messageProcessorFactory The MessageProcessorFactory contract\\n\\t/// @param _tallyFactory The TallyFactory contract\\n\\t/// @param _subsidyFactory The SubsidyFactory contract\\n\\t/// @param _signUpGatekeeper The SignUpGatekeeper contract\\n\\t/// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\\n\\t/// @param _topupCredit The TopupCredit contract\\n\\t/// @param _stateTreeDepth The depth of the state tree\\n\\tconstructor(\\n\\t\\tIPollFactory _pollFactory,\\n\\t\\tIMessageProcessorFactory _messageProcessorFactory,\\n\\t\\tITallySubsidyFactory _tallyFactory,\\n\\t\\tITallySubsidyFactory _subsidyFactory,\\n\\t\\tSignUpGatekeeper _signUpGatekeeper,\\n\\t\\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\\n\\t\\tTopupCredit _topupCredit,\\n\\t\\tuint8 _stateTreeDepth\\n\\t) payable {\\n\\t\\t// Deploy the state AccQueue\\n\\t\\tstateAq = new AccQueueQuinaryBlankSl(STATE_TREE_SUBDEPTH);\\n\\t\\tstateAq.enqueue(BLANK_STATE_LEAF_HASH);\\n\\n\\t\\t// because we add a blank leaf we need to count one signup\\n\\t\\t// so we don't allow max + 1\\n\\t\\tunchecked {\\n\\t\\t\\tnumSignUps++;\\n\\t\\t}\\n\\n\\t\\tpollFactory = _pollFactory;\\n\\t\\tmessageProcessorFactory = _messageProcessorFactory;\\n\\t\\ttallyFactory = _tallyFactory;\\n\\t\\tsubsidyFactory = _subsidyFactory;\\n\\t\\ttopupCredit = _topupCredit;\\n\\t\\tsignUpGatekeeper = _signUpGatekeeper;\\n\\t\\tinitialVoiceCreditProxy = _initialVoiceCreditProxy;\\n\\t\\tstateTreeDepth = _stateTreeDepth;\\n\\n\\t\\t// Verify linked poseidon libraries\\n\\t\\tif (hash2([uint256(1), uint256(1)]) == 0)\\n\\t\\t\\trevert PoseidonHashLibrariesNotLinked();\\n\\t}\\n\\n\\tfunction updateManager(address _manager) public onlyOwner {\\n\\t\\tmanager = _manager;\\n\\t}\\n\\n\\tmodifier onlyManager() {\\n\\t\\trequire(msg.sender == manager, \\\"only manager can create poll\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n\\t/// double sign-ups or ineligible users from doing so.  This function will\\n\\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\\n\\t/// fresh state leaf into the state AccQueue.\\n\\t/// @param _pubKey The user's desired public key.\\n\\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n\\t///     register() function. For instance, the POAPGatekeeper or\\n\\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n\\t///     token ID.\\n\\t/// @param _initialVoiceCreditProxyData Data to pass to the\\n\\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n\\t///     credits this user should have.\\n\\tfunction signUp(\\n\\t\\tPubKey memory _pubKey,\\n\\t\\tbytes memory _signUpGatekeeperData,\\n\\t\\tbytes memory _initialVoiceCreditProxyData\\n\\t) public virtual {\\n\\t\\t// prevent new signups until we merge the roots (possible DoS)\\n\\t\\tif (subtreesMerged) revert SignupTemporaryBlocked();\\n\\n\\t\\t// ensure we do not have more signups than what the circuits support\\n\\t\\tif (numSignUps >= uint256(TREE_ARITY) ** uint256(stateTreeDepth))\\n\\t\\t\\trevert TooManySignups();\\n\\n\\t\\tif (\\n\\t\\t\\t_pubKey.x >= SNARK_SCALAR_FIELD || _pubKey.y >= SNARK_SCALAR_FIELD\\n\\t\\t) {\\n\\t\\t\\trevert MaciPubKeyLargerThanSnarkFieldSize();\\n\\t\\t}\\n\\n\\t\\t// Increment the number of signups\\n\\t\\t// cannot overflow with realistic STATE_TREE_DEPTH\\n\\t\\t// values as numSignUps < 5 ** STATE_TREE_DEPTH -1\\n\\t\\tunchecked {\\n\\t\\t\\tnumSignUps++;\\n\\t\\t}\\n\\n\\t\\t// Register the user via the sign-up gatekeeper. This function should\\n\\t\\t// throw if the user has already registered or if ineligible to do so.\\n\\t\\tsignUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\\n\\n\\t\\t// Get the user's voice credit balance.\\n\\t\\tuint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_initialVoiceCreditProxyData\\n\\t\\t);\\n\\n\\t\\tuint256 timestamp = block.timestamp;\\n\\t\\t// Create a state leaf and enqueue it.\\n\\t\\tuint256 stateLeaf = hashStateLeaf(\\n\\t\\t\\tStateLeaf(_pubKey, voiceCreditBalance, timestamp)\\n\\t\\t);\\n\\t\\tuint256 stateIndex = stateAq.enqueue(stateLeaf);\\n\\n\\t\\temit SignUp(\\n\\t\\t\\tstateIndex,\\n\\t\\t\\t_pubKey.x,\\n\\t\\t\\t_pubKey.y,\\n\\t\\t\\tvoiceCreditBalance,\\n\\t\\t\\ttimestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Deploy a new Poll contract.\\n\\t/// @param _duration How long should the Poll last for\\n\\t/// @param _treeDepths The depth of the Merkle trees\\n\\t/// @param _coordinatorPubKey The coordinator's public key\\n\\t/// @param _verifier The Verifier Contract\\n\\t/// @param _vkRegistry The VkRegistry Contract\\n\\t/// @param useSubsidy If true, the Poll will use the Subsidy contract\\n\\t/// @return pollAddr a new Poll contract address\\n\\tfunction deployPoll(\\n\\t\\tuint256 _duration,\\n\\t\\tTreeDepths memory _treeDepths,\\n\\t\\tPubKey memory _coordinatorPubKey,\\n\\t\\taddress _verifier,\\n\\t\\taddress _vkRegistry,\\n\\t\\tbool useSubsidy\\n\\t) public virtual onlyManager returns (PollContracts memory pollAddr) {\\n\\t\\t// cache the poll to a local variable so we can increment it\\n\\t\\tuint256 pollId = nextPollId;\\n\\n\\t\\t// Increment the poll ID for the next poll\\n\\t\\t// 2 ** 256 polls available\\n\\t\\tunchecked {\\n\\t\\t\\tnextPollId++;\\n\\t\\t}\\n\\n\\t\\t// if (pollId > 0) {\\n\\t\\t// \\tif (!stateAq.treeMerged()) revert PreviousPollNotCompleted(pollId);\\n\\t\\t// }\\n\\n\\t\\tMaxValues memory maxValues = MaxValues({\\n\\t\\t\\tmaxMessages: uint256(TREE_ARITY) ** _treeDepths.messageTreeDepth,\\n\\t\\t\\tmaxVoteOptions: uint256(TREE_ARITY) **\\n\\t\\t\\t\\t_treeDepths.voteOptionTreeDepth\\n\\t\\t});\\n\\n\\t\\taddress _owner = owner();\\n\\n\\t\\taddress p = pollFactory.deploy(\\n\\t\\t\\t_duration,\\n\\t\\t\\tmaxValues,\\n\\t\\t\\t_treeDepths,\\n\\t\\t\\t_coordinatorPubKey,\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttopupCredit,\\n\\t\\t\\t_owner\\n\\t\\t);\\n\\n\\t\\taddress mp = messageProcessorFactory.deploy(\\n\\t\\t\\t_verifier,\\n\\t\\t\\t_vkRegistry,\\n\\t\\t\\tp,\\n\\t\\t\\t_owner\\n\\t\\t);\\n\\t\\taddress tally = tallyFactory.deploy(\\n\\t\\t\\t_verifier,\\n\\t\\t\\t_vkRegistry,\\n\\t\\t\\tp,\\n\\t\\t\\tmp,\\n\\t\\t\\t_owner\\n\\t\\t);\\n\\n\\t\\taddress subsidy;\\n\\t\\tif (useSubsidy) {\\n\\t\\t\\tsubsidy = subsidyFactory.deploy(\\n\\t\\t\\t\\t_verifier,\\n\\t\\t\\t\\t_vkRegistry,\\n\\t\\t\\t\\tp,\\n\\t\\t\\t\\tmp,\\n\\t\\t\\t\\t_owner\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tpolls[pollId] = p;\\n\\n\\t\\t// store the addresses in a struct so they can be returned\\n\\t\\tpollAddr = PollContracts({\\n\\t\\t\\tpoll: p,\\n\\t\\t\\tmessageProcessor: mp,\\n\\t\\t\\ttally: tally,\\n\\t\\t\\tsubsidy: subsidy\\n\\t\\t});\\n\\n\\t\\temit DeployPoll(\\n\\t\\t\\tpollId,\\n\\t\\t\\t_coordinatorPubKey.x,\\n\\t\\t\\t_coordinatorPubKey.y,\\n\\t\\t\\tpollAddr\\n\\t\\t);\\n\\t}\\n\\n\\t/// @inheritdoc IMACI\\n\\tfunction mergeStateAqSubRoots(\\n\\t\\tuint256 _numSrQueueOps,\\n\\t\\tuint256 _pollId\\n\\t) public onlyPoll(_pollId) {\\n\\t\\tstateAq.mergeSubRoots(_numSrQueueOps);\\n\\n\\t\\t// if we have merged all subtrees then put a block\\n\\t\\tif (stateAq.subTreesMerged()) {\\n\\t\\t\\tsubtreesMerged = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IMACI\\n\\tfunction mergeStateAq(\\n\\t\\tuint256 _pollId\\n\\t) public onlyPoll(_pollId) returns (uint256 root) {\\n\\t\\t// remove block\\n\\t\\tsubtreesMerged = false;\\n\\n\\t\\troot = stateAq.merge(stateTreeDepth);\\n\\t}\\n\\n\\t/// @inheritdoc IMACI\\n\\tfunction getStateAqRoot() public view returns (uint256 root) {\\n\\t\\troot = stateAq.getMainRoot(stateTreeDepth);\\n\\t}\\n\\n\\t/// @notice Get the Poll details\\n\\t/// @param _pollId The identifier of the Poll to retrieve\\n\\t/// @return poll The Poll contract object\\n\\tfunction getPoll(uint256 _pollId) public view returns (address poll) {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\tpoll = polls[_pollId];\\n\\t}\\n}\\n\",\"keccak256\":\"0xd5a8100a87bba5998711cb137fd8651118d6845ca80c2a3c22badad914ab0e0f\",\"license\":\"MIT\"},\"contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n}\\n\",\"keccak256\":\"0x6a2d8b704a584adefc185fe25fac29e2d9174a29eb0834beef7e8191ed5028d3\",\"license\":\"MIT\"},\"contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title InitialVoiceCreditProxy\\n/// @notice This contract is the base contract for\\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\\n/// credit balance for MACI's voters.\\nabstract contract InitialVoiceCreditProxy {\\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\\n  /// @param _user the address of the voter\\n  /// @param _data additional data\\n  /// @return the balance\\n  // solhint-disable-next-line no-empty-blocks\\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x5d37ff30a2191f5fff292f120250c5fc3c3a876944f460e054658f3cd05f6c35\",\"license\":\"MIT\"},\"contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(address _verifier, address _vkRegistry, address _poll, address _owner) external returns (address);\\n}\\n\",\"keccak256\":\"0x0a3b1fb6512a6948362d99e0c6389c1ad69974a14b037a7f54007397a2084d79\",\"license\":\"MIT\"},\"contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _topupCredit The TopupCredit contract\\n  /// @param _pollOwner The owner of the poll\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xd729956bc34555baae893d62b4234a5cd17463f41737574a8e21def0045c13fc\",\"license\":\"MIT\"},\"contracts/interfaces/ITallySubsidyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title ITallySubsidyFactory\\n/// @notice TallySubsidyFactory interface\\ninterface ITallySubsidyFactory {\\n  /// @notice Deploy a new Tally or Subsidy contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x7f488dbd759e1dfe40ba25f6282c7cb9c1aae20543f3fa943535d97115e1fb5a\",\"license\":\"MIT\"},\"contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"contracts/trees/AccQueueQuinary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"./AccQueue.sol\\\";\\n\\n/// @title AccQueueQuinary\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\n/// @dev This contract is for a quinary tree (5 leaves per node)\\nabstract contract AccQueueQuinary is AccQueue {\\n  /// @notice Create a new AccQueueQuinary instance\\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @dev it also frees up storage slots to refund gas.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n\\n    // Free up storage slots to refund gas. Note that using a loop here\\n    // would result in lower gas savings.\\n    delete leafQueue.levels[_level];\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n  }\\n\\n  /// @notice An internal function which fills a subtree\\n  /// @param _level The level at which to fill the subtree\\n  function _fill(uint256 _level) internal override {\\n    while (_level < subDepth) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != 0) {\\n        // Fill the subtree level with zeros and hash the level\\n        uint256 hashed;\\n\\n        uint256[5] memory inputs;\\n        uint256 z = getZero(_level);\\n        uint8 i = 0;\\n        for (; i < n; i++) {\\n          inputs[i] = leafQueue.levels[_level][i];\\n        }\\n\\n        for (; i < hashLength; i++) {\\n          inputs[i] = z;\\n        }\\n        hashed = hash5(inputs);\\n\\n        // Update the subtree from the next level onwards with the new leaf\\n        _enqueue(hashed, _level + 1);\\n      }\\n\\n      // Reset the current level\\n      delete leafQueue.indices[_level];\\n\\n      _level++;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x41190de249b6964a2c95138c278da46a7e64ecd99d1b0204ab5ee688ab793418\",\"license\":\"MIT\"},\"contracts/trees/AccQueueQuinaryBlankSl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { MerkleZeros as MerkleQuinaryBlankSl } from \\\"./zeros/MerkleQuinaryBlankSl.sol\\\";\\nimport { AccQueueQuinary } from \\\"./AccQueueQuinary.sol\\\";\\n\\n/// @title AccQueueQuinaryBlankSl\\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryBlankSl\\n/// @dev This contract is used for creating a\\n/// Merkle tree with quinary (5 leaves per node) structure\\ncontract AccQueueQuinaryBlankSl is AccQueueQuinary, MerkleQuinaryBlankSl {\\n  /// @notice Constructor for creating AccQueueQuinaryBlankSl contract\\n  /// @param _subDepth The depth of each subtree\\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\\n\\n  /// @notice Returns the zero leaf at a specified level\\n  /// @param _level The level at which to return the zero leaf\\n  /// @return zero The zero leaf at the specified level\\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\\n    zero = zeros[_level];\\n  }\\n}\\n\",\"keccak256\":\"0x6c9de13993738eed3ee9b2a13cb896536b7d0c12aa26f7c9a0bc9d8a60ab70af\",\"license\":\"MIT\"},\"contracts/trees/zeros/MerkleQuinaryBlankSl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract MerkleZeros {\\n  uint256[33] internal zeros;\\n\\n  // Quinary tree zeros (hash of a blank state leaf)\\n  constructor() {\\n    zeros[0] = uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\\n    zeros[1] = uint256(1817443256073160983037956906834195537015546107754139333779374752610409243040);\\n    zeros[2] = uint256(5025334324706345710800763986625066818722194863275454698142520938431664775139);\\n    zeros[3] = uint256(14192954438167108345302805021925904074255585459982294518284934685870159779036);\\n    zeros[4] = uint256(20187882570958996766847085412101405873580281668670041750401431925441526137696);\\n    zeros[5] = uint256(19003337309269317766726592380821628773167513668895143249995308839385810331053);\\n    zeros[6] = uint256(8492845964288036916491732908697290386617362835683911619537012952509890847451);\\n    zeros[7] = uint256(21317322053785868903775560086424946986124609731059541056518805391492871868814);\\n    zeros[8] = uint256(4256218134522031233385262696416028085306220785615095518146227774336224649500);\\n    zeros[9] = uint256(20901832483812704342876390942522900825096860186886589193649848721504734341597);\\n    zeros[10] = uint256(9267454486648593048583319961333207622177969074484816717792204743506543655505);\\n    zeros[11] = uint256(7650747654726613674993974917452464536868175649563857452207429547024788245109);\\n    zeros[12] = uint256(12795449162487060618571749226308575208199045387848354123797521555997299022426);\\n    zeros[13] = uint256(2618557044910497521493457299926978327841926538380467450910611798747947773417);\\n    zeros[14] = uint256(4921285654960018268026585535199462620025474147042548993648101553653712920841);\\n    zeros[15] = uint256(3955171118947393404895230582611078362154691627898437205118006583966987624963);\\n    zeros[16] = uint256(14699122743207261418107167543163571550551347592030521489185842204376855027947);\\n    zeros[17] = uint256(19194001556311522650950142975587831061973644651464593103195262630226529549573);\\n    zeros[18] = uint256(6797319293744791648201295415173228627305696583566554220235084234134847845566);\\n    zeros[19] = uint256(1267384159070923114421683251804507954363252272096341442482679590950570779538);\\n    zeros[20] = uint256(3856223245980092789300785214737986268213218594679123772901587106666007826613);\\n    zeros[21] = uint256(18676489457897260843888223351978541467312325190019940958023830749320128516742);\\n    zeros[22] = uint256(1264182110328471160091364892521750324454825019784514769029658712768604765832);\\n    zeros[23] = uint256(2656996430278859489720531694992812241970377217691981498421470018287262214836);\\n    zeros[24] = uint256(18383091906017498328025573868990834275527351249551450291689105976789994000945);\\n    zeros[25] = uint256(13529005048172217954112431586843818755284974925259175262114689118374272942448);\\n    zeros[26] = uint256(12992932230018177961399273443546858115054107741258772159002781102941121463198);\\n    zeros[27] = uint256(2863122912185356538647249583178796893334871904920344676880115119793539219810);\\n    zeros[28] = uint256(21225940722224750787686036600289689346822264717843340643526494987845938066724);\\n    zeros[29] = uint256(10287710058152238258370855601473179390407624438853416678054122418589867334291);\\n    zeros[30] = uint256(19473882726731003241332772446613588021823731071450664115530121948154136765165);\\n    zeros[31] = uint256(5317840242664832852914696563734700089268851122527105938301831862363938018455);\\n    zeros[32] = uint256(16560004488485252485490851383643926099553282582813695748927880827248594395952);\\n  }\\n}\\n\",\"keccak256\":\"0x7cb041ca0192fe5740dcd396c4d106c96469bf9ff3a4d0b568da110a8e41c254\",\"license\":\"MIT\"},\"contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"},\"contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x10c725c49e9193b7641574733666e231886e2ccc301c755e1dd9567aff7c5c9c\",\"license\":\"MIT\"},\"contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @param msgType the type of the message\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad,\\n    uint256 msgType\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ msgType: msgType, data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x6dabe0385409cf4dc4a22b80b7483c26d016c4173e5f62930e06085f02d91c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040526040516200489c3803806200489c83398101604081905262000027916200028d565b620000323362000190565b6002604051620000429062000266565b60ff9091168152602001604051809103906000f08015801562000069573d6000803e3d6000fd5b506001600160a01b0316610140819052604051631ffc735d60e01b81527f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6004820152631ffc735d906024016020604051808303816000875af1158015620000d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fb919062000353565b506004805460019081019091556001600160a01b03808a1660c05288811660e052878116610100528681166101205283811660a0528581166101605284166101805260ff82166080526040805180820190915281815260208101919091526200016490620001e0565b6200018257604051633d7ba68560e21b815260040160405180910390fd5b5050505050505050620003a0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516314d2f97b60e11b815260009073ce830DA8667097BB491A70da268b76a081211814906329a5f2f6906200021c9085906004016200036d565b602060405180830381865af41580156200023a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000260919062000353565b92915050565b612336806200256683390190565b6001600160a01b03811681146200028a57600080fd5b50565b600080600080600080600080610100898b031215620002ab57600080fd5b8851620002b88162000274565b60208a0151909850620002cb8162000274565b60408a0151909750620002de8162000274565b60608a0151909650620002f18162000274565b60808a0151909550620003048162000274565b60a08a0151909450620003178162000274565b60c08a01519093506200032a8162000274565b60e08a015190925060ff811681146200034257600080fd5b809150509295985092959890939650565b6000602082840312156200036657600080fd5b5051919050565b60408101818360005b60028110156200039757815183526020928301929091019060010162000376565b50505092915050565b60805160a05160c05160e05161010051610120516101405161016051610180516120ec6200047a600039600081816104d5015261099001526000818161027601526109100152600081816103d40152818161079301528181610a59015281816112280152818161128e01526113a3015260008181610312015261108801526000818161040e0152610fd20152600081816102100152610f2001526000818161034e0152610e2a01526000818161029d0152610e5e0152600081816104350152818161076901528181610836015261137c01526120ec6000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063603baff81161011a5780639cfced97116100ad578063bea140b31161007c578063bea140b314610520578063c02db7b814610533578063cfa1fa0314610550578063dd0982a314610563578063f2fde38b1461057657600080fd5b80639cfced971461049d578063a48e7750146104b0578063aab4a670146104d0578063ac2f0074146104f757600080fd5b8063683f3dc3116100e9578063683f3dc314610469578063715018a6146104715780637d0a81c8146104795780638da5cb5b1461048c57600080fd5b8063603baff8146103cf57806362a361bb146103f657806362b31f1e14610409578063652c76e41461043057600080fd5b80632b7865711161019d5780633dfb88b21161016c5780633dfb88b214610370578063481c6a751461038357806358aba00f1461039657806358bfc379146103a95780635bb93995146103bc57600080fd5b80632b7865711461030457806330e6f3781461030d5780633364120a14610334578063343393b51461034957600080fd5b8063122db153116101d9578063122db153146102bf578063167fd483146102d65780631a8cbcaa146102e95780632877e036146102fc57600080fd5b8063055575eb1461020b57806306912d3c1461024f578063079410db146102715780630dd5a88814610298575b600080fd5b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61026261025d3660046116d7565b610589565b60405161024693929190611702565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102c860045481565b604051908152602001610246565b6102c86102e4366004611788565b610637565b6102326102f7366004611822565b610710565b6102c8610758565b6102c860015481565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6103476103423660046118ab565b61080b565b005b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102c861037e366004611916565b610b1b565b600554610232906001600160a01b031681565b6103476103a4366004611994565b610b9c565b6102c86103b73660046119b1565b610bc6565b6102c86103ca366004611a57565b610c60565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102c8610404366004611a79565b610c85565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6104577f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610246565b610457600a81565b610347610cbf565b6102c8610487366004611a95565b610cd3565b6000546001600160a01b0316610232565b6102c86104ab366004611af7565b610d13565b6104c36104be366004611b7a565b610d4d565b6040516102469190611c5a565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b610232610505366004611822565b6002602052600090815260409020546001600160a01b031681565b6102c861052e366004611c96565b61119d565b6003546105409060ff1681565b6040519015158152602001610246565b61034761055e366004611a57565b6111d7565b6102c8610571366004611822565b611326565b610347610584366004611994565b611418565b61059161153b565b604080518082019091526000808252602082015260006105af61155a565b85518152602080870151828201526040805180820182527f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d8184015281518083019092528782529181018390529450925061062d8484610637565b9150509250925092565b6000610641611579565b602084810180515183528051820151918301919091528051604090810151908301528051606090810151908301525160809081015190820152610682611579565b6020858101805160a0908101518452815160c0015184840152815160e001516040808601919091528251610100015160608601529151610120015160808501528151908101909152865181526107079181016106dd85610d13565b81526020016106eb84610d13565b8152602001866000015181526020018660200151815250610d13565b95945050505050565b6000600154821061073c5760405163a86ecdd560e01b8152600481018390526024015b60405180910390fd5b506000908152600260205260409020546001600160a01b031690565b604051631b9b8aa760e01b815260ff7f00000000000000000000000000000000000000000000000000000000000000001660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631b9b8aa790602401602060405180830381865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190611cef565b905090565b60035460ff161561082f5760405163259e785160e11b815260040160405180910390fd5b61085d60ff7f0000000000000000000000000000000000000000000000000000000000000000166005611e02565b6004541061087e5760405163b984588b60e01b815260040160405180910390fd5b82517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000011115806108d257507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836020015110155b156108f0576040516354be831760e11b815260040160405180910390fd5b60048054600101815560405163125c7dfb60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916324b8fbf691610945913391879101611e3e565b600060405180830381600087803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b505060405163b36543a960e01b8152600092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063b36543a9906109c89033908690600401611e3e565b602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190611cef565b905060004290506000610a35604051806060016040528088815260200185815260200184815250610cd3565b604051631ffc735d60e01b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631ffc735d906024016020604051808303816000875af1158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611cef565b602080890151895160408051858152938401899052830187905292935091907fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda09060600160405180910390a350505050505050565b60405163248f667760e01b81526000907377AD263Cd578045105FBFC88A477CAd808d39Cf69063248f667790610b55908590600401611e80565b602060405180830381865af4158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190611cef565b92915050565b610ba4611491565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051602001610bfc9190611eb1565b60408051601f1981840301815290829052610c1691611ee7565b602060405180830381855afa158015610c33573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610c569190611cef565b610b969190611f03565b6000610c6a611597565b83815260208101839052610c7d81610c85565b949350505050565b6040516314d2f97b60e11b815260009073ce830DA8667097BB491A70da268b76a081211814906329a5f2f690610b55908590600401611f25565b610cc7611491565b610cd160006114eb565b565b6000610cdd6115b5565b8251518152825160209081015181830152830151816002602002015260408301516060820152610d0c81610b1b565b9392505050565b604051630926f44b60e31b81526000907338628490c3043E5D0bbB26d5a0a62fC77342e9d590634937a25890610b55908590600401611f4d565b6040805160808101825260008082526020820181905291810182905260608101919091526005546001600160a01b03163314610dcb5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c79206d616e616765722063616e2063726561746520706f6c6c000000006044820152606401610733565b6001805480820190915560408051808201825290880151600091908190610df3906005611f75565b81526020018960600151600560ff16610e0c9190611f75565b905290506000610e246000546001600160a01b031690565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b43c49698c858d8d307f0000000000000000000000000000000000000000000000000000000000000000896040518863ffffffff1660e01b8152600401610ea09796959493929190611f84565b6020604051808303816000875af1158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee39190612012565b604051637ec15b9d60e11b81526001600160a01b038a811660048301528981166024830152808316604483015284811660648301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063fd82b73a906084016020604051808303816000875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190612012565b604051631326f4cf60e31b81526001600160a01b038b811660048301528a811660248301528481166044830152808316606483015285811660848301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690639937a6789060a4016020604051808303816000875af115801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612012565b9050600088156110f857604051631326f4cf60e31b81526001600160a01b038c811660048301528b811660248301528581166044830152848116606483015286811660848301527f00000000000000000000000000000000000000000000000000000000000000001690639937a6789060a4016020604051808303816000875af11580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f59190612012565b90505b60008781526002602090815260409182902080546001600160a01b0319166001600160a01b03888116918217909255835160808101855290815286821681840152858216818501529084166060820152908e01518e519251919a5091907f47a9e7a1f9d5e9de0c7f24bc11fbd940291f6898df1d49eff768e63c58a25a1290611184908b908d9061202f565b60405180910390a3505050505050509695505050505050565b6040516304b98e1d60e31b815260009073D5bFeBDce5c91413E41cc7B24C8402c59A344f7c906325cc70e890610b55908590600401612071565b60008181526002602052604090205481906001600160a01b0316331461121257604051635859049960e01b8152336004820152602401610733565b60405163c15da65b60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c15da65b90602401600060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b6a64acd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190612099565b15611321576003805460ff191660011790555b505050565b60008181526002602052604081205482906001600160a01b0316331461136157604051635859049960e01b8152336004820152602401610733565b6003805460ff191690556040516324a47aeb60e01b815260ff7f00000000000000000000000000000000000000000000000000000000000000001660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906324a47aeb906024016020604051808303816000875af11580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c9190611cef565b611420611491565b6001600160a01b0381166114855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610733565b61148e816114eb565b50565b6000546001600160a01b03163314610cd15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610733565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806000815260200161155561155a565b905290565b604051806101400160405280600a906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561160c5761160c6115d3565b60405290565b604051610140810167ffffffffffffffff8111828210171561160c5761160c6115d3565b604051601f8201601f1916810167ffffffffffffffff8111828210171561165f5761165f6115d3565b604052919050565b600082601f83011261167857600080fd5b6040516040810181811067ffffffffffffffff8211171561169b5761169b6115d3565b80604052508060408401858111156116b257600080fd5b845b818110156116cc5780358352602092830192016116b4565b509195945050505050565b600080606083850312156116ea57600080fd5b6116f48484611667565b946040939093013593505050565b835181526020808501516101c08301919081840160005b600a81101561173657825182529183019190830190600101611719565b5050855161016085015250506020909301516101808201526101a00152919050565b60006040828403121561176a57600080fd5b6117726115e9565b9050813581526020820135602082015292915050565b6000808284036101a081121561179d57600080fd5b610160808212156117ad57600080fd5b6117b56115e9565b915084358252602086603f8701126117cc57600080fd5b6117d4611612565b9186019180888411156117e657600080fd5b8288015b8481101561180157803583529183019183016117ea565b5080838601525050508193506118178682611758565b925050509250929050565b60006020828403121561183457600080fd5b5035919050565b600082601f83011261184c57600080fd5b813567ffffffffffffffff811115611866576118666115d3565b611879601f8201601f1916602001611636565b81815284602083860101111561188e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000608084860312156118c057600080fd5b6118ca8585611758565b9250604084013567ffffffffffffffff808211156118e757600080fd5b6118f38783880161183b565b9350606086013591508082111561190957600080fd5b5061062d8682870161183b565b60006080828403121561192857600080fd5b82601f83011261193757600080fd5b6040516080810181811067ffffffffffffffff8211171561195a5761195a6115d3565b6040528060808401858111156116b257600080fd5b6001600160a01b038116811461148e57600080fd5b803561198f8161196f565b919050565b6000602082840312156119a657600080fd5b8135610d0c8161196f565b600060208083850312156119c457600080fd5b823567ffffffffffffffff808211156119dc57600080fd5b818501915085601f8301126119f057600080fd5b813581811115611a0257611a026115d3565b8060051b9150611a13848301611636565b8181529183018401918481019088841115611a2d57600080fd5b938501935b83851015611a4b57843582529385019390850190611a32565b98975050505050505050565b60008060408385031215611a6a57600080fd5b50508035926020909101359150565b600060408284031215611a8b57600080fd5b610d0c8383611667565b600060808284031215611aa757600080fd5b6040516060810181811067ffffffffffffffff82111715611aca57611aca6115d3565b604052611ad78484611758565b815260408301356020820152606083013560408201528091505092915050565b600060a08284031215611b0957600080fd5b82601f830112611b1857600080fd5b60405160a0810181811067ffffffffffffffff82111715611b3b57611b3b6115d3565b6040528060a08401858111156116b257600080fd5b803560ff8116811461198f57600080fd5b801515811461148e57600080fd5b803561198f81611b61565b600080600080600080868803610140811215611b9557600080fd5b873596506080601f1982011215611bab57600080fd5b506040516080810181811067ffffffffffffffff82111715611bcf57611bcf6115d3565b604052611bde60208901611b50565b8152611bec60408901611b50565b6020820152611bfd60608901611b50565b6040820152611c0e60808901611b50565b60608201529450611c228860a08901611758565b9350611c3060e08801611984565b9250611c3f6101008801611984565b9150611c4e6101208801611b6f565b90509295509295509295565b60808101610b96828480516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b600060608284031215611ca857600080fd5b82601f830112611cb757600080fd5b6040516060810181811067ffffffffffffffff82111715611cda57611cda6115d3565b6040528060608401858111156116b257600080fd5b600060208284031215611d0157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611d59578160001904821115611d3f57611d3f611d08565b80851615611d4c57918102915b93841c9390800290611d23565b509250929050565b600082611d7057506001610b96565b81611d7d57506000610b96565b8160018114611d935760028114611d9d57611db9565b6001915050610b96565b60ff841115611dae57611dae611d08565b50506001821b610b96565b5060208310610133831016604e8410600b8410161715611ddc575081810a610b96565b611de68383611d1e565b8060001904821115611dfa57611dfa611d08565b029392505050565b6000610d0c8383611d61565b60005b83811015611e29578181015183820152602001611e11565b83811115611e38576000848401525b50505050565b60018060a01b03831681526040602082015260008251806040840152611e6b816060850160208701611e0e565b601f01601f1916919091016060019392505050565b60808101818360005b6004811015611ea8578151835260209283019290910190600101611e89565b50505092915050565b815160009082906020808601845b83811015611edb57815185529382019390820190600101611ebf565b50929695505050505050565b60008251611ef9818460208701611e0e565b9190910192915050565b600082611f2057634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b6002811015611ea8578151835260209283019290910190600101611f2e565b60a08101818360005b6005811015611ea8578151835260209283019290910190600101611f56565b6000610d0c60ff841683611d61565b8781526101808101611fa3602083018980518252602090810151910152565b60ff875116606083015260ff602088015116608083015260ff60408801511660a083015260ff60608801511660c0830152611feb60e083018780518252602090810151910152565b6001600160a01b038581166101208401528481166101408401528316610160830152611a4b565b60006020828403121561202457600080fd5b8151610d0c8161196f565b82815260a08101610d0c602083018480516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b60608101818360005b6003811015611ea857815183526020928301929091019060010161207a565b6000602082840312156120ab57600080fd5b8151610d0c81611b6156fea2646970667358221220a4eb2db451140b28a531be4b65750d2066f399d88c0d352a5f9b261a0e4b7c2d64736f6c634300080a003360e06040523480156200001157600080fd5b506040516200233638038062002336833981016040819052620000349162000615565b808060056200004333620005c5565b81620000625760405163682e504160e11b815260040160405180910390fd5b60208211156200009357604051637ccdcc9760e11b8152600481018390526020602482015260440160405180910390fd5b80600214158015620000a6575080600514155b15620000c557604051636f7b6c0360e01b815260040160405180910390fd5b6000805460ff60a01b191660028314600160a01b02179055608082905260a0819052620000f3828262000744565b60c05250507f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6101725550507f0404a2ed0a1df2006441895d9a65ffffdd4968cb5f555fe72a6da7aaec83e1a0610173557f0b1c3d09dd575749a374a9dc1ee32af8c2312e24ad33a3e40fce8120b0f25fe3610174557f1f60ed72fc1915366d2e52cfc7ddc0ff854c7aee9abbc07d1ca88ada842354dc610175557f2ca1efc603fc121baf791319195ee3ab7fa075cee664d008f9ab2870f5028360610176557f2a0381fc4fb108733dfc58c355f2de753bcde61bd988eaa7d33fc967262be5ad610177557f12c6c7cce0332367373dafc95d75b98dd58980410434929dff09466a4ba262db610178557f2f212d3cc7e7334c4a10ced1be011b9cd70f73cca5522fc4137a51be8a17d18e610179557f0968ef20d515d8d743b2cf66603f8b86f3fdeee932fdc911774bb8699566e11c61017a557f2e3604981890fb676c3dac1e14c5c201573f99d1b9e67025109baf274b10e9dd61017b557f147d317fd4b7a1dd6cb961cfba444466b3c431ea638c8df74a89fc591d1a3a5161017c557f10ea2b72952b619afd5b9bc50561df8de0c6e1ba9b5ad66b179c39c420304a7561017d557f1c49f7b357d244d9144676ad23f79465ef5b88ef0f91762a3d35997688af9a5a61017e557f05ca0cfef8158efc5c4af44122e2765179b5463618d5c5ac6185c192332cade961017f557f0ae1595634e8a2e23620f33f9b2b5a23387a28f5833814646900110842f3a109610180557f08be8c2a6a099d9cdc96f9197af6ad99595d73419eb0694eaea432fa18baa203610181557f207f689ce35cf857ee6e68c42d31bb2191d1e84d7a295ccd63995ca7369d20eb610182557f2a6f6b7e4a2cd1a6466ed17debb0a27904e99adbd72be85566a87340f41efd05610183557f0f0725795350566920bbf56d3f22c4d38e832e638c9cb91811f83194e9dd74be610184557f02cd50632e5c5b00a9a93f434797725ec0f85f11ba1b6a844f0cd10c70df6392610185557f08868b85d2fa4c17eec0a7d8bca4671a00474bff80e801981437b77aa11d10b5610186557f294a84b7b46ea0a781877a2c0efd1ee56758d9ee55722721867efe53f4645286610187557f02cb8070979a018bb919f0d1a25d5ad3d5a376c4cf66f36d33434d221ca77e88610188557f05dfce8303f471d776762f2ddd37f05191b8bf5064d8d28e892cd4ec21e7aab4610189557f28a47617aa1e26bf42fd3b26e88aa717fd759bb92b22faaf5ad82090680b523161018a557f1de9253f5fa546603817abd83d1a13c8562f2bf6a0069a546fe546ca0c03c17061018b557f1cb9bd316e341b873dbbef94fd699c6e3a638451de2817db1620235db2b6c39e61018c557f0654785b2917d7c659a95738add3d8eb51cbbefc0f521c2640bc74b0fec5816261018d557f2eed74eacf5de60a758f815cb5e73015455c38408143fc25810d03e1ec9e352461018e557f16bea3363deb4753db67be8b19110b169ae39f33113a92773c41a8b025ca5a9361018f557f2b0dd3b7e0a7e234a4a1b48dd0e9083dc8bfc8cd7f72abdb93a1b8e5ef3e22ed610190557f0bc1ca795d5a059b1dc0c51f72c46f2288cb139ebf09f38ac3e8bca0485ed497610191557f249ca1610a7f80bbf422388c18ef9777fcdab26ee718e2b39e4011973a9023306101925562000759565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200062857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620006865781600019048211156200066a576200066a6200062f565b808516156200067857918102915b93841c93908002906200064a565b509250929050565b6000826200069f575060016200073e565b81620006ae575060006200073e565b8160018114620006c75760028114620006d257620006f2565b60019150506200073e565b60ff841115620006e657620006e66200062f565b50506001821b6200073e565b5060208310610133831016604e8410600b841016171562000717575081810a6200073e565b62000723838362000645565b80600019048211156200073a576200073a6200062f565b0290505b92915050565b60006200075283836200068e565b9392505050565b60805160a05160c051611b2f62000807600039600081816103ea01528181610a2301528181610abd01528181610c7c0152610d7c01526000818161032301528181610568015281816106e301528181610bb001528181610f250152818161109901526112fa015260008181610417015281816104780152818161053e01528181610bea01528181610cb201528181610cfc01528181610ec601528181610f7c01526112350152611b2f6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806381d6a24a116100c3578063c00bdbcc1161007c578063c00bdbcc146102b8578063c15da65b146102cb578063d9c55ce1146102de578063dda89a6e146102e6578063e93fb4d4146102f0578063f2fde38b1461030357600080fd5b806381d6a24a146102455780638da5cb5b146102615780639cfced971461027c578063a27154ba1461028f578063b6a64acd14610297578063bea140b3146102a557600080fd5b806358bfc3791161011557806358bfc379146101cc5780635bb93995146101df5780635bf1fa4d146101f257806362a361bb1461020557806369e7c58614610218578063715018a61461023b57600080fd5b80631b9b8aa71461015d5780631ffc735d1461018357806324a47aeb146101965780633bfa6fce146101a95780633dfb88b2146101b15780633e1a8cc1146101c4575b600080fd5b61017061016b36600461151c565b610316565b6040519081526020015b60405180910390f35b61017061019136600461151c565b610399565b6101706101a436600461151c565b6104c4565b6101706106d7565b6101706101bf36600461157c565b610721565b6101706107a2565b6101706101da3660046115fa565b6107d1565b6101706101ed3660046116a0565b61086b565b6101706102003660046116a0565b610890565b6101706102133660046116c2565b61092f565b61016e5461022b90610100900460ff1681565b604051901515815260200161017a565b610243610969565b005b610170546001546040805192835260208301919091520161017a565b6000546040516001600160a01b03909116815260200161017a565b61017061028a36600461171d565b61097d565b610170602081565b61016e5461022b9060ff1681565b6101706102b3366004611776565b6109b7565b6102436102c636600461151c565b6109f1565b6102436102d936600461151c565b610a6d565b610243610c72565b6101706101715481565b6101706102fe36600461151c565b610db9565b6102436103113660046117cf565b610df4565b61017154600090610347837f00000000000000000000000000000000000000000000000000000000000000006118f9565b101561037d5761017154604051627289df60e61b8152610374918491600401918252602082015260400190565b60405180910390fd5b61014d826021811061039157610391611905565b015492915050565b60006103a3610e6a565b50610171546103b3826000610ec4565b6103be81600161191b565b610171556103cf61014d6000611481565b600061016f5561016e805460ff191690556101715461040f907f000000000000000000000000000000000000000000000000000000000000000090611933565b6104bf5760027f00000000000000000000000000000000000000000000000000000000000000006021811061044657610446611905565b600402015460018054600090815261014c602052604081209290925580549161046e83611955565b90915550600290507f0000000000000000000000000000000000000000000000000000000000000000602181106104a7576104a7611905565b6004020160008091018190556104bf90608690611481565b919050565b60006104ce610e6a565b816104ec57604051630543d40760e11b815260040160405180910390fd5b61016e5460ff1661051057604051631e596e4360e11b815260040160405180910390fd5b602082111561053c57604051632cd31ae960e01b81526004810183905260206024820152604401610374565b7f00000000000000000000000000000000000000000000000000000000000000005b6101715461058c827f00000000000000000000000000000000000000000000000000000000000000006118f9565b10610596576105a8565b806105a081611955565b91505061055e565b808310156105d257604051627289df60e61b81526004810184905260248101829052604401610374565b8083141561060f5761016f5461014d84602181106105f2576105f2611905565b0155505061016e805461ff00191661010017905561016f54919050565b61016f549150805b838110156106a957600061062a82611005565b600054909150600160a01b900460ff161561066257610647611490565b8481526020810182905261065a8161092f565b945050610696565b61066a6114ae565b848152602081018290526040810182905260608101829052608081018290526106928161097d565b9450505b50806106a181611955565b915050610617565b508161014d84602181106106bf576106bf611905565b015561016e805461ff00191661010017905550919050565b60015b600154610707827f00000000000000000000000000000000000000000000000000000000000000006118f9565b1061070f5790565b8061071981611955565b9150506106da565b60405163248f667760e01b81526000907377AD263Cd578045105FBFC88A477CAd808d39Cf69063248f66779061075b908590600401611970565b602060405180830381865af4158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c91906119a1565b92915050565b61016e5460009060ff166107c957604051631e596e4360e11b815260040160405180910390fd5b5061016f5490565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160028360405160200161080791906119ba565b60408051601f1981840301815290829052610821916119f0565b602060405180830381855afa15801561083e573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061086191906119a1565b61079c9190611933565b6000610875611490565b838152602081018390526108888161092f565b949350505050565b600061089a6114ae565b600284602181106108ad576108ad611905565b60040201548152600284602181106108c7576108c7611905565b60040201600101548160016020020152600284602181106108ea576108ea611905565b600402016002015481600260200201526002846021811061090d5761090d611905565b600402016003015481600360200201528281600460200201526108888161097d565b6040516314d2f97b60e11b815260009073ce830DA8667097BB491A70da268b76a081211814906329a5f2f69061075b908590600401611a2b565b610971610e6a565b61097b600061101b565b565b604051630926f44b60e31b81526000907338628490c3043E5D0bbB26d5a0a62fC77342e9d590634937a2589061075b908590600401611a53565b6040516304b98e1d60e31b815260009073D5bFeBDce5c91413E41cc7B24C8402c59A344f7c906325cc70e89061075b908590600401611a7b565b6109f9610e6a565b60018054600090815261014c6020526040812083905581549190610a1c83611955565b91905055507f00000000000000000000000000000000000000000000000000000000000000006101716000828254610a54919061191b565b9091555050600061016f555061016e805460ff19169055565b610a75610e6a565b61016e5460ff1615610a9a57604051630d36aec160e01b815260040160405180910390fd5b61017154610abb576040516316a0341160e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061017154610aea9190611933565b15610af757610af7610c72565b60015460011415610b2157610b0c6000610db9565b61016f5561016e805460ff1916600117905550565b6000610b2b6106d7565b610170549091506000905b600154811015610ba7578315801590610b4e57508382145b15610b595750505050565b610b70610b6861017054610db9565b60008561106b565b6101708054906000610b8183611955565b91905055508180610b9190611955565b9250508080610b9f90611955565b915050610b36565b506000610bd4837f00000000000000000000000000000000000000000000000000000000000000006118f9565b9050600154610170541415610c3e576000610c0e7f0000000000000000000000000000000000000000000000000000000000000000611005565b6001549091505b82811015610c3b57610c298260008761106b565b80610c3381611955565b915050610c15565b50505b60a78360218110610c5157610c51611905565b600402016000015461016f55505061016e805460ff19166001179055505b50565b610c7a610e6a565b7f000000000000000000000000000000000000000000000000000000000000000061017154610ca99190611933565b610cee57610cd67f0000000000000000000000000000000000000000000000000000000000000000611005565b600154600090815261014c6020526040902055610d5f565b610cf86000611233565b60027f000000000000000000000000000000000000000000000000000000000000000060218110610d2b57610d2b611905565b6004020154600154600090815261014c6020526040812091909155610d52906002906114cc565b610d5f61014d6000611481565b60006001546001610d70919061191b565b60018190559050610da17f000000000000000000000000000000000000000000000000000000000000000082611aa3565b6101715550600061016f5561016e805460ff19169055565b60008160015411610de05760405163042a2e7160e11b815260048101839052602401610374565b50600090815261014c602052604090205490565b610dfc610e6a565b6001600160a01b038116610e615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610374565b610c6f8161101b565b6000546001600160a01b0316331461097b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610374565b7f0000000000000000000000000000000000000000000000000000000000000000811115610f055760405163d1459f7960e01b815260040160405180910390fd5b600060868260218110610f1a57610f1a611905565b01549050610f4960017f0000000000000000000000000000000000000000000000000000000000000000611ac2565b8114610fce578260028360218110610f6357610f63611905565b600402018260048110610f7857610f78611905565b01557f00000000000000000000000000000000000000000000000000000000000000008214610fc95760868260218110610fb457610fb4611905565b018054906000610fc383611955565b91905055505b505050565b610fd8828461139f565b925060868260218110610fed57610fed611905565b600091015581610ffc81611955565b92505050610f05565b6000610172826021811061039157610391611905565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8082111561107857505050565b600061012b836021811061108e5761108e611905565b015490506110bd60017f0000000000000000000000000000000000000000000000000000000000000000611ac2565b811461111b578360a784602181106110d7576110d7611905565b6004020182600481106110ec576110ec611905565b015561012b836021811061110257611102611905565b01805490600061111183611955565b919050555061122d565b60008054600160a01b900460ff161561116857611136611490565b60a7856021811061114957611149611905565b60040201548152602081018690526111608161092f565b9150506111fd565b6111706114ae565b60005b838160ff1610156111d75760a7866021811061119157611191611905565b600402018160ff16600481106111a9576111a9611905565b0154828260ff16600581106111c0576111c0611905565b6020020152806111cf81611ad9565b915050611173565b50858184600581106111eb576111eb611905565b60200201526111f98161097d565b9150505b61012b846021811061121157611211611905565b600091015561122b8161122586600161191b565b8561106b565b505b50505050565b7f0000000000000000000000000000000000000000000000000000000000000000811015610c6f5760006086826021811061127057611270611905565b0154905080156113745760006112846114ae565b600061128f85611005565b905060005b848160ff1610156112f857600286602181106112b2576112b2611905565b600402018160ff16600481106112ca576112ca611905565b0154838260ff16600581106112e1576112e1611905565b6020020152806112f081611ad9565b915050611294565b7f00000000000000000000000000000000000000000000000000000000000000008160ff1610156113505781838260ff166005811061133957611339611905565b60200201528061134881611ad9565b9150506112f8565b6113598361097d565b935061136f8461136a88600161191b565b610ec4565b505050505b6086826021811061138757611387611905565b60009101558161139681611955565b92505050611233565b60006113a96114ae565b600284602181106113bc576113bc611905565b60040201548152600284602181106113d6576113d6611905565b60040201600101548160016020020152600284602181106113f9576113f9611905565b600402016002015481600260200201526002846021811061141c5761141c611905565b6004020160030154816003602002015282816004602002015261143e8161097d565b91506002846021811061145357611453611905565b60040201600061147a91905060008155600101600081556001016000815560010160009055565b5092915050565b50610c6f9060218101906114db565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b50610c6f9060848101906114f4565b5b808211156114f057600081556001016114dc565b5090565b808211156114f0576000808255600182018190556002820181905560038201556004016114f4565b60006020828403121561152e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561157457611574611535565b604052919050565b60006080828403121561158e57600080fd5b82601f83011261159d57600080fd5b6040516080810181811067ffffffffffffffff821117156115c0576115c0611535565b6040528060808401858111156115d557600080fd5b845b818110156115ef5780358352602092830192016115d7565b509195945050505050565b6000602080838503121561160d57600080fd5b823567ffffffffffffffff8082111561162557600080fd5b818501915085601f83011261163957600080fd5b81358181111561164b5761164b611535565b8060051b915061165c84830161154b565b818152918301840191848101908884111561167657600080fd5b938501935b838510156116945784358252938501939085019061167b565b98975050505050505050565b600080604083850312156116b357600080fd5b50508035926020909101359150565b6000604082840312156116d457600080fd5b82601f8301126116e357600080fd5b6040516040810181811067ffffffffffffffff8211171561170657611706611535565b80604052508060408401858111156115d557600080fd5b600060a0828403121561172f57600080fd5b82601f83011261173e57600080fd5b60405160a0810181811067ffffffffffffffff8211171561176157611761611535565b6040528060a08401858111156115d557600080fd5b60006060828403121561178857600080fd5b82601f83011261179757600080fd5b6040516060810181811067ffffffffffffffff821117156117ba576117ba611535565b6040528060608401858111156115d557600080fd5b6000602082840312156117e157600080fd5b81356001600160a01b03811681146117f857600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611850578160001904821115611836576118366117ff565b8085161561184357918102915b93841c939080029061181a565b509250929050565b6000826118675750600161079c565b816118745750600061079c565b816001811461188a5760028114611894576118b0565b600191505061079c565b60ff8411156118a5576118a56117ff565b50506001821b61079c565b5060208310610133831016604e8410600b84101617156118d3575081810a61079c565b6118dd8383611815565b80600019048211156118f1576118f16117ff565b029392505050565b60006117f88383611858565b634e487b7160e01b600052603260045260246000fd5b6000821982111561192e5761192e6117ff565b500190565b60008261195057634e487b7160e01b600052601260045260246000fd5b500690565b6000600019821415611969576119696117ff565b5060010190565b60808101818360005b6004811015611998578151835260209283019290910190600101611979565b50505092915050565b6000602082840312156119b357600080fd5b5051919050565b815160009082906020808601845b838110156119e4578151855293820193908201906001016119c8565b50929695505050505050565b6000825160005b81811015611a1157602081860181015185830152016119f7565b81811115611a20576000828501525b509190910192915050565b60408101818360005b6002811015611998578151835260209283019290910190600101611a34565b60a08101818360005b6005811015611998578151835260209283019290910190600101611a5c565b60608101818360005b6003811015611998578151835260209283019290910190600101611a84565b6000816000190483118215151615611abd57611abd6117ff565b500290565b600082821015611ad457611ad46117ff565b500390565b600060ff821660ff811415611af057611af06117ff565b6001019291505056fea2646970667358221220e57dda3fcad5b2a8ffd034225eec302a68bb0f224d249e48b9871f3359377a2a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c8063603baff81161011a5780639cfced97116100ad578063bea140b31161007c578063bea140b314610520578063c02db7b814610533578063cfa1fa0314610550578063dd0982a314610563578063f2fde38b1461057657600080fd5b80639cfced971461049d578063a48e7750146104b0578063aab4a670146104d0578063ac2f0074146104f757600080fd5b8063683f3dc3116100e9578063683f3dc314610469578063715018a6146104715780637d0a81c8146104795780638da5cb5b1461048c57600080fd5b8063603baff8146103cf57806362a361bb146103f657806362b31f1e14610409578063652c76e41461043057600080fd5b80632b7865711161019d5780633dfb88b21161016c5780633dfb88b214610370578063481c6a751461038357806358aba00f1461039657806358bfc379146103a95780635bb93995146103bc57600080fd5b80632b7865711461030457806330e6f3781461030d5780633364120a14610334578063343393b51461034957600080fd5b8063122db153116101d9578063122db153146102bf578063167fd483146102d65780631a8cbcaa146102e95780632877e036146102fc57600080fd5b8063055575eb1461020b57806306912d3c1461024f578063079410db146102715780630dd5a88814610298575b600080fd5b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61026261025d3660046116d7565b610589565b60405161024693929190611702565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102c860045481565b604051908152602001610246565b6102c86102e4366004611788565b610637565b6102326102f7366004611822565b610710565b6102c8610758565b6102c860015481565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6103476103423660046118ab565b61080b565b005b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102c861037e366004611916565b610b1b565b600554610232906001600160a01b031681565b6103476103a4366004611994565b610b9c565b6102c86103b73660046119b1565b610bc6565b6102c86103ca366004611a57565b610c60565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6102c8610404366004611a79565b610c85565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6104577f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610246565b610457600a81565b610347610cbf565b6102c8610487366004611a95565b610cd3565b6000546001600160a01b0316610232565b6102c86104ab366004611af7565b610d13565b6104c36104be366004611b7a565b610d4d565b6040516102469190611c5a565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b610232610505366004611822565b6002602052600090815260409020546001600160a01b031681565b6102c861052e366004611c96565b61119d565b6003546105409060ff1681565b6040519015158152602001610246565b61034761055e366004611a57565b6111d7565b6102c8610571366004611822565b611326565b610347610584366004611994565b611418565b61059161153b565b604080518082019091526000808252602082015260006105af61155a565b85518152602080870151828201526040805180820182527f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d8184015281518083019092528782529181018390529450925061062d8484610637565b9150509250925092565b6000610641611579565b602084810180515183528051820151918301919091528051604090810151908301528051606090810151908301525160809081015190820152610682611579565b6020858101805160a0908101518452815160c0015184840152815160e001516040808601919091528251610100015160608601529151610120015160808501528151908101909152865181526107079181016106dd85610d13565b81526020016106eb84610d13565b8152602001866000015181526020018660200151815250610d13565b95945050505050565b6000600154821061073c5760405163a86ecdd560e01b8152600481018390526024015b60405180910390fd5b506000908152600260205260409020546001600160a01b031690565b604051631b9b8aa760e01b815260ff7f00000000000000000000000000000000000000000000000000000000000000001660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631b9b8aa790602401602060405180830381865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190611cef565b905090565b60035460ff161561082f5760405163259e785160e11b815260040160405180910390fd5b61085d60ff7f0000000000000000000000000000000000000000000000000000000000000000166005611e02565b6004541061087e5760405163b984588b60e01b815260040160405180910390fd5b82517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000011115806108d257507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836020015110155b156108f0576040516354be831760e11b815260040160405180910390fd5b60048054600101815560405163125c7dfb60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916324b8fbf691610945913391879101611e3e565b600060405180830381600087803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b505060405163b36543a960e01b8152600092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063b36543a9906109c89033908690600401611e3e565b602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190611cef565b905060004290506000610a35604051806060016040528088815260200185815260200184815250610cd3565b604051631ffc735d60e01b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631ffc735d906024016020604051808303816000875af1158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611cef565b602080890151895160408051858152938401899052830187905292935091907fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda09060600160405180910390a350505050505050565b60405163248f667760e01b815260009073__$ce9c2c925f157047e54fa833ec4e61409f$__9063248f667790610b55908590600401611e80565b602060405180830381865af4158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190611cef565b92915050565b610ba4611491565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051602001610bfc9190611eb1565b60408051601f1981840301815290829052610c1691611ee7565b602060405180830381855afa158015610c33573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610c569190611cef565b610b969190611f03565b6000610c6a611597565b83815260208101839052610c7d81610c85565b949350505050565b6040516314d2f97b60e11b815260009073__$6574937f64fc1d7710ec0e28b7a36713bb$__906329a5f2f690610b55908590600401611f25565b610cc7611491565b610cd160006114eb565b565b6000610cdd6115b5565b8251518152825160209081015181830152830151816002602002015260408301516060820152610d0c81610b1b565b9392505050565b604051630926f44b60e31b815260009073__$20527677031d76601747626a9845039fe4$__90634937a25890610b55908590600401611f4d565b6040805160808101825260008082526020820181905291810182905260608101919091526005546001600160a01b03163314610dcb5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c79206d616e616765722063616e2063726561746520706f6c6c000000006044820152606401610733565b6001805480820190915560408051808201825290880151600091908190610df3906005611f75565b81526020018960600151600560ff16610e0c9190611f75565b905290506000610e246000546001600160a01b031690565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b43c49698c858d8d307f0000000000000000000000000000000000000000000000000000000000000000896040518863ffffffff1660e01b8152600401610ea09796959493929190611f84565b6020604051808303816000875af1158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee39190612012565b604051637ec15b9d60e11b81526001600160a01b038a811660048301528981166024830152808316604483015284811660648301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063fd82b73a906084016020604051808303816000875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190612012565b604051631326f4cf60e31b81526001600160a01b038b811660048301528a811660248301528481166044830152808316606483015285811660848301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690639937a6789060a4016020604051808303816000875af115801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612012565b9050600088156110f857604051631326f4cf60e31b81526001600160a01b038c811660048301528b811660248301528581166044830152848116606483015286811660848301527f00000000000000000000000000000000000000000000000000000000000000001690639937a6789060a4016020604051808303816000875af11580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f59190612012565b90505b60008781526002602090815260409182902080546001600160a01b0319166001600160a01b03888116918217909255835160808101855290815286821681840152858216818501529084166060820152908e01518e519251919a5091907f47a9e7a1f9d5e9de0c7f24bc11fbd940291f6898df1d49eff768e63c58a25a1290611184908b908d9061202f565b60405180910390a3505050505050509695505050505050565b6040516304b98e1d60e31b815260009073__$dc01a9744591ab014bc46a3b7671cdaefb$__906325cc70e890610b55908590600401612071565b60008181526002602052604090205481906001600160a01b0316331461121257604051635859049960e01b8152336004820152602401610733565b60405163c15da65b60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c15da65b90602401600060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b6a64acd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190612099565b15611321576003805460ff191660011790555b505050565b60008181526002602052604081205482906001600160a01b0316331461136157604051635859049960e01b8152336004820152602401610733565b6003805460ff191690556040516324a47aeb60e01b815260ff7f00000000000000000000000000000000000000000000000000000000000000001660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906324a47aeb906024016020604051808303816000875af11580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c9190611cef565b611420611491565b6001600160a01b0381166114855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610733565b61148e816114eb565b50565b6000546001600160a01b03163314610cd15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610733565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806000815260200161155561155a565b905290565b604051806101400160405280600a906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561160c5761160c6115d3565b60405290565b604051610140810167ffffffffffffffff8111828210171561160c5761160c6115d3565b604051601f8201601f1916810167ffffffffffffffff8111828210171561165f5761165f6115d3565b604052919050565b600082601f83011261167857600080fd5b6040516040810181811067ffffffffffffffff8211171561169b5761169b6115d3565b80604052508060408401858111156116b257600080fd5b845b818110156116cc5780358352602092830192016116b4565b509195945050505050565b600080606083850312156116ea57600080fd5b6116f48484611667565b946040939093013593505050565b835181526020808501516101c08301919081840160005b600a81101561173657825182529183019190830190600101611719565b5050855161016085015250506020909301516101808201526101a00152919050565b60006040828403121561176a57600080fd5b6117726115e9565b9050813581526020820135602082015292915050565b6000808284036101a081121561179d57600080fd5b610160808212156117ad57600080fd5b6117b56115e9565b915084358252602086603f8701126117cc57600080fd5b6117d4611612565b9186019180888411156117e657600080fd5b8288015b8481101561180157803583529183019183016117ea565b5080838601525050508193506118178682611758565b925050509250929050565b60006020828403121561183457600080fd5b5035919050565b600082601f83011261184c57600080fd5b813567ffffffffffffffff811115611866576118666115d3565b611879601f8201601f1916602001611636565b81815284602083860101111561188e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000608084860312156118c057600080fd5b6118ca8585611758565b9250604084013567ffffffffffffffff808211156118e757600080fd5b6118f38783880161183b565b9350606086013591508082111561190957600080fd5b5061062d8682870161183b565b60006080828403121561192857600080fd5b82601f83011261193757600080fd5b6040516080810181811067ffffffffffffffff8211171561195a5761195a6115d3565b6040528060808401858111156116b257600080fd5b6001600160a01b038116811461148e57600080fd5b803561198f8161196f565b919050565b6000602082840312156119a657600080fd5b8135610d0c8161196f565b600060208083850312156119c457600080fd5b823567ffffffffffffffff808211156119dc57600080fd5b818501915085601f8301126119f057600080fd5b813581811115611a0257611a026115d3565b8060051b9150611a13848301611636565b8181529183018401918481019088841115611a2d57600080fd5b938501935b83851015611a4b57843582529385019390850190611a32565b98975050505050505050565b60008060408385031215611a6a57600080fd5b50508035926020909101359150565b600060408284031215611a8b57600080fd5b610d0c8383611667565b600060808284031215611aa757600080fd5b6040516060810181811067ffffffffffffffff82111715611aca57611aca6115d3565b604052611ad78484611758565b815260408301356020820152606083013560408201528091505092915050565b600060a08284031215611b0957600080fd5b82601f830112611b1857600080fd5b60405160a0810181811067ffffffffffffffff82111715611b3b57611b3b6115d3565b6040528060a08401858111156116b257600080fd5b803560ff8116811461198f57600080fd5b801515811461148e57600080fd5b803561198f81611b61565b600080600080600080868803610140811215611b9557600080fd5b873596506080601f1982011215611bab57600080fd5b506040516080810181811067ffffffffffffffff82111715611bcf57611bcf6115d3565b604052611bde60208901611b50565b8152611bec60408901611b50565b6020820152611bfd60608901611b50565b6040820152611c0e60808901611b50565b60608201529450611c228860a08901611758565b9350611c3060e08801611984565b9250611c3f6101008801611984565b9150611c4e6101208801611b6f565b90509295509295509295565b60808101610b96828480516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b600060608284031215611ca857600080fd5b82601f830112611cb757600080fd5b6040516060810181811067ffffffffffffffff82111715611cda57611cda6115d3565b6040528060608401858111156116b257600080fd5b600060208284031215611d0157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611d59578160001904821115611d3f57611d3f611d08565b80851615611d4c57918102915b93841c9390800290611d23565b509250929050565b600082611d7057506001610b96565b81611d7d57506000610b96565b8160018114611d935760028114611d9d57611db9565b6001915050610b96565b60ff841115611dae57611dae611d08565b50506001821b610b96565b5060208310610133831016604e8410600b8410161715611ddc575081810a610b96565b611de68383611d1e565b8060001904821115611dfa57611dfa611d08565b029392505050565b6000610d0c8383611d61565b60005b83811015611e29578181015183820152602001611e11565b83811115611e38576000848401525b50505050565b60018060a01b03831681526040602082015260008251806040840152611e6b816060850160208701611e0e565b601f01601f1916919091016060019392505050565b60808101818360005b6004811015611ea8578151835260209283019290910190600101611e89565b50505092915050565b815160009082906020808601845b83811015611edb57815185529382019390820190600101611ebf565b50929695505050505050565b60008251611ef9818460208701611e0e565b9190910192915050565b600082611f2057634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b6002811015611ea8578151835260209283019290910190600101611f2e565b60a08101818360005b6005811015611ea8578151835260209283019290910190600101611f56565b6000610d0c60ff841683611d61565b8781526101808101611fa3602083018980518252602090810151910152565b60ff875116606083015260ff602088015116608083015260ff60408801511660a083015260ff60608801511660c0830152611feb60e083018780518252602090810151910152565b6001600160a01b038581166101208401528481166101408401528316610160830152611a4b565b60006020828403121561202457600080fd5b8151610d0c8161196f565b82815260a08101610d0c602083018480516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b60608101818360005b6003811015611ea857815183526020928301929091019060010161207a565b6000602082840312156120ab57600080fd5b8151610d0c81611b6156fea2646970667358221220a4eb2db451140b28a531be4b65750d2066f399d88c0d352a5f9b261a0e4b7c2d64736f6c634300080a0033",
  "libraries": {
    "PoseidonT3": "0xce830DA8667097BB491A70da268b76a081211814",
    "PoseidonT4": "0xD5bFeBDce5c91413E41cc7B24C8402c59A344f7c",
    "PoseidonT5": "0x77AD263Cd578045105FBFC88A477CAd808d39Cf6",
    "PoseidonT6": "0x38628490c3043E5D0bbB26d5a0a62fC77342e9d5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_initialVoiceCreditProxy": "The InitialVoiceCreditProxy contract",
          "_messageProcessorFactory": "The MessageProcessorFactory contract",
          "_pollFactory": "The PollFactory contract",
          "_signUpGatekeeper": "The SignUpGatekeeper contract",
          "_stateTreeDepth": "The depth of the state tree",
          "_subsidyFactory": "The SubsidyFactory contract",
          "_tallyFactory": "The TallyFactory contract",
          "_topupCredit": "The TopupCredit contract"
        }
      },
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,bool)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "How long should the Poll last for",
          "_treeDepths": "The depth of the Merkle trees",
          "_verifier": "The Verifier Contract",
          "_vkRegistry": "The VkRegistry Contract",
          "useSubsidy": "If true, the Poll will use the Subsidy contract"
        },
        "returns": {
          "pollAddr": "a new Poll contract address"
        }
      },
      "getPoll(uint256)": {
        "params": {
          "_pollId": "The identifier of the Poll to retrieve"
        },
        "returns": {
          "poll": "The Poll contract object"
        }
      },
      "getStateAqRoot()": {
        "returns": {
          "root": "The Merkle root"
        }
      },
      "hash2(uint256[2])": {
        "params": {
          "array": "An array of two uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hash3(uint256[3])": {
        "params": {
          "array": "An array of three uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the three elements."
        }
      },
      "hash4(uint256[4])": {
        "params": {
          "array": "An array of four uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the four elements."
        }
      },
      "hash5(uint256[5])": {
        "params": {
          "array": "An array of five uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the five elements."
        }
      },
      "hashLeftRight(uint256,uint256)": {
        "params": {
          "left": "the first element to hash.",
          "right": "the second element to hash."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))": {
        "params": {
          "_encPubKey": "the encryption public key to be hashed",
          "_message": "the message to be hashed"
        },
        "returns": {
          "msgHash": "The hash of the message and the encryption public key"
        }
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "params": {
          "_stateLeaf": "the state leaf to be hashed"
        },
        "returns": {
          "ciphertext": "The hash of the state leaf"
        }
      },
      "mergeStateAq(uint256)": {
        "params": {
          "_pollId": "The active Poll ID"
        },
        "returns": {
          "root": "The calculated Merkle root"
        }
      },
      "mergeStateAqSubRoots(uint256,uint256)": {
        "params": {
          "_numSrQueueOps": "Number of operations",
          "_pollId": "The ID of the active Poll"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "padAndHashMessage(uint256[2],uint256)": {
        "params": {
          "dataToPad": "the data to be padded",
          "msgType": "the type of the message"
        },
        "returns": {
          "message": "The padded message",
          "msgHash": "The hash of the padded message and encryption key",
          "padKey": "The padding public key"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sha256Hash(uint256[])": {
        "params": {
          "array": "The array of uint256 elements."
        },
        "returns": {
          "result": "The SHA256 hash of the array."
        }
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "params": {
          "_initialVoiceCreditProxyData": "Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.",
          "_pubKey": "The user's desired public key.",
          "_signUpGatekeeperData": "Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MACI - Minimum Anti-Collusion Infrastructure Version 1",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerMustBePoll(address)": [
        {
          "notice": "custom errors"
        }
      ],
      "InvalidMessage()": [
        {
          "notice": "custom errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "constructor": {
        "notice": "Create a new instance of the MACI contract."
      },
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,bool)": {
        "notice": "Deploy a new Poll contract."
      },
      "getPoll(uint256)": {
        "notice": "Get the Poll details"
      },
      "getStateAqRoot()": {
        "notice": "Return the main root of the StateAq contract"
      },
      "hash2(uint256[2])": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hash3(uint256[3])": {
        "notice": "Computes the Poseidon hash of three uint256 elements."
      },
      "hash4(uint256[4])": {
        "notice": "Computes the Poseidon hash of four uint256 elements."
      },
      "hash5(uint256[5])": {
        "notice": "Computes the Poseidon hash of five uint256 elements."
      },
      "hashLeftRight(uint256,uint256)": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))": {
        "notice": "An utility function used to hash a MACI message and an encryption public key"
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "notice": "An utility function used to hash a state leaf"
      },
      "initialVoiceCreditProxy()": {
        "notice": "The contract which provides the values of the initial voice credit balance per user"
      },
      "mergeStateAq(uint256)": {
        "notice": "Allow Poll contracts to merge the state root"
      },
      "mergeStateAqSubRoots(uint256,uint256)": {
        "notice": "Allow Poll contracts to merge the state subroots"
      },
      "messageProcessorFactory()": {
        "notice": "Factory contract that deploy a MessageProcessor contract"
      },
      "nextPollId()": {
        "notice": "Each poll has an incrementing ID"
      },
      "numSignUps()": {
        "notice": "The number of signups"
      },
      "padAndHashMessage(uint256[2],uint256)": {
        "notice": "An utility function used to pad and hash a MACI message"
      },
      "pollFactory()": {
        "notice": "Factory contract that deploy a Poll contract"
      },
      "polls(uint256)": {
        "notice": "A mapping of poll IDs to Poll contracts."
      },
      "sha256Hash(uint256[])": {
        "notice": "Computes the SHA256 hash of an array of uint256 elements."
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "notice": "Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue."
      },
      "signUpGatekeeper()": {
        "notice": "Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote"
      },
      "stateAq()": {
        "notice": "The state AccQueue. Represents a mapping between each user's public key and their voice credit balance."
      },
      "stateTreeDepth()": {
        "notice": "The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625 this should also match the parameter of the circom circuits."
      },
      "subsidyFactory()": {
        "notice": "Factory contract that deploy a Subsidy contract"
      },
      "subtreesMerged()": {
        "notice": "Whether the subtrees have been merged (can merge root before new signup)"
      },
      "tallyFactory()": {
        "notice": "Factory contract that deploy a Tally contract"
      },
      "topupCredit()": {
        "notice": "ERC20 contract that hold topup credits"
      }
    },
    "notice": "A contract which allows users to sign up, and deploy new polls",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MACI.sol:MACI",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 879,
        "contract": "contracts/MACI.sol:MACI",
        "label": "nextPollId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 884,
        "contract": "contracts/MACI.sol:MACI",
        "label": "polls",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 887,
        "contract": "contracts/MACI.sol:MACI",
        "label": "subtreesMerged",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/MACI.sol:MACI",
        "label": "numSignUps",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 924,
        "contract": "contracts/MACI.sol:MACI",
        "label": "manager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}