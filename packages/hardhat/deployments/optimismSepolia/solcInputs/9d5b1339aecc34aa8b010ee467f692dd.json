{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/gatekeepers/SignUpGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title SignUpGatekeeper\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\nabstract contract SignUpGatekeeper {\n  /// @notice Allows to set the MACI contract\n  // solhint-disable-next-line no-empty-blocks\n  function setMaciInstance(address _maci) public virtual {}\n\n  /// @notice Registers the user\n  /// @param _user The address of the user\n  /// @param _data additional data\n  // solhint-disable-next-line no-empty-blocks\n  function register(address _user, bytes memory _data) public virtual {}\n}\n"
    },
    "contracts/gatekeepers/WorldcoinGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { SignUpGatekeeper } from \"./SignUpGatekeeper.sol\";\nimport { ByteHasher } from \"../utilities/ByteHasher.sol\";\nimport { IWorldID } from \"../interfaces/IWorldID.sol\";\n\ncontract WorldcoinGatekeeper is SignUpGatekeeper, Ownable {\n\tusing ByteHasher for bytes;\n\n\taddress public maci;\n\tmapping(uint256 => bool) public registeredTokenIds;\n\n\t/// @notice Thrown when attempting to reuse a nullifier\n\terror InvalidNullifier();\n\n\t/// @dev The World ID instance that will be used for verifying proofs\n\tIWorldID internal immutable worldId;\n\n\t/// @dev The contract's external nullifier hash\n\tuint256 internal immutable externalNullifier;\n\n\t/// @dev The World ID group ID (always 1)\n\tuint256 internal immutable groupId = 1;\n\n\t/// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\n\tmapping(uint256 => bool) internal nullifierHashes;\n\n\tmapping(address => bool) public registeredUsers;\n\n\terror InvalidProver();\n\terror OnlyMACI();\n\n\tconstructor(\n\t\tIWorldID _worldId,\n\t\tstring memory _appId,\n\t\tstring memory _actionId\n\t) payable Ownable() {\n\t\tworldId = _worldId;\n\t\texternalNullifier = abi\n\t\t\t.encodePacked(abi.encodePacked(_appId).hashToField(), _actionId)\n\t\t\t.hashToField();\n\t}\n\n\tfunction setMaciInstance(address _maci) public override onlyOwner {\n\t\tmaci = _maci;\n\t}\n\tfunction register(address _user, bytes memory _data) public override {\n\t\tif (maci != msg.sender) revert OnlyMACI();\n\n\t\t(\n\t\t\taddress signal,\n\t\t\tuint256 root,\n\t\t\tuint256 nullifierHash,\n\t\t\tuint256[8] memory proof\n\t\t) = abi.decode(_data, (address, uint256, uint256, uint256[8]));\n\n\t\tif (_user != signal) {\n\t\t\trevert InvalidProver();\n\t\t}\n\n\t\tverifyAndExecute(signal, root, nullifierHash, proof);\n\n\t\tregisteredUsers[_user] = true;\n\t}\n\n\tfunction verifyAndExecute(\n\t\taddress signal,\n\t\tuint256 root,\n\t\tuint256 nullifierHash,\n\t\tuint256[8] memory proof\n\t) internal {\n\t\t// First, we make sure this person hasn't done this before\n\t\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\n\n\t\t// We now verify the provided proof is valid and the user is verified by World ID\n\t\tworldId.verifyProof(\n\t\t\troot,\n\t\t\tgroupId,\n\t\t\tabi.encodePacked(signal).hashToField(),\n\t\t\tnullifierHash,\n\t\t\texternalNullifier,\n\t\t\tproof\n\t\t);\n\n\t\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\n\t\tnullifierHashes[nullifierHash] = true;\n\n\t\t// Finally, execute your logic here, for example issue a token, NFT, etc...\n\t\t// Make sure to emit some kind of event afterwards!\n\t}\n}\n"
    },
    "contracts/interfaces/IRootHistory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title Interface for WorldID setRooHistoryExpiry\n/// @author Worldcoin\n/// @notice Interface for WorldID setRooHistoryExpiry\n/// @dev Used in StateBridge to set the root history expiry time on Optimism (OPWorldID)\n/// @custom:usage abi.encodeCall(IRootHistory.setRootHistoryExpiry, (_expiryTime));\ninterface IRootHistory {\n\t/// @notice Sets the amount of time it takes for a root in the root history to expire.\n\t///\n\t/// @param expiryTime The new amount of time it takes for a root to expire.\n\t///\n\t/// @custom:reverts string If the caller is not the owner.\n\tfunction setRootHistoryExpiry(uint256 expiryTime) external;\n}\n"
    },
    "contracts/interfaces/IWorldID.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n\t/// @notice Reverts if the zero-knowledge proof is invalid.\n\t/// @param root The of the Merkle tree\n\t/// @param groupId The id of the Semaphore group\n\t/// @param signalHash A keccak256 hash of the Semaphore signal\n\t/// @param nullifierHash The nullifier hash\n\t/// @param externalNullifierHash A keccak256 hash of the external nullifier\n\t/// @param proof The zero-knowledge proof\n\t/// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n\tfunction verifyProof(\n\t\tuint256 root,\n\t\tuint256 groupId,\n\t\tuint256 signalHash,\n\t\tuint256 nullifierHash,\n\t\tuint256 externalNullifierHash,\n\t\tuint256[8] calldata proof\n\t) external view;\n}\n"
    },
    "contracts/interfaces/IWorldIDIdentityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title IWorldIDIdentityManager\n/// @author Worldcoin\n/// @dev used to fetch the latest root from the WorldIDIdentityManager\ninterface IWorldIDIdentityManager {\n\t/// @notice returns the latest root\n\tfunction latestRoot() external view returns (uint256);\n}\n"
    },
    "contracts/mock/MockWorldIDIdentityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { IWorldIDIdentityManager } from \"../interfaces/IWorldIDIdentityManager.sol\";\n\n/// @title WorldID Identity Manager Mock\n/// @author Worldcoin\n/// @notice  Mock of the WorldID Identity Manager contract (world-id-contracts) to test functionality on a local chain\n/// @dev deployed through make mock and make local-mock\ncontract MockWorldIDIdentityManager is IWorldIDIdentityManager {\n\tuint256 internal _latestRoot;\n\n\t/// @notice Represents the kind of change that is made to the root of the tree.\n\tenum TreeChange {\n\t\tInsertion,\n\t\tDeletion\n\t}\n\n\t/// @notice Emitted when the current root of the tree is updated.\n\t///\n\t/// @param preRoot The value of the tree's root before the update.\n\t/// @param kind Either \"insertion\" or \"update\", the kind of alteration that was made to the\n\t///        tree.\n\t/// @param postRoot The value of the tree's root after the update.\n\tevent TreeChanged(\n\t\tuint256 indexed preRoot,\n\t\tTreeChange indexed kind,\n\t\tuint256 indexed postRoot\n\t);\n\n\tconstructor(uint256 initRoot) {\n\t\t_latestRoot = initRoot;\n\t}\n\n\t/// @notice Registers identities into the WorldID system.\n\t/// @dev Can only be called by the identity operator.\n\t/// @dev Registration is performed off-chain and verified on-chain via the `insertionProof`.\n\t///      This saves gas and time over inserting identities one at a time.\n\t///\n\t/// @param insertionProof The proof that given the conditions (`preRoot`, `startIndex` and\n\t///        `identityCommitments`), insertion into the tree results in `postRoot`. Elements 0 and\n\t///        1 are the `x` and `y` coordinates for `ar` respectively. Elements 2 and 3 are the `x`\n\t///        coordinate for `bs`, and elements 4 and 5 are the `y` coordinate for `bs`. Elements 6\n\t///        and 7 are the `x` and `y` coordinates for `krs`.\n\t/// @param preRoot The value for the root of the tree before the `identityCommitments` have been\n\t////       inserted. Must be an element of the field `Kr`. (already in reduced form)\n\t/// @param startIndex The position in the tree at which the insertions were made.\n\t/// @param identityCommitments The identities that were inserted into the tree starting at\n\t///        `startIndex` and `preRoot` to give `postRoot`. All of the commitments must be\n\t///        elements of the field `Kr`.\n\t/// @param postRoot The root obtained after inserting all of `identityCommitments` into the tree\n\t///        described by `preRoot`. Must be an element of the field `Kr`. (alread in reduced form)\n\t///\n\tfunction registerIdentities(\n\t\tuint256[8] calldata insertionProof,\n\t\tuint256 preRoot,\n\t\tuint32 startIndex,\n\t\tuint256[] calldata identityCommitments,\n\t\tuint256 postRoot\n\t) public {\n\t\t_latestRoot = postRoot;\n\t\temit TreeChanged(preRoot, TreeChange.Insertion, postRoot);\n\t}\n\n\t/// @notice Deletes identities from the WorldID system.\n\t/// @dev Can only be called by the identity operator.\n\t/// @dev Deletion is performed off-chain and verified on-chain via the `deletionProof`.\n\t///      This saves gas and time over deleting identities one at a time.\n\t///\n\t/// @param deletionProof The proof that given the conditions (`preRoot` and `packedDeletionIndices`),\n\t///        deletion into the tree results in `postRoot`. Elements 0 and 1 are the `x` and `y`\n\t///        coordinates for `ar` respectively. Elements 2 and 3 are the `x` coordinate for `bs`,\n\t///         and elements 4 and 5 are the `y` coordinate for `bs`. Elements 6 and 7 are the `x`\n\t///         and `y` coordinates for `krs`.\n\t/// @param packedDeletionIndices The indices of the identities that were deleted from the tree. The batch size is inferred from the length of this\n\t//// array: batchSize = packedDeletionIndices / 4\n\t/// @param preRoot The value for the root of the tree before the corresponding identity commitments have\n\t/// been deleted. Must be an element of the field `Kr`.\n\t/// @param postRoot The root obtained after deleting all of `identityCommitments` into the tree\n\t///        described by `preRoot`. Must be an element of the field `Kr`.\n\tfunction deleteIdentities(\n\t\tuint256[8] calldata deletionProof,\n\t\tbytes calldata packedDeletionIndices,\n\t\tuint256 preRoot,\n\t\tuint256 postRoot\n\t) public {\n\t\t_latestRoot = postRoot;\n\t\temit TreeChanged(preRoot, TreeChange.Deletion, postRoot);\n\t}\n\n\tfunction insertRoot(uint256 postRoot) public {\n\t\tuint256 preRoot = _latestRoot;\n\t\t_latestRoot = postRoot;\n\n\t\temit TreeChanged(preRoot, TreeChange.Insertion, postRoot);\n\t}\n\n\tfunction latestRoot() external view returns (uint256) {\n\t\treturn _latestRoot;\n\t}\n}\n"
    },
    "contracts/utilities/ByteHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nlibrary ByteHasher {\n\t/// @dev Creates a keccak256 hash of a bytestring.\n\t/// @param value The bytestring to hash\n\t/// @return The hash of the specified value\n\t/// @dev `>> 8` makes sure that the result is included in our field\n\tfunction hashToField(bytes memory value) internal pure returns (uint256) {\n\t\treturn uint256(keccak256(abi.encodePacked(value))) >> 8;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}