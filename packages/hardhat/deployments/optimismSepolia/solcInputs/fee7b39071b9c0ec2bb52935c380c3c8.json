{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/crypto/Hasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { SnarkConstants } from \"./SnarkConstants.sol\";\nimport { PoseidonT3 } from \"./PoseidonT3.sol\";\nimport { PoseidonT4 } from \"./PoseidonT4.sol\";\nimport { PoseidonT5 } from \"./PoseidonT5.sol\";\nimport { PoseidonT6 } from \"./PoseidonT6.sol\";\n\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\n/// functions for 2, 3, 4, 5, and 12 input elements.\ncontract Hasher is SnarkConstants {\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\n  /// @param array The array of uint256 elements.\n  /// @return result The SHA256 hash of the array.\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param array An array of two uint256 elements.\n  /// @return result The Poseidon hash of the two elements.\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\n    result = PoseidonT3.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of three uint256 elements.\n  /// @param array An array of three uint256 elements.\n  /// @return result The Poseidon hash of the three elements.\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\n    result = PoseidonT4.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of four uint256 elements.\n  /// @param array An array of four uint256 elements.\n  /// @return result The Poseidon hash of the four elements.\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\n    result = PoseidonT5.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of five uint256 elements.\n  /// @param array An array of five uint256 elements.\n  /// @return result The Poseidon hash of the five elements.\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\n    result = PoseidonT6.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param left the first element to hash.\n  /// @param right the second element to hash.\n  /// @return result The Poseidon hash of the two elements.\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\n    uint256[2] memory input;\n    input[0] = left;\n    input[1] = right;\n    result = hash2(input);\n  }\n}\n"
    },
    "contracts/crypto/PoseidonT3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT3 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\n}\n"
    },
    "contracts/crypto/PoseidonT4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT4 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\n}\n"
    },
    "contracts/crypto/PoseidonT5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT5 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\n}\n"
    },
    "contracts/crypto/PoseidonT6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT6 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\n}\n"
    },
    "contracts/crypto/SnarkConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title SnarkConstants\n/// @notice This contract contains constants related to the SNARK\n/// components of MACI.\ncontract SnarkConstants {\n  /// @notice The scalar field\n  uint256 internal constant SNARK_SCALAR_FIELD =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n  /// @notice The public key here is the first Pedersen base\n  /// point from iden3's circomlib implementation of the Pedersen hash.\n  /// Since it is generated using a hash-to-curve function, we are\n  /// confident that no-one knows the private key associated with this\n  /// public key. See:\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\n  /// Its hash should equal\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\n  uint256 internal constant PAD_PUBKEY_X =\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\n  uint256 internal constant PAD_PUBKEY_Y =\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\n\n  /// @notice The Keccack256 hash of 'Maci'\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\n}\n"
    },
    "contracts/gatekeepers/SignUpGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title SignUpGatekeeper\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\nabstract contract SignUpGatekeeper {\n  /// @notice Allows to set the MACI contract\n  // solhint-disable-next-line no-empty-blocks\n  function setMaciInstance(address _maci) public virtual {}\n\n  /// @notice Registers the user\n  /// @param _user The address of the user\n  /// @param _data additional data\n  // solhint-disable-next-line no-empty-blocks\n  function register(address _user, bytes memory _data) public virtual {}\n}\n"
    },
    "contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title InitialVoiceCreditProxy\n/// @notice This contract is the base contract for\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\n/// credit balance for MACI's voters.\nabstract contract InitialVoiceCreditProxy {\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\n  /// @param _user the address of the voter\n  /// @param _data additional data\n  /// @return the balance\n  // solhint-disable-next-line no-empty-blocks\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\n}\n"
    },
    "contracts/interfaces/IMACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { AccQueue } from \"../trees/AccQueue.sol\";\n\n/// @title IMACI\n/// @notice MACI interface\ninterface IMACI {\n  /// @notice Get the depth of the state tree\n  /// @return The depth of the state tree\n  function stateTreeDepth() external view returns (uint8);\n\n  /// @notice Return the main root of the StateAq contract\n  /// @return The Merkle root\n  function getStateAqRoot() external view returns (uint256);\n\n  /// @notice Allow Poll contracts to merge the state subroots\n  /// @param _numSrQueueOps Number of operations\n  /// @param _pollId The ID of the active Poll\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\n\n  /// @notice Allow Poll contracts to merge the state root\n  /// @param _pollId The active Poll ID\n  /// @return The calculated Merkle root\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\n\n  /// @notice Get the number of signups\n  /// @return numsignUps The number of signups\n  function numSignUps() external view returns (uint256);\n\n  /// @notice Get the state AccQueue\n  /// @return The state AccQueue\n  function stateAq() external view returns (AccQueue);\n}\n"
    },
    "contracts/interfaces/IMPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title IMessageProcessorFactory\n/// @notice MessageProcessorFactory interface\ninterface IMessageProcessorFactory {\n  /// @notice Deploy a new MessageProcessor contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _owner Owner of the MessageProcessor contract\n  /// @return The deployed MessageProcessor contract\n  function deploy(address _verifier, address _vkRegistry, address _poll, address _owner) external returns (address);\n}\n"
    },
    "contracts/interfaces/IPollFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { TopupCredit } from \"../TopupCredit.sol\";\nimport { Params } from \"../utilities/Params.sol\";\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IPollFactory\n/// @notice PollFactory interface\ninterface IPollFactory {\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\n  /// @param _duration The duration of the poll\n  /// @param _maxValues The max values for the poll\n  /// @param _treeDepths The depths of the merkle trees\n  /// @param _coordinatorPubKey The coordinator's public key\n  /// @param _maci The MACI contract interface reference\n  /// @param _topupCredit The TopupCredit contract\n  /// @param _pollOwner The owner of the poll\n  /// @return The deployed Poll contract\n  function deploy(\n    uint256 _duration,\n    Params.MaxValues memory _maxValues,\n    Params.TreeDepths memory _treeDepths,\n    DomainObjs.PubKey memory _coordinatorPubKey,\n    address _maci,\n    TopupCredit _topupCredit,\n    address _pollOwner\n  ) external returns (address);\n}\n"
    },
    "contracts/interfaces/ITallySubsidyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title ITallySubsidyFactory\n/// @notice TallySubsidyFactory interface\ninterface ITallySubsidyFactory {\n  /// @notice Deploy a new Tally or Subsidy contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _messageProcessor MessageProcessor contract\n  /// @param _owner Owner of the contract\n  /// @return The deployed contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _messageProcessor,\n    address _owner\n  ) external returns (address);\n}\n"
    },
    "contracts/MACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { IPollFactory } from \"./interfaces/IPollFactory.sol\";\nimport { IMessageProcessorFactory } from \"./interfaces/IMPFactory.sol\";\nimport { ITallySubsidyFactory } from \"./interfaces/ITallySubsidyFactory.sol\";\nimport { InitialVoiceCreditProxy } from \"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\nimport { SignUpGatekeeper } from \"./gatekeepers/SignUpGatekeeper.sol\";\nimport { AccQueue } from \"./trees/AccQueue.sol\";\nimport { AccQueueQuinaryBlankSl } from \"./trees/AccQueueQuinaryBlankSl.sol\";\nimport { IMACI } from \"./interfaces/IMACI.sol\";\nimport { Params } from \"./utilities/Params.sol\";\nimport { TopupCredit } from \"./TopupCredit.sol\";\nimport { Utilities } from \"./utilities/Utilities.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"hardhat/console.sol\";\n\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\n/// @notice A contract which allows users to sign up, and deploy new polls\ncontract MACI is IMACI, Params, Utilities, Ownable {\n\t/// @notice The state tree depth is fixed. As such it should be as large as feasible\n\t/// so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625\n\t/// this should also match the parameter of the circom circuits.\n\tuint8 public immutable stateTreeDepth;\n\n\t/// @notice IMPORTANT: remember to change the ballot tree depth\n\t/// in contracts/ts/genEmptyBallotRootsContract.ts file\n\t/// if we change the state tree depth!\n\tuint8 internal constant STATE_TREE_SUBDEPTH = 2;\n\tuint8 internal constant TREE_ARITY = 5;\n\n\t/// @notice The hash of a blank state leaf\n\tuint256 internal constant BLANK_STATE_LEAF_HASH =\n\t\tuint256(\n\t\t\t6769006970205099520508948723718471724660867171122235270773600567925038008762\n\t\t);\n\n\t/// @notice Each poll has an incrementing ID\n\tuint256 public nextPollId;\n\n\t/// @notice A mapping of poll IDs to Poll contracts.\n\tmapping(uint256 => address) public polls;\n\n\t/// @notice Whether the subtrees have been merged (can merge root before new signup)\n\tbool public subtreesMerged;\n\n\t/// @notice The number of signups\n\tuint256 public numSignUps;\n\n\t/// @notice ERC20 contract that hold topup credits\n\tTopupCredit public immutable topupCredit;\n\n\t/// @notice Factory contract that deploy a Poll contract\n\tIPollFactory public immutable pollFactory;\n\n\t/// @notice Factory contract that deploy a MessageProcessor contract\n\tIMessageProcessorFactory public immutable messageProcessorFactory;\n\n\t/// @notice Factory contract that deploy a Tally contract\n\tITallySubsidyFactory public immutable tallyFactory;\n\n\t/// @notice Factory contract that deploy a Subsidy contract\n\tITallySubsidyFactory public immutable subsidyFactory;\n\n\t/// @notice The state AccQueue. Represents a mapping between each user's public key\n\t/// and their voice credit balance.\n\tAccQueue public immutable stateAq;\n\n\t/// @notice Address of the SignUpGatekeeper, a contract which determines whether a\n\t/// user may sign up to vote\n\tSignUpGatekeeper public immutable signUpGatekeeper;\n\n\t/// @notice The contract which provides the values of the initial voice credit\n\t/// balance per user\n\tInitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\n\n\t/// @notice A struct holding the addresses of poll, mp and tally\n\tstruct PollContracts {\n\t\taddress poll;\n\t\taddress messageProcessor;\n\t\taddress tally;\n\t\taddress subsidy;\n\t}\n\n\t// Events\n\tevent SignUp(\n\t\tuint256 _stateIndex,\n\t\tuint256 indexed _userPubKeyX,\n\t\tuint256 indexed _userPubKeyY,\n\t\tuint256 _voiceCreditBalance,\n\t\tuint256 _timestamp\n\t);\n\tevent DeployPoll(\n\t\tuint256 _pollId,\n\t\tuint256 indexed _coordinatorPubKeyX,\n\t\tuint256 indexed _coordinatorPubKeyY,\n\t\tPollContracts pollAddr\n\t);\n\n\t/// @notice Only allow a Poll contract to call the modified function.\n\tmodifier onlyPoll(uint256 _pollId) {\n\t\tif (msg.sender != address(polls[_pollId]))\n\t\t\trevert CallerMustBePoll(msg.sender);\n\t\t_;\n\t}\n\n\t/// @notice custom errors\n\terror CallerMustBePoll(address _caller);\n\terror PoseidonHashLibrariesNotLinked();\n\terror TooManySignups();\n\terror MaciPubKeyLargerThanSnarkFieldSize();\n\terror PreviousPollNotCompleted(uint256 pollId);\n\terror PollDoesNotExist(uint256 pollId);\n\terror SignupTemporaryBlocked();\n\n\t/// @notice Create a new instance of the MACI contract.\n\t/// @param _pollFactory The PollFactory contract\n\t/// @param _messageProcessorFactory The MessageProcessorFactory contract\n\t/// @param _tallyFactory The TallyFactory contract\n\t/// @param _subsidyFactory The SubsidyFactory contract\n\t/// @param _signUpGatekeeper The SignUpGatekeeper contract\n\t/// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\n\t/// @param _topupCredit The TopupCredit contract\n\t/// @param _stateTreeDepth The depth of the state tree\n\tconstructor(\n\t\tIPollFactory _pollFactory,\n\t\tIMessageProcessorFactory _messageProcessorFactory,\n\t\tITallySubsidyFactory _tallyFactory,\n\t\tITallySubsidyFactory _subsidyFactory,\n\t\tSignUpGatekeeper _signUpGatekeeper,\n\t\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\n\t\tTopupCredit _topupCredit,\n\t\tuint8 _stateTreeDepth\n\t) payable {\n\t\t// Deploy the state AccQueue\n\t\tstateAq = new AccQueueQuinaryBlankSl(STATE_TREE_SUBDEPTH);\n\t\tstateAq.enqueue(BLANK_STATE_LEAF_HASH);\n\n\t\t// because we add a blank leaf we need to count one signup\n\t\t// so we don't allow max + 1\n\t\tunchecked {\n\t\t\tnumSignUps++;\n\t\t}\n\n\t\tpollFactory = _pollFactory;\n\t\tmessageProcessorFactory = _messageProcessorFactory;\n\t\ttallyFactory = _tallyFactory;\n\t\tsubsidyFactory = _subsidyFactory;\n\t\ttopupCredit = _topupCredit;\n\t\tsignUpGatekeeper = _signUpGatekeeper;\n\t\tinitialVoiceCreditProxy = _initialVoiceCreditProxy;\n\t\tstateTreeDepth = _stateTreeDepth;\n\n\t\tconsole.logUint(hash2([uint256(1), uint256(1)]));\n\n\t\t// Verify linked poseidon libraries\n\t\tif (hash2([uint256(1), uint256(1)]) == 0)\n\t\t\trevert PoseidonHashLibrariesNotLinked();\n\t}\n\n\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n\t/// double sign-ups or ineligible users from doing so.  This function will\n\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\n\t/// fresh state leaf into the state AccQueue.\n\t/// @param _pubKey The user's desired public key.\n\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n\t///     register() function. For instance, the POAPGatekeeper or\n\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n\t///     token ID.\n\t/// @param _initialVoiceCreditProxyData Data to pass to the\n\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\n\t///     credits this user should have.\n\tfunction signUp(\n\t\tPubKey memory _pubKey,\n\t\tbytes memory _signUpGatekeeperData,\n\t\tbytes memory _initialVoiceCreditProxyData\n\t) public virtual {\n\t\t// prevent new signups until we merge the roots (possible DoS)\n\t\tif (subtreesMerged) revert SignupTemporaryBlocked();\n\n\t\t// ensure we do not have more signups than what the circuits support\n\t\tif (numSignUps >= uint256(TREE_ARITY) ** uint256(stateTreeDepth))\n\t\t\trevert TooManySignups();\n\n\t\tif (\n\t\t\t_pubKey.x >= SNARK_SCALAR_FIELD || _pubKey.y >= SNARK_SCALAR_FIELD\n\t\t) {\n\t\t\trevert MaciPubKeyLargerThanSnarkFieldSize();\n\t\t}\n\n\t\t// Increment the number of signups\n\t\t// cannot overflow with realistic STATE_TREE_DEPTH\n\t\t// values as numSignUps < 5 ** STATE_TREE_DEPTH -1\n\t\tunchecked {\n\t\t\tnumSignUps++;\n\t\t}\n\n\t\t// Register the user via the sign-up gatekeeper. This function should\n\t\t// throw if the user has already registered or if ineligible to do so.\n\t\tsignUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\n\n\t\t// Get the user's voice credit balance.\n\t\tuint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(\n\t\t\tmsg.sender,\n\t\t\t_initialVoiceCreditProxyData\n\t\t);\n\n\t\tuint256 timestamp = block.timestamp;\n\t\t// Create a state leaf and enqueue it.\n\t\tuint256 stateLeaf = hashStateLeaf(\n\t\t\tStateLeaf(_pubKey, voiceCreditBalance, timestamp)\n\t\t);\n\t\tuint256 stateIndex = stateAq.enqueue(stateLeaf);\n\n\t\temit SignUp(\n\t\t\tstateIndex,\n\t\t\t_pubKey.x,\n\t\t\t_pubKey.y,\n\t\t\tvoiceCreditBalance,\n\t\t\ttimestamp\n\t\t);\n\t}\n\n\t/// @notice Deploy a new Poll contract.\n\t/// @param _duration How long should the Poll last for\n\t/// @param _treeDepths The depth of the Merkle trees\n\t/// @param _coordinatorPubKey The coordinator's public key\n\t/// @param _verifier The Verifier Contract\n\t/// @param _vkRegistry The VkRegistry Contract\n\t/// @param useSubsidy If true, the Poll will use the Subsidy contract\n\t/// @return pollAddr a new Poll contract address\n\tfunction deployPoll(\n\t\tuint256 _duration,\n\t\tTreeDepths memory _treeDepths,\n\t\tPubKey memory _coordinatorPubKey,\n\t\taddress _verifier,\n\t\taddress _vkRegistry,\n\t\tbool useSubsidy\n\t) public virtual onlyOwner returns (PollContracts memory pollAddr) {\n\t\t// cache the poll to a local variable so we can increment it\n\t\tuint256 pollId = nextPollId;\n\n\t\t// Increment the poll ID for the next poll\n\t\t// 2 ** 256 polls available\n\t\tunchecked {\n\t\t\tnextPollId++;\n\t\t}\n\n\t\t// if (pollId > 0) {\n\t\t// \tif (!stateAq.treeMerged()) revert PreviousPollNotCompleted(pollId);\n\t\t// }\n\n\t\tMaxValues memory maxValues = MaxValues({\n\t\t\tmaxMessages: uint256(TREE_ARITY) ** _treeDepths.messageTreeDepth,\n\t\t\tmaxVoteOptions: uint256(TREE_ARITY) **\n\t\t\t\t_treeDepths.voteOptionTreeDepth\n\t\t});\n\n\t\taddress _owner = owner();\n\n\t\taddress p = pollFactory.deploy(\n\t\t\t_duration,\n\t\t\tmaxValues,\n\t\t\t_treeDepths,\n\t\t\t_coordinatorPubKey,\n\t\t\taddress(this),\n\t\t\ttopupCredit,\n\t\t\t_owner\n\t\t);\n\n\t\taddress mp = messageProcessorFactory.deploy(\n\t\t\t_verifier,\n\t\t\t_vkRegistry,\n\t\t\tp,\n\t\t\t_owner\n\t\t);\n\t\taddress tally = tallyFactory.deploy(\n\t\t\t_verifier,\n\t\t\t_vkRegistry,\n\t\t\tp,\n\t\t\tmp,\n\t\t\t_owner\n\t\t);\n\n\t\taddress subsidy;\n\t\tif (useSubsidy) {\n\t\t\tsubsidy = subsidyFactory.deploy(\n\t\t\t\t_verifier,\n\t\t\t\t_vkRegistry,\n\t\t\t\tp,\n\t\t\t\tmp,\n\t\t\t\t_owner\n\t\t\t);\n\t\t}\n\n\t\tpolls[pollId] = p;\n\n\t\t// store the addresses in a struct so they can be returned\n\t\tpollAddr = PollContracts({\n\t\t\tpoll: p,\n\t\t\tmessageProcessor: mp,\n\t\t\ttally: tally,\n\t\t\tsubsidy: subsidy\n\t\t});\n\n\t\temit DeployPoll(\n\t\t\tpollId,\n\t\t\t_coordinatorPubKey.x,\n\t\t\t_coordinatorPubKey.y,\n\t\t\tpollAddr\n\t\t);\n\t}\n\n\t/// @inheritdoc IMACI\n\tfunction mergeStateAqSubRoots(\n\t\tuint256 _numSrQueueOps,\n\t\tuint256 _pollId\n\t) public onlyPoll(_pollId) {\n\t\tstateAq.mergeSubRoots(_numSrQueueOps);\n\n\t\t// if we have merged all subtrees then put a block\n\t\tif (stateAq.subTreesMerged()) {\n\t\t\tsubtreesMerged = true;\n\t\t}\n\t}\n\n\t/// @inheritdoc IMACI\n\tfunction mergeStateAq(\n\t\tuint256 _pollId\n\t) public onlyPoll(_pollId) returns (uint256 root) {\n\t\t// remove block\n\t\tsubtreesMerged = false;\n\n\t\troot = stateAq.merge(stateTreeDepth);\n\t}\n\n\t/// @inheritdoc IMACI\n\tfunction getStateAqRoot() public view returns (uint256 root) {\n\t\troot = stateAq.getMainRoot(stateTreeDepth);\n\t}\n\n\t/// @notice Get the Poll details\n\t/// @param _pollId The identifier of the Poll to retrieve\n\t/// @return poll The Poll contract object\n\tfunction getPoll(uint256 _pollId) public view returns (address poll) {\n\t\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n\t\tpoll = polls[_pollId];\n\t}\n}\n"
    },
    "contracts/TopupCredit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title TopupCredit\n/// @notice A contract representing a token used to topup a MACI's voter\n/// credits\ncontract TopupCredit is ERC20, Ownable {\n  uint8 public constant DECIMALS = 1;\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\n\n  /// @notice custom errors\n  error ExceedLimit();\n\n  /// @notice create  a new TopupCredit token\n  constructor() payable ERC20(\"TopupCredit\", \"TopupCredit\") {}\n\n  /// @notice mint tokens to an account\n  /// @param account the account to mint tokens to\n  /// @param amount the amount of tokens to mint\n  function airdropTo(address account, uint256 amount) public onlyOwner {\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\n      revert ExceedLimit();\n    }\n\n    _mint(account, amount);\n  }\n\n  /// @notice mint tokens to the contract owner\n  /// @param amount the amount of tokens to mint\n  function airdrop(uint256 amount) public onlyOwner {\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\n      revert ExceedLimit();\n    }\n\n    _mint(msg.sender, amount);\n  }\n}\n"
    },
    "contracts/trees/AccQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\n\n/// @title AccQueue\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\n/// subtree. To obtain the main tree root, the contract owner must merge the\n/// subtrees together. Merging subtrees requires at least 2 operations:\n/// mergeSubRoots(), and merge(). To get around the gas limit,\n/// the mergeSubRoots() can be performed in multiple transactions.\nabstract contract AccQueue is Ownable, Hasher {\n  // The maximum tree depth\n  uint256 public constant MAX_DEPTH = 32;\n\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\n  /// in a Merkle tree while it is progressively updated.\n  struct Queue {\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\n    /// uint256[4] arrays, **not the other way round**:\n    uint256[4][MAX_DEPTH + 1] levels;\n    uint256[MAX_DEPTH + 1] indices;\n  }\n\n  // The depth of each subtree\n  uint256 internal immutable subDepth;\n\n  // The number of elements per hash operation. Should be either 2 (for\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\n  // maximum supported number of inputs for the EVM implementation of the\n  // Poseidon hash function\n  uint256 internal immutable hashLength;\n\n  // hashLength ** subDepth\n  uint256 internal immutable subTreeCapacity;\n\n  // True hashLength == 2, false if hashLength == 5\n  bool internal isBinary;\n\n  // The index of the current subtree. e.g. the first subtree has index 0, the\n  // second has 1, and so on\n  uint256 internal currentSubtreeIndex;\n\n  // Tracks the current subtree.\n  Queue internal leafQueue;\n\n  // Tracks the smallest tree of subroots\n  Queue internal subRootQueue;\n\n  // Subtree roots\n  mapping(uint256 => uint256) internal subRoots;\n\n  // Merged roots\n  uint256[MAX_DEPTH + 1] internal mainRoots;\n\n  // Whether the subtrees have been merged\n  bool public subTreesMerged;\n\n  // Whether entire merkle tree has been merged\n  bool public treeMerged;\n\n  // The root of the shortest possible tree which fits all current subtree\n  // roots\n  uint256 internal smallSRTroot;\n\n  // Tracks the next subroot to queue\n  uint256 internal nextSubRootIndex;\n\n  // The number of leaves inserted across all subtrees so far\n  uint256 public numLeaves;\n\n  /// @notice custom errors\n  error SubDepthCannotBeZero();\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\n  error InvalidHashLength();\n  error DepthCannotBeZero();\n  error SubTreesAlreadyMerged();\n  error NothingToMerge();\n  error SubTreesNotMerged();\n  error DepthTooLarge(uint256 _depth, uint256 max);\n  error DepthTooSmall(uint256 _depth, uint256 min);\n  error InvalidIndex(uint256 _index);\n  error InvalidLevel();\n\n  /// @notice Create a new AccQueue\n  /// @param _subDepth The depth of each subtree.\n  /// @param _hashLength The number of leaves per node (2 or 5).\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\n    /// validation\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\n\n    isBinary = _hashLength == 2;\n    subDepth = _subDepth;\n    hashLength = _hashLength;\n    subTreeCapacity = _hashLength ** _subDepth;\n  }\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which require\n  /// different input array lengths.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return _hash The hash of the level and leaf.\n  // solhint-disable-next-line no-empty-blocks\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which require\n  /// different input array lengths.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return _hash The hash of the level and leaf.\n  // solhint-disable-next-line no-empty-blocks\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\n\n  /// @notice Returns the zero leaf at a specified level.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which will produce\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\n  /// nothing-up-my-sleeve value.\n  /// @param _level The level at which to return the zero leaf.\n  /// @return zero The zero leaf at the specified level.\n  // solhint-disable-next-line no-empty-blocks\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\n\n  /// @notice Add a leaf to the queue for the current subtree.\n  /// @param _leaf The leaf to add.\n  /// @return leafIndex The index of the leaf in the queue.\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\n    leafIndex = numLeaves;\n    // Recursively queue the leaf\n    _enqueue(_leaf, 0);\n\n    // Update the leaf counter\n    numLeaves = leafIndex + 1;\n\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\n    // obsolete\n    delete mainRoots;\n    delete smallSRTroot;\n    subTreesMerged = false;\n\n    // If a subtree is full\n    if (numLeaves % subTreeCapacity == 0) {\n      // Store the subroot\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n      // Increment the index\n      currentSubtreeIndex++;\n\n      // Delete ancillary data\n      delete leafQueue.levels[subDepth][0];\n      delete leafQueue.indices;\n    }\n  }\n\n  /// @notice Updates the queue at a given level and hashes any subroots\n  /// that need to be hashed.\n  /// @param _leaf The leaf to add.\n  /// @param _level The level at which to queue the leaf.\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\n    if (_level > subDepth) {\n      revert InvalidLevel();\n    }\n\n    while (true) {\n      uint256 n = leafQueue.indices[_level];\n\n      if (n != hashLength - 1) {\n        // Just store the leaf\n        leafQueue.levels[_level][n] = _leaf;\n\n        if (_level != subDepth) {\n          // Update the index\n          leafQueue.indices[_level]++;\n        }\n\n        return;\n      }\n\n      // Hash the leaves to next level\n      _leaf = hashLevel(_level, _leaf);\n\n      // Reset the index for this level\n      delete leafQueue.indices[_level];\n\n      // Queue the hash of the leaves into to the next level\n      _level++;\n    }\n  }\n\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\n  /// resulting subroot.\n  function fill() public onlyOwner {\n    if (numLeaves % subTreeCapacity == 0) {\n      // If the subtree is completely empty, then the subroot is a\n      // precalculated zero value\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\n    } else {\n      // Otherwise, fill the rest of the subtree with zeros\n      _fill(0);\n\n      // Store the subroot\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n      // Reset the subtree data\n      delete leafQueue.levels;\n\n      // Reset the merged roots\n      delete mainRoots;\n    }\n\n    // Increment the subtree index\n    uint256 curr = currentSubtreeIndex + 1;\n    currentSubtreeIndex = curr;\n\n    // Update the number of leaves\n    numLeaves = curr * subTreeCapacity;\n\n    // Reset the subroot tree root now that it is obsolete\n    delete smallSRTroot;\n\n    subTreesMerged = false;\n  }\n\n  /// @notice A function that queues zeros to the specified level, hashes,\n  /// the level, and enqueues the hash to the next level.\n  /// @param _level The level at which to queue zeros.\n  // solhint-disable-next-line no-empty-blocks\n  function _fill(uint256 _level) internal virtual {}\n\n  /// Insert a subtree. Used for batch enqueues.\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\n    subRoots[currentSubtreeIndex] = _subRoot;\n\n    // Increment the subtree index\n    currentSubtreeIndex++;\n\n    // Update the number of leaves\n    numLeaves += subTreeCapacity;\n\n    // Reset the subroot tree root now that it is obsolete\n    delete smallSRTroot;\n\n    subTreesMerged = false;\n  }\n\n  /// @notice Calculate the lowest possible height of a tree with\n  /// all the subroots merged together.\n  /// @return depth The lowest possible height of a tree with all the\n  function calcMinHeight() public view returns (uint256 depth) {\n    depth = 1;\n    while (true) {\n      if (hashLength ** depth >= currentSubtreeIndex) {\n        break;\n      }\n      depth++;\n    }\n  }\n\n  /// @notice Merge all subtrees to form the shortest possible tree.\n  /// This function can be called either once to merge all subtrees in a\n  /// single transaction, or multiple times to do the same in multiple\n  /// transactions.\n  /// @param _numSrQueueOps The number of times this function will call\n  ///                       queueSubRoot(), up to the maximum number of times\n  ///                       necessary. If it is set to 0, it will call\n  ///                       queueSubRoot() as many times as is necessary. Set\n  ///                       this to a low number and call this function\n  ///                       multiple times if there are many subroots to\n  ///                       merge, or a single transaction could run out of\n  ///                       gas.\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\n    // This function can only be called once unless a new subtree is created\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\n\n    // There must be subtrees to merge\n    if (numLeaves == 0) revert NothingToMerge();\n\n    // Fill any empty leaves in the current subtree with zeros only if the\n    // current subtree is not full\n    if (numLeaves % subTreeCapacity != 0) {\n      fill();\n    }\n\n    // If there is only 1 subtree, use its root\n    if (currentSubtreeIndex == 1) {\n      smallSRTroot = getSubRoot(0);\n      subTreesMerged = true;\n      return;\n    }\n\n    uint256 depth = calcMinHeight();\n\n    uint256 queueOpsPerformed = 0;\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\n        // If the limit is not 0, stop if the limit has been reached\n        return;\n      }\n\n      // Queue the next subroot\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\n\n      // Increment the next subroot counter\n      nextSubRootIndex++;\n\n      // Increment the ops counter\n      queueOpsPerformed++;\n    }\n\n    // The height of the tree of subroots\n    uint256 m = hashLength ** depth;\n\n    // Queue zeroes to fill out the SRT\n    if (nextSubRootIndex == currentSubtreeIndex) {\n      uint256 z = getZero(subDepth);\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\n        queueSubRoot(z, 0, depth);\n      }\n    }\n\n    // Store the smallest main root\n    smallSRTroot = subRootQueue.levels[depth][0];\n    subTreesMerged = true;\n  }\n\n  /// @notice Queues a subroot into the subroot tree.\n  /// @param _leaf The value to queue.\n  /// @param _level The level at which to queue _leaf.\n  /// @param _maxDepth The depth of the tree.\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\n    if (_level > _maxDepth) {\n      return;\n    }\n\n    uint256 n = subRootQueue.indices[_level];\n\n    if (n != hashLength - 1) {\n      // Just store the leaf\n      subRootQueue.levels[_level][n] = _leaf;\n      subRootQueue.indices[_level]++;\n    } else {\n      // Hash the elements in this level and queue it in the next level\n      uint256 hashed;\n      if (isBinary) {\n        uint256[2] memory inputs;\n        inputs[0] = subRootQueue.levels[_level][0];\n        inputs[1] = _leaf;\n        hashed = hash2(inputs);\n      } else {\n        uint256[5] memory inputs;\n        for (uint8 i = 0; i < n; i++) {\n          inputs[i] = subRootQueue.levels[_level][i];\n        }\n        inputs[n] = _leaf;\n        hashed = hash5(inputs);\n      }\n\n      // TODO: change recursion to a while loop\n      // Recurse\n      delete subRootQueue.indices[_level];\n      queueSubRoot(hashed, _level + 1, _maxDepth);\n    }\n  }\n\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\n  ///               this function will revert.\n  /// @return root The root of the main tree.\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\n    // The tree depth must be more than 0\n    if (_depth == 0) revert DepthCannotBeZero();\n\n    // Ensure that the subtrees have been merged\n    if (!subTreesMerged) revert SubTreesNotMerged();\n\n    // Check the depth\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\n\n    // Calculate the SRT depth\n    uint256 srtDepth = subDepth;\n    while (true) {\n      if (hashLength ** srtDepth >= numLeaves) {\n        break;\n      }\n      srtDepth++;\n    }\n\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\n\n    // If the depth is the same as the SRT depth, just use the SRT root\n    if (_depth == srtDepth) {\n      mainRoots[_depth] = smallSRTroot;\n      treeMerged = true;\n      return smallSRTroot;\n    } else {\n      root = smallSRTroot;\n\n      // Calculate the main root\n\n      for (uint256 i = srtDepth; i < _depth; i++) {\n        uint256 z = getZero(i);\n\n        if (isBinary) {\n          uint256[2] memory inputs;\n          inputs[0] = root;\n          inputs[1] = z;\n          root = hash2(inputs);\n        } else {\n          uint256[5] memory inputs;\n          inputs[0] = root;\n          inputs[1] = z;\n          inputs[2] = z;\n          inputs[3] = z;\n          inputs[4] = z;\n          root = hash5(inputs);\n        }\n      }\n\n      mainRoots[_depth] = root;\n      treeMerged = true;\n    }\n  }\n\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\n  /// to a subtree which has not been filled yet.\n  /// @param _index The subroot index.\n  /// @return subRoot The subroot at the specified index.\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\n    subRoot = subRoots[_index];\n  }\n\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\n  /// using mergeSubRoots.\n  /// @return smallSubTreeRoot The SRT root.\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\n    if (!subTreesMerged) revert SubTreesNotMerged();\n    smallSubTreeRoot = smallSRTroot;\n  }\n\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\n  /// @dev merge() or merged(_depth) must be called first.\n  /// @param _depth The depth of the main tree. It must first be computed\n  ///               using mergeSubRoots() and merge().\n  /// @return mainRoot The root of the main tree.\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\n\n    mainRoot = mainRoots[_depth];\n  }\n\n  /// @notice Get the next subroot index and the current subtree index.\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\n    next = nextSubRootIndex;\n    current = currentSubtreeIndex;\n  }\n}\n"
    },
    "contracts/trees/AccQueueQuinary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { AccQueue } from \"./AccQueue.sol\";\n\n/// @title AccQueueQuinary\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\n/// subtree. To obtain the main tree root, the contract owner must merge the\n/// subtrees together. Merging subtrees requires at least 2 operations:\n/// mergeSubRoots(), and merge(). To get around the gas limit,\n/// the mergeSubRoots() can be performed in multiple transactions.\n/// @dev This contract is for a quinary tree (5 leaves per node)\nabstract contract AccQueueQuinary is AccQueue {\n  /// @notice Create a new AccQueueQuinary instance\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// @dev it also frees up storage slots to refund gas.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return hashed The hash of the level and leaf.\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\n    uint256[5] memory inputs;\n    inputs[0] = leafQueue.levels[_level][0];\n    inputs[1] = leafQueue.levels[_level][1];\n    inputs[2] = leafQueue.levels[_level][2];\n    inputs[3] = leafQueue.levels[_level][3];\n    inputs[4] = _leaf;\n    hashed = hash5(inputs);\n\n    // Free up storage slots to refund gas. Note that using a loop here\n    // would result in lower gas savings.\n    delete leafQueue.levels[_level];\n  }\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return hashed The hash of the level and leaf.\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\n    uint256[5] memory inputs;\n    inputs[0] = leafQueue.levels[_level][0];\n    inputs[1] = leafQueue.levels[_level][1];\n    inputs[2] = leafQueue.levels[_level][2];\n    inputs[3] = leafQueue.levels[_level][3];\n    inputs[4] = _leaf;\n    hashed = hash5(inputs);\n  }\n\n  /// @notice An internal function which fills a subtree\n  /// @param _level The level at which to fill the subtree\n  function _fill(uint256 _level) internal override {\n    while (_level < subDepth) {\n      uint256 n = leafQueue.indices[_level];\n\n      if (n != 0) {\n        // Fill the subtree level with zeros and hash the level\n        uint256 hashed;\n\n        uint256[5] memory inputs;\n        uint256 z = getZero(_level);\n        uint8 i = 0;\n        for (; i < n; i++) {\n          inputs[i] = leafQueue.levels[_level][i];\n        }\n\n        for (; i < hashLength; i++) {\n          inputs[i] = z;\n        }\n        hashed = hash5(inputs);\n\n        // Update the subtree from the next level onwards with the new leaf\n        _enqueue(hashed, _level + 1);\n      }\n\n      // Reset the current level\n      delete leafQueue.indices[_level];\n\n      _level++;\n    }\n  }\n}\n"
    },
    "contracts/trees/AccQueueQuinaryBlankSl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { MerkleZeros as MerkleQuinaryBlankSl } from \"./zeros/MerkleQuinaryBlankSl.sol\";\nimport { AccQueueQuinary } from \"./AccQueueQuinary.sol\";\n\n/// @title AccQueueQuinaryBlankSl\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryBlankSl\n/// @dev This contract is used for creating a\n/// Merkle tree with quinary (5 leaves per node) structure\ncontract AccQueueQuinaryBlankSl is AccQueueQuinary, MerkleQuinaryBlankSl {\n  /// @notice Constructor for creating AccQueueQuinaryBlankSl contract\n  /// @param _subDepth The depth of each subtree\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\n\n  /// @notice Returns the zero leaf at a specified level\n  /// @param _level The level at which to return the zero leaf\n  /// @return zero The zero leaf at the specified level\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\n    zero = zeros[_level];\n  }\n}\n"
    },
    "contracts/trees/zeros/MerkleQuinaryBlankSl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nabstract contract MerkleZeros {\n  uint256[33] internal zeros;\n\n  // Quinary tree zeros (hash of a blank state leaf)\n  constructor() {\n    zeros[0] = uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\n    zeros[1] = uint256(1817443256073160983037956906834195537015546107754139333779374752610409243040);\n    zeros[2] = uint256(5025334324706345710800763986625066818722194863275454698142520938431664775139);\n    zeros[3] = uint256(14192954438167108345302805021925904074255585459982294518284934685870159779036);\n    zeros[4] = uint256(20187882570958996766847085412101405873580281668670041750401431925441526137696);\n    zeros[5] = uint256(19003337309269317766726592380821628773167513668895143249995308839385810331053);\n    zeros[6] = uint256(8492845964288036916491732908697290386617362835683911619537012952509890847451);\n    zeros[7] = uint256(21317322053785868903775560086424946986124609731059541056518805391492871868814);\n    zeros[8] = uint256(4256218134522031233385262696416028085306220785615095518146227774336224649500);\n    zeros[9] = uint256(20901832483812704342876390942522900825096860186886589193649848721504734341597);\n    zeros[10] = uint256(9267454486648593048583319961333207622177969074484816717792204743506543655505);\n    zeros[11] = uint256(7650747654726613674993974917452464536868175649563857452207429547024788245109);\n    zeros[12] = uint256(12795449162487060618571749226308575208199045387848354123797521555997299022426);\n    zeros[13] = uint256(2618557044910497521493457299926978327841926538380467450910611798747947773417);\n    zeros[14] = uint256(4921285654960018268026585535199462620025474147042548993648101553653712920841);\n    zeros[15] = uint256(3955171118947393404895230582611078362154691627898437205118006583966987624963);\n    zeros[16] = uint256(14699122743207261418107167543163571550551347592030521489185842204376855027947);\n    zeros[17] = uint256(19194001556311522650950142975587831061973644651464593103195262630226529549573);\n    zeros[18] = uint256(6797319293744791648201295415173228627305696583566554220235084234134847845566);\n    zeros[19] = uint256(1267384159070923114421683251804507954363252272096341442482679590950570779538);\n    zeros[20] = uint256(3856223245980092789300785214737986268213218594679123772901587106666007826613);\n    zeros[21] = uint256(18676489457897260843888223351978541467312325190019940958023830749320128516742);\n    zeros[22] = uint256(1264182110328471160091364892521750324454825019784514769029658712768604765832);\n    zeros[23] = uint256(2656996430278859489720531694992812241970377217691981498421470018287262214836);\n    zeros[24] = uint256(18383091906017498328025573868990834275527351249551450291689105976789994000945);\n    zeros[25] = uint256(13529005048172217954112431586843818755284974925259175262114689118374272942448);\n    zeros[26] = uint256(12992932230018177961399273443546858115054107741258772159002781102941121463198);\n    zeros[27] = uint256(2863122912185356538647249583178796893334871904920344676880115119793539219810);\n    zeros[28] = uint256(21225940722224750787686036600289689346822264717843340643526494987845938066724);\n    zeros[29] = uint256(10287710058152238258370855601473179390407624438853416678054122418589867334291);\n    zeros[30] = uint256(19473882726731003241332772446613588021823731071450664115530121948154136765165);\n    zeros[31] = uint256(5317840242664832852914696563734700089268851122527105938301831862363938018455);\n    zeros[32] = uint256(16560004488485252485490851383643926099553282582813695748927880827248594395952);\n  }\n}\n"
    },
    "contracts/utilities/DomainObjs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title DomainObjs\n/// @notice An utility contract that holds\n/// a number of domain objects and functions\ncontract DomainObjs {\n  /// @notice the length of a MACI message\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\n\n  /// @title Message\n  /// @notice this struct represents a MACI message\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\n  struct Message {\n    uint256 msgType;\n    uint256[MESSAGE_DATA_LENGTH] data;\n  }\n\n  /// @title PubKey\n  /// @notice A MACI public key\n  struct PubKey {\n    uint256 x;\n    uint256 y;\n  }\n\n  /// @title StateLeaf\n  /// @notice A MACI state leaf\n  /// @dev used to represent a user's state\n  /// in the state Merkle tree\n  struct StateLeaf {\n    PubKey pubKey;\n    uint256 voiceCreditBalance;\n    uint256 timestamp;\n  }\n}\n"
    },
    "contracts/utilities/Params.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { IMACI } from \"../interfaces/IMACI.sol\";\nimport { AccQueue } from \"../trees/AccQueue.sol\";\nimport { TopupCredit } from \"../TopupCredit.sol\";\n\n/// @title Params\n/// @notice This contracts contains a number of structures\n/// which are to be passed as parameters to Poll contracts.\n/// This way we can reduce the number of parameters\n/// and avoid a stack too deep error during compilation.\ncontract Params {\n  /// @notice A struct holding the depths of the merkle trees\n  struct TreeDepths {\n    uint8 intStateTreeDepth;\n    uint8 messageTreeSubDepth;\n    uint8 messageTreeDepth;\n    uint8 voteOptionTreeDepth;\n  }\n\n  /// @notice A struct holding the max values for the poll\n  struct MaxValues {\n    uint256 maxMessages;\n    uint256 maxVoteOptions;\n  }\n\n  /// @notice A struct holding the external contracts\n  /// that are to be passed to a Poll contract on\n  /// deployment\n  struct ExtContracts {\n    IMACI maci;\n    AccQueue messageAq;\n    TopupCredit topupCredit;\n  }\n}\n"
    },
    "contracts/utilities/Utilities.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\nimport { DomainObjs } from \"./DomainObjs.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\nimport { SnarkConstants } from \"../crypto/SnarkConstants.sol\";\n\n/// @title Utilities\n/// @notice An utility contract that can be used to:\n/// * hash a state leaf\n/// * pad and hash a MACI message\n/// * hash a MACI message and an encryption public key\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\n  /// @notice custom errors\n  error InvalidMessage();\n\n  /// @notice An utility function used to hash a state leaf\n  /// @param _stateLeaf the state leaf to be hashed\n  /// @return ciphertext The hash of the state leaf\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\n    uint256[4] memory plaintext;\n    plaintext[0] = _stateLeaf.pubKey.x;\n    plaintext[1] = _stateLeaf.pubKey.y;\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\n    plaintext[3] = _stateLeaf.timestamp;\n\n    ciphertext = hash4(plaintext);\n  }\n\n  /// @notice An utility function used to pad and hash a MACI message\n  /// @param dataToPad the data to be padded\n  /// @param msgType the type of the message\n  /// @return message The padded message\n  /// @return padKey The padding public key\n  /// @return msgHash The hash of the padded message and encryption key\n  function padAndHashMessage(\n    uint256[2] memory dataToPad,\n    uint256 msgType\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\n    // add data and pad it to 10 elements (automatically cause it's the default value)\n    uint256[10] memory dat;\n    dat[0] = dataToPad[0];\n    dat[1] = dataToPad[1];\n\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\n    message = Message({ msgType: msgType, data: dat });\n    msgHash = hashMessageAndEncPubKey(message, padKey);\n  }\n\n  /// @notice An utility function used to hash a MACI message and an encryption public key\n  /// @param _message the message to be hashed\n  /// @param _encPubKey the encryption public key to be hashed\n  /// @return msgHash The hash of the message and the encryption public key\n  function hashMessageAndEncPubKey(\n    Message memory _message,\n    PubKey memory _encPubKey\n  ) public pure returns (uint256 msgHash) {\n    if (_message.data.length != 10) {\n      revert InvalidMessage();\n    }\n\n    uint256[5] memory n;\n    n[0] = _message.data[0];\n    n[1] = _message.data[1];\n    n[2] = _message.data[2];\n    n[3] = _message.data[3];\n    n[4] = _message.data[4];\n\n    uint256[5] memory m;\n    m[0] = _message.data[5];\n    m[1] = _message.data[6];\n    m[2] = _message.data[7];\n    m[3] = _message.data[8];\n    m[4] = _message.data[9];\n\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\n  }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}