{
  "address": "0xa85EffB2658CFd81e0B1AaD4f2364CdBCd89F3a1",
  "abi": [
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "messageProcessorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e2c0fba456e931fc03da1a4f7b545e7ade4a3b5807e9490601756ab5f002b49",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa85EffB2658CFd81e0B1AaD4f2364CdBCd89F3a1",
    "transactionIndex": 3,
    "gasUsed": "1897573",
    "logsBloom": "0x
    "blockHash": "0xf36caaaa81af710cce7e6db7cf47fd463a82e7d433d1282345e037c9d7b1ca28",
    "transactionHash": "0x1e2c0fba456e931fc03da1a4f7b545e7ade4a3b5807e9490601756ab5f002b49",
    "logs": [],
    "blockNumber": 9409321,
    "cumulativeGasUsed": "2042375",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "29b47fc0ef6ba77ce0c1319ed31c0826",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"messageProcessorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,address,address)\":{\"params\":{\"_owner\":\"Owner of the MessageProcessor contract\",\"_poll\":\"Poll contract\",\"_verifier\":\"Verifier contract\",\"_vkRegistry\":\"VkRegistry contract\"},\"returns\":{\"messageProcessorAddr\":\"The deployed MessageProcessor contract\"}}},\"title\":\"MessageProcessorFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"deploy(address,address,address,address)\":{\"notice\":\"Deploy a new MessageProcessor contract and return the address.\"}},\"notice\":\"A factory contract which deploys MessageProcessor contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MessageProcessorFactory.sol\":\"MessageProcessorFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Hasher } from \\\"./crypto/Hasher.sol\\\";\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\nimport { IMessageProcessor } from \\\"./interfaces/IMessageProcessor.sol\\\";\\nimport { CommonUtilities } from \\\"./utilities/CommonUtilities.sol\\\";\\n\\n/// @title MessageProcessor\\n/// @dev MessageProcessor is used to process messages published by signup users.\\n/// It will process message by batch due to large size of messages.\\n/// After it finishes processing, the sbCommitment will be used for Tally and Subsidy contracts.\\ncontract MessageProcessor is Ownable, SnarkCommon, Hasher, CommonUtilities, IMessageProcessor {\\n  /// @notice custom errors\\n  error NoMoreMessages();\\n  error StateAqNotMerged();\\n  error MessageAqNotMerged();\\n  error InvalidProcessMessageProof();\\n  error VkNotSet();\\n  error MaxVoteOptionsTooLarge();\\n  error NumSignUpsTooLarge();\\n  error CurrentMessageBatchIndexTooLarge();\\n  error BatchEndIndexTooLarge();\\n\\n  // the number of children per node in the merkle trees\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  /// @inheritdoc IMessageProcessor\\n  bool public processingComplete;\\n\\n  /// @notice  The number of batches processed\\n  uint256 public numBatchesProcessed;\\n\\n  /// @notice  The current message batch index. When the coordinator runs\\n  /// processMessages(), this action relates to messages\\n  /// currentMessageBatchIndex to currentMessageBatchIndex + messageBatchSize.\\n  uint256 public currentMessageBatchIndex;\\n\\n  /// @inheritdoc IMessageProcessor\\n  uint256 public sbCommitment;\\n\\n  IPoll public immutable poll;\\n  IVerifier public immutable verifier;\\n  IVkRegistry public immutable vkRegistry;\\n\\n  /// @notice Create a new instance\\n  /// @param _verifier The Verifier contract address\\n  /// @param _vkRegistry The VkRegistry contract address\\n  /// @param _poll The Poll contract address\\n  constructor(address _verifier, address _vkRegistry, address _poll) payable {\\n    verifier = IVerifier(_verifier);\\n    vkRegistry = IVkRegistry(_vkRegistry);\\n    poll = IPoll(_poll);\\n  }\\n\\n  /// @notice Update the Poll's currentSbCommitment if the proof is valid.\\n  /// @param _newSbCommitment The new state root and ballot root commitment\\n  ///                         after all messages are processed\\n  /// @param _proof The zk-SNARK proof\\n  function processMessages(uint256 _newSbCommitment, uint256[8] memory _proof) external onlyOwner {\\n    // ensure the voting period is over\\n    _votingPeriodOver(poll);\\n\\n    // There must be unprocessed messages\\n    if (processingComplete) {\\n      revert NoMoreMessages();\\n    }\\n\\n    // The state AccQueue must be merged\\n    if (!poll.stateAqMerged()) {\\n      revert StateAqNotMerged();\\n    }\\n\\n    // Retrieve stored vals\\n    (, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth) = poll.treeDepths();\\n    // calculate the message batch size from the message tree subdepth\\n    uint256 messageBatchSize = TREE_ARITY ** messageTreeSubDepth;\\n\\n    (, AccQueue messageAq, ) = poll.extContracts();\\n\\n    // Require that the message queue has been merged\\n    uint256 messageRoot = messageAq.getMainRoot(messageTreeDepth);\\n    if (messageRoot == 0) {\\n      revert MessageAqNotMerged();\\n    }\\n\\n    // Copy the state and ballot commitment and set the batch index if this\\n    // is the first batch to process\\n    if (numBatchesProcessed == 0) {\\n      uint256 currentSbCommitment = poll.currentSbCommitment();\\n      sbCommitment = currentSbCommitment;\\n      (, uint256 numMessages) = poll.numSignUpsAndMessages();\\n      uint256 r = numMessages % messageBatchSize;\\n\\n      currentMessageBatchIndex = numMessages;\\n\\n      if (currentMessageBatchIndex > 0) {\\n        if (r == 0) {\\n          currentMessageBatchIndex -= messageBatchSize;\\n        } else {\\n          currentMessageBatchIndex -= r;\\n        }\\n      }\\n    }\\n\\n    if (\\n      !verifyProcessProof(\\n        currentMessageBatchIndex,\\n        messageRoot,\\n        sbCommitment,\\n        _newSbCommitment,\\n        messageTreeSubDepth,\\n        messageTreeDepth,\\n        voteOptionTreeDepth,\\n        _proof\\n      )\\n    ) {\\n      revert InvalidProcessMessageProof();\\n    }\\n\\n    {\\n      (, uint256 numMessages) = poll.numSignUpsAndMessages();\\n      // Decrease the message batch start index to ensure that each\\n      // message batch is processed in order\\n      if (currentMessageBatchIndex > 0) {\\n        currentMessageBatchIndex -= messageBatchSize;\\n      }\\n\\n      updateMessageProcessingData(\\n        _newSbCommitment,\\n        currentMessageBatchIndex,\\n        numMessages <= messageBatchSize * (numBatchesProcessed + 1)\\n      );\\n    }\\n  }\\n\\n  /// @notice Verify the proof for processMessage\\n  /// @dev used to update the sbCommitment\\n  /// @param _currentMessageBatchIndex The batch index of current message batch\\n  /// @param _messageRoot The message tree root\\n  /// @param _currentSbCommitment The current sbCommitment (state and ballot)\\n  /// @param _newSbCommitment The new sbCommitment after we update this message batch\\n  /// @param _messageTreeSubDepth The message tree subdepth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _proof The zk-SNARK proof\\n  /// @return isValid Whether the proof is valid\\n  function verifyProcessProof(\\n    uint256 _currentMessageBatchIndex,\\n    uint256 _messageRoot,\\n    uint256 _currentSbCommitment,\\n    uint256 _newSbCommitment,\\n    uint8 _messageTreeSubDepth,\\n    uint8 _messageTreeDepth,\\n    uint8 _voteOptionTreeDepth,\\n    uint256[8] memory _proof\\n  ) internal view returns (bool isValid) {\\n    // get the tree depths\\n    // get the message batch size from the message tree subdepth\\n    // get the number of signups\\n    (uint256 numSignUps, uint256 numMessages) = poll.numSignUpsAndMessages();\\n    (IMACI maci, , ) = poll.extContracts();\\n\\n    // Calculate the public input hash (a SHA256 hash of several values)\\n    uint256 publicInputHash = genProcessMessagesPublicInputHash(\\n      _currentMessageBatchIndex,\\n      _messageRoot,\\n      numSignUps,\\n      numMessages,\\n      _currentSbCommitment,\\n      _newSbCommitment,\\n      _messageTreeSubDepth,\\n      _voteOptionTreeDepth\\n    );\\n\\n    // Get the verifying key from the VkRegistry\\n    VerifyingKey memory vk = vkRegistry.getProcessVk(\\n      maci.stateTreeDepth(),\\n      _messageTreeDepth,\\n      _voteOptionTreeDepth,\\n      TREE_ARITY ** _messageTreeSubDepth\\n    );\\n\\n    isValid = verifier.verify(_proof, vk, publicInputHash);\\n  }\\n\\n  /// @notice Returns the SHA256 hash of the packed values (see\\n  /// genProcessMessagesPackedVals), the hash of the coordinator's public key,\\n  /// the message root, and the commitment to the current state root and\\n  /// ballot root. By passing the SHA256 hash of these values to the circuit\\n  /// as a single public input and the preimage as private inputs, we reduce\\n  /// its verification gas cost though the number of constraints will be\\n  /// higher and proving time will be longer.\\n  /// @param _currentMessageBatchIndex The batch index of current message batch\\n  /// @param _numSignUps The number of users that signup\\n  /// @param _numMessages The number of messages\\n  /// @param _currentSbCommitment The current sbCommitment (state and ballot root)\\n  /// @param _newSbCommitment The new sbCommitment after we update this message batch\\n  /// @param _messageTreeSubDepth The message tree subdepth\\n  /// @return inputHash Returns the SHA256 hash of the packed values\\n  function genProcessMessagesPublicInputHash(\\n    uint256 _currentMessageBatchIndex,\\n    uint256 _messageRoot,\\n    uint256 _numSignUps,\\n    uint256 _numMessages,\\n    uint256 _currentSbCommitment,\\n    uint256 _newSbCommitment,\\n    uint8 _messageTreeSubDepth,\\n    uint8 _voteOptionTreeDepth\\n  ) public view returns (uint256 inputHash) {\\n    uint256 coordinatorPubKeyHash = poll.coordinatorPubKeyHash();\\n\\n    // pack the values\\n    uint256 packedVals = genProcessMessagesPackedVals(\\n      _currentMessageBatchIndex,\\n      _numSignUps,\\n      _numMessages,\\n      _messageTreeSubDepth,\\n      _voteOptionTreeDepth\\n    );\\n\\n    (uint256 deployTime, uint256 duration) = poll.getDeployTimeAndDuration();\\n\\n    // generate the circuit only public input\\n    uint256[] memory input = new uint256[](6);\\n    input[0] = packedVals;\\n    input[1] = coordinatorPubKeyHash;\\n    input[2] = _messageRoot;\\n    input[3] = _currentSbCommitment;\\n    input[4] = _newSbCommitment;\\n    input[5] = deployTime + duration;\\n    inputHash = sha256Hash(input);\\n  }\\n\\n  /// @notice One of the inputs to the ProcessMessages circuit is a 250-bit\\n  /// representation of four 50-bit values. This function generates this\\n  /// 250-bit value, which consists of the maximum number of vote options, the\\n  /// number of signups, the current message batch index, and the end index of\\n  /// the current batch.\\n  /// @param _currentMessageBatchIndex batch index of current message batch\\n  /// @param _numSignUps number of users that signup\\n  /// @param _numMessages number of messages\\n  /// @param _messageTreeSubDepth message tree subdepth\\n  /// @param _voteOptionTreeDepth vote option tree depth\\n  /// @return result The packed value\\n  function genProcessMessagesPackedVals(\\n    uint256 _currentMessageBatchIndex,\\n    uint256 _numSignUps,\\n    uint256 _numMessages,\\n    uint8 _messageTreeSubDepth,\\n    uint8 _voteOptionTreeDepth\\n  ) public pure returns (uint256 result) {\\n    uint256 maxVoteOptions = TREE_ARITY ** _voteOptionTreeDepth;\\n\\n    // calculate the message batch size from the message tree subdepth\\n    uint256 messageBatchSize = TREE_ARITY ** _messageTreeSubDepth;\\n    uint256 batchEndIndex = _currentMessageBatchIndex + messageBatchSize;\\n    if (batchEndIndex > _numMessages) {\\n      batchEndIndex = _numMessages;\\n    }\\n\\n    if (maxVoteOptions >= 2 ** 50) revert MaxVoteOptionsTooLarge();\\n    if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\\n    if (_currentMessageBatchIndex >= 2 ** 50) revert CurrentMessageBatchIndexTooLarge();\\n    if (batchEndIndex >= 2 ** 50) revert BatchEndIndexTooLarge();\\n\\n    result = maxVoteOptions + (_numSignUps << 50) + (_currentMessageBatchIndex << 100) + (batchEndIndex << 150);\\n  }\\n\\n  /// @notice update message processing state variables\\n  /// @param _newSbCommitment sbCommitment to be updated\\n  /// @param _currentMessageBatchIndex currentMessageBatchIndex to be updated\\n  /// @param _processingComplete update flag that indicate processing is finished or not\\n  function updateMessageProcessingData(\\n    uint256 _newSbCommitment,\\n    uint256 _currentMessageBatchIndex,\\n    bool _processingComplete\\n  ) internal {\\n    sbCommitment = _newSbCommitment;\\n    processingComplete = _processingComplete;\\n    currentMessageBatchIndex = _currentMessageBatchIndex;\\n    numBatchesProcessed++;\\n  }\\n}\\n\",\"keccak256\":\"0x866333271b2d0b38df46c16605e0056d318e36d0f4c97e76801b010e904cf8b4\",\"license\":\"MIT\"},\"contracts/MessageProcessorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { MessageProcessor } from \\\"./MessageProcessor.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\n\\n/// @title MessageProcessorFactory\\n/// @notice A factory contract which deploys MessageProcessor contracts.\\ncontract MessageProcessorFactory is Params, DomainObjs, IMessageProcessorFactory {\\n  /// @inheritdoc IMessageProcessorFactory\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner\\n  ) public returns (address messageProcessorAddr) {\\n    // deploy MessageProcessor for this Poll\\n    MessageProcessor messageProcessor = new MessageProcessor(_verifier, _vkRegistry, _poll);\\n    messageProcessor.transferOwnership(_owner);\\n    messageProcessorAddr = address(messageProcessor);\\n  }\\n}\\n\",\"keccak256\":\"0xd6c3ff81cea70a60139436c91cea981e5ff5ff132c09db8535ab7d4a98fba6c1\",\"license\":\"MIT\"},\"contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(address _verifier, address _vkRegistry, address _poll, address _owner) external returns (address);\\n}\\n\",\"keccak256\":\"0x0a3b1fb6512a6948362d99e0c6389c1ad69974a14b037a7f54007397a2084d79\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessor\\n/// @notice MessageProcessor interface\\ninterface IMessageProcessor {\\n  /// @notice Get the result of whether there are unprocessed messages left\\n  /// @return Whether there are unprocessed messages left\\n  function processingComplete() external view returns (bool);\\n\\n  /// @notice Get the commitment to the state and ballot roots\\n  /// @return The commitment to the state and ballot roots\\n  function sbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x917bdb4c5eae4d20ccf6d0c9dc0c2cf1868a6951bc6fb74efbc91977309f505a\",\"license\":\"MIT\"},\"contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVerifier\\n/// @notice an interface for a Groth16 verifier contract\\ninterface IVerifier {\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    SnarkCommon.VerifyingKey memory vk,\\n    uint256 input\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf237bf3e3dbc948b577cb689eeecf3633c38205e6bd8e8ef0eb1356197e02247\",\"license\":\"MIT\"},\"contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the subsidy verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return The verifying key\\n  function getSubsidyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x0b6a2f530aca4db72c6551624123d6377c74ef1b4c0133939f88b8088e055518\",\"license\":\"MIT\"},\"contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"contracts/utilities/CommonUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IPoll } from \\\"../interfaces/IPoll.sol\\\";\\n\\n/// @title CommonUtilities\\n/// @notice A contract that holds common utilities\\n/// which are to be used by multiple contracts\\n/// namely Subsidy, Tally and MessageProcessor\\ncontract CommonUtilities {\\n  error VotingPeriodNotPassed();\\n\\n  /// @notice common function for MessageProcessor, Tally and Subsidy\\n  /// @param _poll the poll to be checked\\n  function _votingPeriodOver(IPoll _poll) internal view {\\n    (uint256 deployTime, uint256 duration) = _poll.getDeployTimeAndDuration();\\n    // Require that the voting period is over\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) {\\n      revert VotingPeriodNotPassed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xde731545f76b8f8f63b5a791860d381f74c30b1969769492c75c327c3159647b\",\"license\":\"MIT\"},\"contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"},\"contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x10c725c49e9193b7641574733666e231886e2ccc301c755e1dd9567aff7c5c9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061217a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063683f3dc31461003b578063fd82b73a1461005a575b600080fd5b610043600a81565b60405160ff90911681526020015b60405180910390f35b61006d610068366004610166565b610085565b6040516001600160a01b039091168152602001610051565b6000808585856040516100979061013d565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f0801580156100d3573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0385811660048301529192509082169063f2fde38b90602401600060405180830381600087803b15801561011b57600080fd5b505af115801561012f573d6000803e3d6000fd5b509298975050505050505050565b611f8a806101bb83390190565b80356001600160a01b038116811461016157600080fd5b919050565b6000806000806080858703121561017c57600080fd5b6101858561014a565b93506101936020860161014a565b92506101a16040860161014a565b91506101af6060860161014a565b90509295919450925056fe60e060405260405162001f8a38038062001f8a8339810160408190526200002691620000bc565b62000031336200004f565b6001600160a01b0392831660a05290821660c0521660805262000106565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000b757600080fd5b919050565b600080600060608486031215620000d257600080fd5b620000dd846200009f565b9250620000ed602085016200009f565b9150620000fd604085016200009f565b90509250925092565b60805160a05160c051611df96200019160003960008181610151015261102c015260008181610190015261115f015260008181610267015281816102e30152818161037b015281816106dc0152818161072d015281816107d10152818161086d0152818161098b01528181610a1801528181610b2a01528181610f090152610f900152611df96000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637a38d18f116100ad578063b1a263d311610071578063b1a263d314610289578063bea140b31461029c578063d13181b8146102af578063d1849f48146102b8578063f2fde38b146102cb57600080fd5b80637a38d18f146102115780638763d0c41461021a5780638da5cb5b1461023e5780639cfced971461024f578063a11752791461026257600080fd5b80633dfb88b2116100f45780633dfb88b2146101bb57806358bfc379146101ce5780635bb93995146101e157806362a361bb146101f4578063715018a61461020757600080fd5b80630cd3b91d1461012657806313fb89321461014c5780632b7ac3f31461018b5780633d6528a1146101b2575b600080fd5b61013961013436600461123f565b6102de565b6040519081526020015b60405180910390f35b6101737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610143565b6101737f000000000000000000000000000000000000000000000000000000000000000081565b61013960025481565b6101396101c9366004611345565b610507565b6101396101dc3660046113e7565b610588565b6101396101ef36600461147d565b610622565b61013961020236600461149f565b610647565b61020f610681565b005b61013960015481565b60005461022e90600160a01b900460ff1681565b6040519015158152602001610143565b6000546001600160a01b0316610173565b61013961025d3660046114ff565b610695565b6101737f000000000000000000000000000000000000000000000000000000000000000081565b61020f610297366004611558565b6106cf565b6101396102aa3660046115e4565b610c02565b61013960035481565b6101396102c636600461163d565b610c3c565b61020f6102d93660046116a8565b610d3d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638aa0ba926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036391906116cc565b905060006103748b8a8a8888610c3c565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634909229f6040518163ffffffff1660e01b81526004016040805180830381865afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa91906116e5565b60408051600680825260e08201909252929450909250600091906020820160c080368337019050509050838160008151811061043857610438611709565b602002602001018181525050848160018151811061045857610458611709565b6020026020010181815250508c8160028151811061047857610478611709565b602002602001018181525050898160038151811061049857610498611709565b60200260200101818152505088816004815181106104b8576104b8611709565b60209081029190910101526104cd8284611735565b816005815181106104e0576104e0611709565b6020026020010181815250506104f581610588565b9e9d5050505050505050505050505050565b60405163248f667760e01b81526000907377AD263Cd578045105FBFC88A477CAd808d39Cf69063248f66779061054190859060040161174d565b602060405180830381865af415801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906116cc565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016002836040516020016105be919061177e565b60408051601f19818403018152908290526105d8916117b4565b602060405180830381855afa1580156105f5573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061061891906116cc565b61058291906117ef565b600061062c611212565b8381526020810183905261063f81610647565b949350505050565b6040516314d2f97b60e11b815260009073ce830DA8667097BB491A70da268b76a081211814906329a5f2f690610541908590600401611811565b610689610dbb565b6106936000610e15565b565b604051630926f44b60e31b81526000907338628490c3043E5D0bbB26d5a0a62fC77342e9d590634937a25890610541908590600401611839565b6106d7610dbb565b6107007f0000000000000000000000000000000000000000000000000000000000000000610e65565b600054600160a01b900460ff161561072b5760405163a7f0397560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b5f38c816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad9190611861565b6107ca57604051631bb80bef60e31b815260040160405180910390fd5b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190611883565b93509350935050600083600561086791906119c6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14ee2b6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed91906119d5565b50604051631b9b8aa760e01b815260ff87166004820152909250600091506001600160a01b03831690631b9b8aa790602401602060405180830381865afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906116cc565b9050806109805760405163c0b868a560e01b815260040160405180910390fd5b600154610af25760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c17268d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b91906116cc565b90508060038190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9791906116e5565b915060009050610aa786836117ef565b600283905590508115610aee5780610ad6578560026000828254610acb9190611a22565b90915550610aee9050565b8060026000828254610ae89190611a22565b90915550505b5050505b610b06600254826003548b8a8a8a8e610f02565b610b265760405160016268f24f60e01b0319815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba991906116e5565b91505060006002541115610bcf578360026000828254610bc99190611a22565b90915550505b610bf7896002546001546001610be59190611735565b610bef9088611a39565b8411156111d9565b505050505050505050565b6040516304b98e1d60e31b815260009073D5bFeBDce5c91413E41cc7B24C8402c59A344f7c906325cc70e890610541908590600401611a58565b600080610c4a8360056119c6565b90506000610c598560056119c6565b90506000610c67828a611735565b905086811115610c745750855b600160321b8310610c985760405163df0dbdbd60e01b815260040160405180910390fd5b600160321b8810610cbc57604051631805864f60e21b815260040160405180910390fd5b600160321b8910610ce0576040516328b2660560e21b815260040160405180910390fd5b600160321b8110610d04576040516309c5b7c360e21b815260040160405180910390fd5b609681901b60648a901b610d1c60328b901b86611735565b610d269190611735565b610d309190611735565b9998505050505050505050565b610d45610dbb565b6001600160a01b038116610daf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610db881610e15565b50565b6000546001600160a01b031633146106935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610da6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0316634909229f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116e5565b90925090506000610eda8342611a22565b9050818111610efc57604051635c3017c560e11b815260040160405180910390fd5b50505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8891906116e5565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14ee2b6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610fec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101091906119d5565b5050905060006110268d8d86868f8f8f8e6102de565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630bfbd4fe846001600160a01b031663652c76e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb9190611a80565b8b8b6110c88f60056119c6565b6040516001600160e01b031960e087901b16815260ff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381865afa15801561111d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111459190810190611b52565b6040516308adcb2560e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322b72c9490611198908a9085908790600401611cb0565b602060405180830381865afa1580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190611861565b60038390556000805460ff60a01b1916600160a01b831515021781556002839055600180549161120883611da8565b9190505550505050565b60405180604001604052806002906020820280368337509192915050565b60ff81168114610db857600080fd5b600080600080600080600080610100898b03121561125c57600080fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135925060c089013561129181611230565b915060e08901356112a181611230565b809150509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112eb576112eb6112b2565b60405290565b60405160a0810167ffffffffffffffff811182821017156112eb576112eb6112b2565b604051601f8201601f1916810167ffffffffffffffff8111828210171561133d5761133d6112b2565b604052919050565b60006080828403121561135757600080fd5b82601f83011261136657600080fd5b6040516080810181811067ffffffffffffffff82111715611389576113896112b2565b60405280608084018581111561139e57600080fd5b845b818110156113b85780358352602092830192016113a0565b509195945050505050565b600067ffffffffffffffff8211156113dd576113dd6112b2565b5060051b60200190565b600060208083850312156113fa57600080fd5b823567ffffffffffffffff81111561141157600080fd5b8301601f8101851361142257600080fd5b8035611435611430826113c3565b611314565b81815260059190911b8201830190838101908783111561145457600080fd5b928401925b8284101561147257833582529284019290840190611459565b979650505050505050565b6000806040838503121561149057600080fd5b50508035926020909101359150565b6000604082840312156114b157600080fd5b82601f8301126114c057600080fd5b6114c86112c8565b8060408401858111156114da57600080fd5b845b818110156114f45780358452602093840193016114dc565b509095945050505050565b600060a0828403121561151157600080fd5b82601f83011261152057600080fd5b60405160a0810181811067ffffffffffffffff82111715611543576115436112b2565b6040528060a084018581111561139e57600080fd5b60008061012080848603121561156d57600080fd5b83359250602085603f86011261158257600080fd5b604051610100810181811067ffffffffffffffff821117156115a6576115a66112b2565b6040529185019180878411156115bb57600080fd5b8287015b848110156115d657803582529083019083016115bf565b509497909650945050505050565b6000606082840312156115f657600080fd5b82601f83011261160557600080fd5b6040516060810181811067ffffffffffffffff82111715611628576116286112b2565b60405280606084018581111561139e57600080fd5b600080600080600060a0868803121561165557600080fd5b853594506020860135935060408601359250606086013561167581611230565b9150608086013561168581611230565b809150509295509295909350565b6001600160a01b0381168114610db857600080fd5b6000602082840312156116ba57600080fd5b81356116c581611693565b9392505050565b6000602082840312156116de57600080fd5b5051919050565b600080604083850312156116f857600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156117485761174861171f565b500190565b60808101818360005b6004811015611775578151835260209283019290910190600101611756565b50505092915050565b815160009082906020808601845b838110156117a85781518552938201939082019060010161178c565b50929695505050505050565b6000825160005b818110156117d557602081860181015185830152016117bb565b818111156117e4576000828501525b509190910192915050565b60008261180c57634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b600281101561177557815183526020928301929091019060010161181a565b60a08101818360005b6005811015611775578151835260209283019290910190600101611842565b60006020828403121561187357600080fd5b815180151581146116c557600080fd5b6000806000806080858703121561189957600080fd5b84516118a481611230565b60208601519094506118b581611230565b60408601519093506118c681611230565b60608601519092506118d781611230565b939692955090935050565b600181815b8085111561191d5781600019048211156119035761190361171f565b8085161561191057918102915b93841c93908002906118e7565b509250929050565b60008261193457506001610582565b8161194157506000610582565b816001811461195757600281146119615761197d565b6001915050610582565b60ff8411156119725761197261171f565b50506001821b610582565b5060208310610133831016604e8410600b84101617156119a0575081810a610582565b6119aa83836118e2565b80600019048211156119be576119be61171f565b029392505050565b60006116c560ff841683611925565b6000806000606084860312156119ea57600080fd5b83516119f581611693565b6020850151909350611a0681611693565b6040850151909250611a1781611693565b809150509250925092565b600082821015611a3457611a3461171f565b500390565b6000816000190483118215151615611a5357611a5361171f565b500290565b60608101818360005b6003811015611775578151835260209283019290910190600101611a61565b600060208284031215611a9257600080fd5b81516116c581611230565b600060408284031215611aaf57600080fd5b611ab76112c8565b9050815181526020820151602082015292915050565b600082601f830112611ade57600080fd5b611ae66112c8565b806040840185811115611af857600080fd5b845b818110156114f4578051845260209384019301611afa565b600060808284031215611b2457600080fd5b611b2c6112c8565b9050611b388383611acd565b8152611b478360408401611acd565b602082015292915050565b60006020808385031215611b6557600080fd5b825167ffffffffffffffff80821115611b7d57600080fd5b908401906101e08287031215611b9257600080fd5b611b9a6112f1565b611ba48784611a9d565b81526040611bb488828601611b12565b85830152611bc58860c08601611b12565b81830152611bd7886101408601611b12565b60608301526101c084015183811115611bef57600080fd5b80850194505087601f850112611c0457600080fd5b83519250611c14611430846113c3565b83815260069390931b84018501928581019089851115611c3357600080fd5b948601945b84861015611c5957611c4a8a87611a9d565b82529482019490860190611c38565b60808401525090979650505050505050565b8060005b6002811015610efc578151845260209384019390910190600101611c6f565b611c99828251611c6b565b6020810151611cab6040840182611c6b565b505050565b60006101408286835b6008811015611cd8578151835260209283019290910190600101611cb9565b505050806101008401526103208301611cfe828501875180518252602090810151910152565b6020915081860151611d14610180860182611c8e565b50604080870151611d29610200870182611c8e565b506060870151611d3d610280870182611c8e565b5060808701516101e06103008701528051928390528301916000906103408701905b80831015611d9057611d7c82865180518252602090810151910152565b938501936001929092019190830190611d5f565b50809550505050505082610120830152949350505050565b6000600019821415611dbc57611dbc61171f565b506001019056fea2646970667358221220ce0bcd655b08e916a32b25e4dc2b1f624b1fc6409ad13d35e8acdbf0b49e3e8e64736f6c634300080a0033a2646970667358221220f36df2f8eeca79dbb150169d73c10c50fa7704768dd186831dbdfc62758d20b964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063683f3dc31461003b578063fd82b73a1461005a575b600080fd5b610043600a81565b60405160ff90911681526020015b60405180910390f35b61006d610068366004610166565b610085565b6040516001600160a01b039091168152602001610051565b6000808585856040516100979061013d565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f0801580156100d3573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0385811660048301529192509082169063f2fde38b90602401600060405180830381600087803b15801561011b57600080fd5b505af115801561012f573d6000803e3d6000fd5b509298975050505050505050565b611f8a806101bb83390190565b80356001600160a01b038116811461016157600080fd5b919050565b6000806000806080858703121561017c57600080fd5b6101858561014a565b93506101936020860161014a565b92506101a16040860161014a565b91506101af6060860161014a565b90509295919450925056fe60e060405260405162001f8a38038062001f8a8339810160408190526200002691620000bc565b62000031336200004f565b6001600160a01b0392831660a05290821660c0521660805262000106565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000b757600080fd5b919050565b600080600060608486031215620000d257600080fd5b620000dd846200009f565b9250620000ed602085016200009f565b9150620000fd604085016200009f565b90509250925092565b60805160a05160c051611df96200019160003960008181610151015261102c015260008181610190015261115f015260008181610267015281816102e30152818161037b015281816106dc0152818161072d015281816107d10152818161086d0152818161098b01528181610a1801528181610b2a01528181610f090152610f900152611df96000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637a38d18f116100ad578063b1a263d311610071578063b1a263d314610289578063bea140b31461029c578063d13181b8146102af578063d1849f48146102b8578063f2fde38b146102cb57600080fd5b80637a38d18f146102115780638763d0c41461021a5780638da5cb5b1461023e5780639cfced971461024f578063a11752791461026257600080fd5b80633dfb88b2116100f45780633dfb88b2146101bb57806358bfc379146101ce5780635bb93995146101e157806362a361bb146101f4578063715018a61461020757600080fd5b80630cd3b91d1461012657806313fb89321461014c5780632b7ac3f31461018b5780633d6528a1146101b2575b600080fd5b61013961013436600461123f565b6102de565b6040519081526020015b60405180910390f35b6101737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610143565b6101737f000000000000000000000000000000000000000000000000000000000000000081565b61013960025481565b6101396101c9366004611345565b610507565b6101396101dc3660046113e7565b610588565b6101396101ef36600461147d565b610622565b61013961020236600461149f565b610647565b61020f610681565b005b61013960015481565b60005461022e90600160a01b900460ff1681565b6040519015158152602001610143565b6000546001600160a01b0316610173565b61013961025d3660046114ff565b610695565b6101737f000000000000000000000000000000000000000000000000000000000000000081565b61020f610297366004611558565b6106cf565b6101396102aa3660046115e4565b610c02565b61013960035481565b6101396102c636600461163d565b610c3c565b61020f6102d93660046116a8565b610d3d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638aa0ba926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036391906116cc565b905060006103748b8a8a8888610c3c565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634909229f6040518163ffffffff1660e01b81526004016040805180830381865afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa91906116e5565b60408051600680825260e08201909252929450909250600091906020820160c080368337019050509050838160008151811061043857610438611709565b602002602001018181525050848160018151811061045857610458611709565b6020026020010181815250508c8160028151811061047857610478611709565b602002602001018181525050898160038151811061049857610498611709565b60200260200101818152505088816004815181106104b8576104b8611709565b60209081029190910101526104cd8284611735565b816005815181106104e0576104e0611709565b6020026020010181815250506104f581610588565b9e9d5050505050505050505050505050565b60405163248f667760e01b815260009073__$ce9c2c925f157047e54fa833ec4e61409f$__9063248f66779061054190859060040161174d565b602060405180830381865af415801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906116cc565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016002836040516020016105be919061177e565b60408051601f19818403018152908290526105d8916117b4565b602060405180830381855afa1580156105f5573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061061891906116cc565b61058291906117ef565b600061062c611212565b8381526020810183905261063f81610647565b949350505050565b6040516314d2f97b60e11b815260009073__$6574937f64fc1d7710ec0e28b7a36713bb$__906329a5f2f690610541908590600401611811565b610689610dbb565b6106936000610e15565b565b604051630926f44b60e31b815260009073__$20527677031d76601747626a9845039fe4$__90634937a25890610541908590600401611839565b6106d7610dbb565b6107007f0000000000000000000000000000000000000000000000000000000000000000610e65565b600054600160a01b900460ff161561072b5760405163a7f0397560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b5f38c816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad9190611861565b6107ca57604051631bb80bef60e31b815260040160405180910390fd5b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190611883565b93509350935050600083600561086791906119c6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14ee2b6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed91906119d5565b50604051631b9b8aa760e01b815260ff87166004820152909250600091506001600160a01b03831690631b9b8aa790602401602060405180830381865afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906116cc565b9050806109805760405163c0b868a560e01b815260040160405180910390fd5b600154610af25760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c17268d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b91906116cc565b90508060038190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9791906116e5565b915060009050610aa786836117ef565b600283905590508115610aee5780610ad6578560026000828254610acb9190611a22565b90915550610aee9050565b8060026000828254610ae89190611a22565b90915550505b5050505b610b06600254826003548b8a8a8a8e610f02565b610b265760405160016268f24f60e01b0319815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba991906116e5565b91505060006002541115610bcf578360026000828254610bc99190611a22565b90915550505b610bf7896002546001546001610be59190611735565b610bef9088611a39565b8411156111d9565b505050505050505050565b6040516304b98e1d60e31b815260009073__$dc01a9744591ab014bc46a3b7671cdaefb$__906325cc70e890610541908590600401611a58565b600080610c4a8360056119c6565b90506000610c598560056119c6565b90506000610c67828a611735565b905086811115610c745750855b600160321b8310610c985760405163df0dbdbd60e01b815260040160405180910390fd5b600160321b8810610cbc57604051631805864f60e21b815260040160405180910390fd5b600160321b8910610ce0576040516328b2660560e21b815260040160405180910390fd5b600160321b8110610d04576040516309c5b7c360e21b815260040160405180910390fd5b609681901b60648a901b610d1c60328b901b86611735565b610d269190611735565b610d309190611735565b9998505050505050505050565b610d45610dbb565b6001600160a01b038116610daf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610db881610e15565b50565b6000546001600160a01b031633146106935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610da6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0316634909229f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116e5565b90925090506000610eda8342611a22565b9050818111610efc57604051635c3017c560e11b815260040160405180910390fd5b50505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8891906116e5565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14ee2b6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610fec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101091906119d5565b5050905060006110268d8d86868f8f8f8e6102de565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630bfbd4fe846001600160a01b031663652c76e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb9190611a80565b8b8b6110c88f60056119c6565b6040516001600160e01b031960e087901b16815260ff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381865afa15801561111d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111459190810190611b52565b6040516308adcb2560e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322b72c9490611198908a9085908790600401611cb0565b602060405180830381865afa1580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190611861565b60038390556000805460ff60a01b1916600160a01b831515021781556002839055600180549161120883611da8565b9190505550505050565b60405180604001604052806002906020820280368337509192915050565b60ff81168114610db857600080fd5b600080600080600080600080610100898b03121561125c57600080fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135925060c089013561129181611230565b915060e08901356112a181611230565b809150509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112eb576112eb6112b2565b60405290565b60405160a0810167ffffffffffffffff811182821017156112eb576112eb6112b2565b604051601f8201601f1916810167ffffffffffffffff8111828210171561133d5761133d6112b2565b604052919050565b60006080828403121561135757600080fd5b82601f83011261136657600080fd5b6040516080810181811067ffffffffffffffff82111715611389576113896112b2565b60405280608084018581111561139e57600080fd5b845b818110156113b85780358352602092830192016113a0565b509195945050505050565b600067ffffffffffffffff8211156113dd576113dd6112b2565b5060051b60200190565b600060208083850312156113fa57600080fd5b823567ffffffffffffffff81111561141157600080fd5b8301601f8101851361142257600080fd5b8035611435611430826113c3565b611314565b81815260059190911b8201830190838101908783111561145457600080fd5b928401925b8284101561147257833582529284019290840190611459565b979650505050505050565b6000806040838503121561149057600080fd5b50508035926020909101359150565b6000604082840312156114b157600080fd5b82601f8301126114c057600080fd5b6114c86112c8565b8060408401858111156114da57600080fd5b845b818110156114f45780358452602093840193016114dc565b509095945050505050565b600060a0828403121561151157600080fd5b82601f83011261152057600080fd5b60405160a0810181811067ffffffffffffffff82111715611543576115436112b2565b6040528060a084018581111561139e57600080fd5b60008061012080848603121561156d57600080fd5b83359250602085603f86011261158257600080fd5b604051610100810181811067ffffffffffffffff821117156115a6576115a66112b2565b6040529185019180878411156115bb57600080fd5b8287015b848110156115d657803582529083019083016115bf565b509497909650945050505050565b6000606082840312156115f657600080fd5b82601f83011261160557600080fd5b6040516060810181811067ffffffffffffffff82111715611628576116286112b2565b60405280606084018581111561139e57600080fd5b600080600080600060a0868803121561165557600080fd5b853594506020860135935060408601359250606086013561167581611230565b9150608086013561168581611230565b809150509295509295909350565b6001600160a01b0381168114610db857600080fd5b6000602082840312156116ba57600080fd5b81356116c581611693565b9392505050565b6000602082840312156116de57600080fd5b5051919050565b600080604083850312156116f857600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156117485761174861171f565b500190565b60808101818360005b6004811015611775578151835260209283019290910190600101611756565b50505092915050565b815160009082906020808601845b838110156117a85781518552938201939082019060010161178c565b50929695505050505050565b6000825160005b818110156117d557602081860181015185830152016117bb565b818111156117e4576000828501525b509190910192915050565b60008261180c57634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b600281101561177557815183526020928301929091019060010161181a565b60a08101818360005b6005811015611775578151835260209283019290910190600101611842565b60006020828403121561187357600080fd5b815180151581146116c557600080fd5b6000806000806080858703121561189957600080fd5b84516118a481611230565b60208601519094506118b581611230565b60408601519093506118c681611230565b60608601519092506118d781611230565b939692955090935050565b600181815b8085111561191d5781600019048211156119035761190361171f565b8085161561191057918102915b93841c93908002906118e7565b509250929050565b60008261193457506001610582565b8161194157506000610582565b816001811461195757600281146119615761197d565b6001915050610582565b60ff8411156119725761197261171f565b50506001821b610582565b5060208310610133831016604e8410600b84101617156119a0575081810a610582565b6119aa83836118e2565b80600019048211156119be576119be61171f565b029392505050565b60006116c560ff841683611925565b6000806000606084860312156119ea57600080fd5b83516119f581611693565b6020850151909350611a0681611693565b6040850151909250611a1781611693565b809150509250925092565b600082821015611a3457611a3461171f565b500390565b6000816000190483118215151615611a5357611a5361171f565b500290565b60608101818360005b6003811015611775578151835260209283019290910190600101611a61565b600060208284031215611a9257600080fd5b81516116c581611230565b600060408284031215611aaf57600080fd5b611ab76112c8565b9050815181526020820151602082015292915050565b600082601f830112611ade57600080fd5b611ae66112c8565b806040840185811115611af857600080fd5b845b818110156114f4578051845260209384019301611afa565b600060808284031215611b2457600080fd5b611b2c6112c8565b9050611b388383611acd565b8152611b478360408401611acd565b602082015292915050565b60006020808385031215611b6557600080fd5b825167ffffffffffffffff80821115611b7d57600080fd5b908401906101e08287031215611b9257600080fd5b611b9a6112f1565b611ba48784611a9d565b81526040611bb488828601611b12565b85830152611bc58860c08601611b12565b81830152611bd7886101408601611b12565b60608301526101c084015183811115611bef57600080fd5b80850194505087601f850112611c0457600080fd5b83519250611c14611430846113c3565b83815260069390931b84018501928581019089851115611c3357600080fd5b948601945b84861015611c5957611c4a8a87611a9d565b82529482019490860190611c38565b60808401525090979650505050505050565b8060005b6002811015610efc578151845260209384019390910190600101611c6f565b611c99828251611c6b565b6020810151611cab6040840182611c6b565b505050565b60006101408286835b6008811015611cd8578151835260209283019290910190600101611cb9565b505050806101008401526103208301611cfe828501875180518252602090810151910152565b6020915081860151611d14610180860182611c8e565b50604080870151611d29610200870182611c8e565b506060870151611d3d610280870182611c8e565b5060808701516101e06103008701528051928390528301916000906103408701905b80831015611d9057611d7c82865180518252602090810151910152565b938501936001929092019190830190611d5f565b50809550505050505082610120830152949350505050565b6000600019821415611dbc57611dbc61171f565b506001019056fea2646970667358221220ce0bcd655b08e916a32b25e4dc2b1f624b1fc6409ad13d35e8acdbf0b49e3e8e64736f6c634300080a0033a2646970667358221220f36df2f8eeca79dbb150169d73c10c50fa7704768dd186831dbdfc62758d20b964736f6c634300080a0033",
  "libraries": {
    "PoseidonT3": "0xce830DA8667097BB491A70da268b76a081211814",
    "PoseidonT4": "0xD5bFeBDce5c91413E41cc7B24C8402c59A344f7c",
    "PoseidonT5": "0x77AD263Cd578045105FBFC88A477CAd808d39Cf6",
    "PoseidonT6": "0x38628490c3043E5D0bbB26d5a0a62fC77342e9d5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address,address,address,address)": {
        "params": {
          "_owner": "Owner of the MessageProcessor contract",
          "_poll": "Poll contract",
          "_verifier": "Verifier contract",
          "_vkRegistry": "VkRegistry contract"
        },
        "returns": {
          "messageProcessorAddr": "The deployed MessageProcessor contract"
        }
      }
    },
    "title": "MessageProcessorFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "deploy(address,address,address,address)": {
        "notice": "Deploy a new MessageProcessor contract and return the address."
      }
    },
    "notice": "A factory contract which deploys MessageProcessor contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}