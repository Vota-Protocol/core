{
  "address": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProcessVkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProcessVkNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubsidyVkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubsidyVkNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TallyVkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TallyVkNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "ProcessVkSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "SubsidyVkSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "TallyVkSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        }
      ],
      "name": "genProcessVkSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sig",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "genSubsidyVkSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sig",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "genTallyVkSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sig",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        }
      ],
      "name": "getProcessVk",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "getProcessVkBySig",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "getSubsidyVk",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "getSubsidyVkBySig",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "getTallyVk",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "getTallyVkBySig",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        }
      ],
      "name": "hasProcessVk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "hasSubsidyVk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "hasTallyVk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "isProcessVkSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "isSubsidyVkSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        }
      ],
      "name": "isTallyVkSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "_subsidyVk",
          "type": "tuple"
        }
      ],
      "name": "setSubsidyKeys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "_processVk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "_tallyVk",
          "type": "tuple"
        }
      ],
      "name": "setVerifyingKeys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30b18a6fec47a327ecd850eedcea4e8c742c12799c645000895f076c1db593f6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
    "transactionIndex": 1,
    "gasUsed": "1258649",
    "logsBloom": "0x
    "blockHash": "0xe206a6477afddd004c3688cc2fc4fb10b405335c11a85417453c41bcee7216fd",
    "transactionHash": "0x30b18a6fec47a327ecd850eedcea4e8c742c12799c645000895f076c1db593f6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9401247,
        "transactionHash": "0x30b18a6fec47a327ecd850eedcea4e8c742c12799c645000895f076c1db593f6",
        "address": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe206a6477afddd004c3688cc2fc4fb10b405335c11a85417453c41bcee7216fd"
      }
    ],
    "blockNumber": 9401247,
    "cumulativeGasUsed": "1302536",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "29b47fc0ef6ba77ce0c1319ed31c0826",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProcessVkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProcessVkNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubsidyVkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubsidyVkNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TallyVkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TallyVkNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"ProcessVkSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"SubsidyVkSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"TallyVkSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"}],\"name\":\"genProcessVkSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"genSubsidyVkSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"genTallyVkSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"}],\"name\":\"getProcessVk\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"getProcessVkBySig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"getSubsidyVk\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"getSubsidyVkBySig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"getTallyVk\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"getTallyVkBySig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"}],\"name\":\"hasProcessVk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"hasSubsidyVk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"hasTallyVk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"isProcessVkSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"isSubsidyVkSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"}],\"name\":\"isTallyVkSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"_subsidyVk\",\"type\":\"tuple\"}],\"name\":\"setSubsidyKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"_processVk\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"_tallyVk\",\"type\":\"tuple\"}],\"name\":\"setVerifyingKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"genProcessVkSig(uint256,uint256,uint256,uint256)\":{\"params\":{\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"}},\"genSubsidyVkSig(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"sig\":\"The signature\"}},\"genTallyVkSig(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"sig\":\"The signature\"}},\"getProcessVk(uint256,uint256,uint256,uint256)\":{\"params\":{\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getProcessVkBySig(uint256)\":{\"params\":{\"_sig\":\"The signature\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getSubsidyVk(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getSubsidyVkBySig(uint256)\":{\"params\":{\"_sig\":\"The signature\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getTallyVk(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getTallyVkBySig(uint256)\":{\"params\":{\"_sig\":\"The signature\"},\"returns\":{\"vk\":\"The verifying key\"}},\"hasProcessVk(uint256,uint256,uint256,uint256)\":{\"params\":{\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"hasSubsidyVk(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"hasTallyVk(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"isProcessVkSet(uint256)\":{\"params\":{\"_sig\":\"The signature\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"isSubsidyVkSet(uint256)\":{\"params\":{\"_sig\":\"The signature\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"isTallyVkSet(uint256)\":{\"params\":{\"_sig\":\"The signature\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSubsidyKeys(uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_subsidyVk\":\"The verifying key\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"}},\"setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_processVk\":\"The process verifying key\",\"_stateTreeDepth\":\"The state tree depth\",\"_tallyVk\":\"The tally verifying key\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VkRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new instance of the VkRegistry contract\"},\"genProcessVkSig(uint256,uint256,uint256,uint256)\":{\"notice\":\"generate the signature for the process verifying key\"},\"genSubsidyVkSig(uint256,uint256,uint256)\":{\"notice\":\"generate the signature for the subsidy verifying key\"},\"genTallyVkSig(uint256,uint256,uint256)\":{\"notice\":\"generate the signature for the tally verifying key\"},\"getProcessVk(uint256,uint256,uint256,uint256)\":{\"notice\":\"Get the process verifying key\"},\"getProcessVkBySig(uint256)\":{\"notice\":\"Get the process verifying key by signature\"},\"getSubsidyVk(uint256,uint256,uint256)\":{\"notice\":\"Get the subsidy verifying key\"},\"getSubsidyVkBySig(uint256)\":{\"notice\":\"Get the subsidy verifying key by signature\"},\"getTallyVk(uint256,uint256,uint256)\":{\"notice\":\"Get the tally verifying key\"},\"getTallyVkBySig(uint256)\":{\"notice\":\"Get the tally verifying key by signature\"},\"hasProcessVk(uint256,uint256,uint256,uint256)\":{\"notice\":\"Check if the process verifying key is set\"},\"hasSubsidyVk(uint256,uint256,uint256)\":{\"notice\":\"Check if the subsidy verifying key is set\"},\"hasTallyVk(uint256,uint256,uint256)\":{\"notice\":\"Check if the tally verifying key is set\"},\"isProcessVkSet(uint256)\":{\"notice\":\"Check if the process verifying key is set\"},\"isSubsidyVkSet(uint256)\":{\"notice\":\"Check if the subsidy verifying key is set\"},\"isTallyVkSet(uint256)\":{\"notice\":\"Check if the tally verifying key is set\"},\"setSubsidyKeys(uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))\":{\"notice\":\"Set the process verifying key for a certain combination of parameters\"},\"setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))\":{\"notice\":\"Set the process and tally verifying keys for a certain combination of parameters\"}},\"notice\":\"Stores verifying keys for the circuits. Each circuit has a signature which is its compile-time constants represented as a uint256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VkRegistry.sol\":\"VkRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\n\\n/// @title VkRegistry\\n/// @notice Stores verifying keys for the circuits.\\n/// Each circuit has a signature which is its compile-time constants represented\\n/// as a uint256.\\ncontract VkRegistry is Ownable, SnarkCommon, IVkRegistry {\\n  mapping(uint256 => VerifyingKey) internal processVks;\\n  mapping(uint256 => bool) internal processVkSet;\\n\\n  mapping(uint256 => VerifyingKey) internal tallyVks;\\n  mapping(uint256 => bool) internal tallyVkSet;\\n\\n  mapping(uint256 => VerifyingKey) internal subsidyVks;\\n  mapping(uint256 => bool) internal subsidyVkSet;\\n\\n  event ProcessVkSet(uint256 _sig);\\n  event TallyVkSet(uint256 _sig);\\n  event SubsidyVkSet(uint256 _sig);\\n\\n  error ProcessVkAlreadySet();\\n  error TallyVkAlreadySet();\\n  error SubsidyVkAlreadySet();\\n  error ProcessVkNotSet();\\n  error TallyVkNotSet();\\n  error SubsidyVkNotSet();\\n\\n  /// @notice Create a new instance of the VkRegistry contract\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() payable {}\\n\\n  /// @notice Check if the process verifying key is set\\n  /// @param _sig The signature\\n  /// @return isSet whether the verifying key is set\\n  function isProcessVkSet(uint256 _sig) public view returns (bool isSet) {\\n    isSet = processVkSet[_sig];\\n  }\\n\\n  /// @notice Check if the tally verifying key is set\\n  /// @param _sig The signature\\n  /// @return isSet whether the verifying key is set\\n  function isTallyVkSet(uint256 _sig) public view returns (bool isSet) {\\n    isSet = tallyVkSet[_sig];\\n  }\\n\\n  /// @notice Check if the subsidy verifying key is set\\n  /// @param _sig The signature\\n  /// @return isSet whether the verifying key is set\\n  function isSubsidyVkSet(uint256 _sig) public view returns (bool isSet) {\\n    isSet = subsidyVkSet[_sig];\\n  }\\n\\n  /// @notice generate the signature for the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  function genProcessVkSig(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) public pure returns (uint256 sig) {\\n    sig = (_messageBatchSize << 192) + (_stateTreeDepth << 128) + (_messageTreeDepth << 64) + _voteOptionTreeDepth;\\n  }\\n\\n  /// @notice generate the signature for the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return sig The signature\\n  function genTallyVkSig(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public pure returns (uint256 sig) {\\n    sig = (_stateTreeDepth << 128) + (_intStateTreeDepth << 64) + _voteOptionTreeDepth;\\n  }\\n\\n  /// @notice generate the signature for the subsidy verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return sig The signature\\n  function genSubsidyVkSig(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public pure returns (uint256 sig) {\\n    sig = (_stateTreeDepth << 128) + (_intStateTreeDepth << 64) + _voteOptionTreeDepth;\\n  }\\n\\n  /// @notice Set the process and tally verifying keys for a certain combination\\n  /// of parameters\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _processVk The process verifying key\\n  /// @param _tallyVk The tally verifying key\\n  function setVerifyingKeys(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    VerifyingKey calldata _processVk,\\n    VerifyingKey calldata _tallyVk\\n  ) public onlyOwner {\\n    uint256 processVkSig = genProcessVkSig(_stateTreeDepth, _messageTreeDepth, _voteOptionTreeDepth, _messageBatchSize);\\n\\n    if (processVkSet[processVkSig]) revert ProcessVkAlreadySet();\\n\\n    uint256 tallyVkSig = genTallyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    if (tallyVkSet[tallyVkSig]) revert TallyVkAlreadySet();\\n\\n    VerifyingKey storage processVk = processVks[processVkSig];\\n    processVk.alpha1 = _processVk.alpha1;\\n    processVk.beta2 = _processVk.beta2;\\n    processVk.gamma2 = _processVk.gamma2;\\n    processVk.delta2 = _processVk.delta2;\\n    for (uint8 i = 0; i < _processVk.ic.length; i++) {\\n      processVk.ic.push(_processVk.ic[i]);\\n    }\\n\\n    processVkSet[processVkSig] = true;\\n\\n    VerifyingKey storage tallyVk = tallyVks[tallyVkSig];\\n    tallyVk.alpha1 = _tallyVk.alpha1;\\n    tallyVk.beta2 = _tallyVk.beta2;\\n    tallyVk.gamma2 = _tallyVk.gamma2;\\n    tallyVk.delta2 = _tallyVk.delta2;\\n    for (uint8 i = 0; i < _tallyVk.ic.length; i++) {\\n      tallyVk.ic.push(_tallyVk.ic[i]);\\n    }\\n    tallyVkSet[tallyVkSig] = true;\\n\\n    emit TallyVkSet(tallyVkSig);\\n    emit ProcessVkSet(processVkSig);\\n  }\\n\\n  /// @notice Set the process verifying key for a certain combination\\n  /// of parameters\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _subsidyVk The verifying key\\n  function setSubsidyKeys(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    VerifyingKey calldata _subsidyVk\\n  ) public onlyOwner {\\n    uint256 subsidyVkSig = genSubsidyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    if (subsidyVkSet[subsidyVkSig]) revert SubsidyVkAlreadySet();\\n\\n    VerifyingKey storage subsidyVk = subsidyVks[subsidyVkSig];\\n    subsidyVk.alpha1 = _subsidyVk.alpha1;\\n    subsidyVk.beta2 = _subsidyVk.beta2;\\n    subsidyVk.gamma2 = _subsidyVk.gamma2;\\n    subsidyVk.delta2 = _subsidyVk.delta2;\\n    for (uint8 i = 0; i < _subsidyVk.ic.length; i++) {\\n      subsidyVk.ic.push(_subsidyVk.ic[i]);\\n    }\\n    subsidyVkSet[subsidyVkSig] = true;\\n\\n    emit SubsidyVkSet(subsidyVkSig);\\n  }\\n\\n  /// @notice Check if the process verifying key is set\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @return isSet whether the verifying key is set\\n  function hasProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) public view returns (bool isSet) {\\n    uint256 sig = genProcessVkSig(_stateTreeDepth, _messageTreeDepth, _voteOptionTreeDepth, _messageBatchSize);\\n    isSet = processVkSet[sig];\\n  }\\n\\n  /// @notice Get the process verifying key by signature\\n  /// @param _sig The signature\\n  /// @return vk The verifying key\\n  function getProcessVkBySig(uint256 _sig) public view returns (VerifyingKey memory vk) {\\n    if (!processVkSet[_sig]) revert ProcessVkNotSet();\\n\\n    vk = processVks[_sig];\\n  }\\n\\n  /// @inheritdoc IVkRegistry\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) public view returns (VerifyingKey memory vk) {\\n    uint256 sig = genProcessVkSig(_stateTreeDepth, _messageTreeDepth, _voteOptionTreeDepth, _messageBatchSize);\\n\\n    vk = getProcessVkBySig(sig);\\n  }\\n\\n  /// @notice Check if the tally verifying key is set\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return isSet whether the verifying key is set\\n  function hasTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public view returns (bool isSet) {\\n    uint256 sig = genTallyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    isSet = tallyVkSet[sig];\\n  }\\n\\n  /// @notice Get the tally verifying key by signature\\n  /// @param _sig The signature\\n  /// @return vk The verifying key\\n  function getTallyVkBySig(uint256 _sig) public view returns (VerifyingKey memory vk) {\\n    if (!tallyVkSet[_sig]) revert TallyVkNotSet();\\n\\n    vk = tallyVks[_sig];\\n  }\\n\\n  /// @inheritdoc IVkRegistry\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public view returns (VerifyingKey memory vk) {\\n    uint256 sig = genTallyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    vk = getTallyVkBySig(sig);\\n  }\\n\\n  /// @notice Check if the subsidy verifying key is set\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return isSet whether the verifying key is set\\n  function hasSubsidyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public view returns (bool isSet) {\\n    uint256 sig = genSubsidyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    isSet = subsidyVkSet[sig];\\n  }\\n\\n  /// @notice Get the subsidy verifying key by signature\\n  /// @param _sig The signature\\n  /// @return vk The verifying key\\n  function getSubsidyVkBySig(uint256 _sig) public view returns (VerifyingKey memory vk) {\\n    if (!subsidyVkSet[_sig]) revert SubsidyVkNotSet();\\n\\n    vk = subsidyVks[_sig];\\n  }\\n\\n  /// @inheritdoc IVkRegistry\\n  function getSubsidyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public view returns (VerifyingKey memory vk) {\\n    uint256 sig = genSubsidyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    vk = getSubsidyVkBySig(sig);\\n  }\\n}\\n\",\"keccak256\":\"0xaee7a8dcf83cde8997893f86905ed50a12ca83be5ca0858baaca7954845aceca\",\"license\":\"MIT\"},\"contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the subsidy verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return The verifying key\\n  function getSubsidyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x0b6a2f530aca4db72c6551624123d6377c74ef1b4c0133939f88b8088e055518\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063ba2ff7ab11610071578063ba2ff7ab1461029e578063c7c8beec146102b1578063db9f755b146102c4578063f1a510b0146102d7578063f2fde38b146102ea57600080fd5b80638da5cb5b14610227578063935a2bc514610242578063a761918614610265578063abc61c6b14610278578063b2e395301461028b57600080fd5b806326960517116100f457806326960517146101d157806341951d4f146101e45780634f1b0e5f146101f9578063715018a61461020c5780638bc1a5991461021457600080fd5b80630bfbd4fe14610131578063141a87641461015a57806317b7f8101461017b5780631afe11ef1461015a578063257752d3146101ae575b600080fd5b61014461013f366004611167565b6102fd565b60405161015191906111e4565b60405180910390f35b61016d610168366004611297565b610328565b604051908152602001610151565b61019e6101893660046112c3565b60009081526004602052604090205460ff1690565b6040519015158152602001610151565b61019e6101bc3660046112c3565b60009081526002602052604090205460ff1690565b61019e6101df366004611297565b61034f565b6101f76101f23660046112f5565b610378565b005b61019e610207366004611167565b61050a565b6101f7610535565b6101446102223660046112c3565b610549565b6000546040516001600160a01b039091168152602001610151565b61019e6102503660046112c3565b60009081526006602052604090205460ff1690565b61019e610273366004611297565b610795565b6101f761028636600461134f565b6107be565b61016d610299366004611167565b610ada565b6101446102ac3660046112c3565b610b11565b6101446102bf366004611297565b610d41565b6101446102d23660046112c3565b610d5d565b6101446102e5366004611297565b610f8b565b6101f76102f83660046113e3565b610fab565b6103056110d3565b600061031386868686610ada565b905061031e81610b11565b9695505050505050565b60008161033d604085901b608087901b611429565b6103479190611429565b949350505050565b60008061035d858585610328565b60009081526004602052604090205460ff1695945050505050565b610380611029565b600061038d858585610328565b60008181526006602052604090205490915060ff16156103c05760405163bc6e49a760e01b815260040160405180910390fd5b60008181526005602090815260409091208335815590830135600182015560408301600282016103f08282611441565b505060c08301600682016104048282611441565b50506101408301600a82016104198282611441565b90505060005b61042d6101c085018561149a565b90508160ff1610156104ae57600e820161044b6101c086018661149a565b8360ff1681811061045e5761045e6114eb565b835460018101855560009485526020909420604090910292909201926002029091019050610499828281358155602082013560018201555050565b505080806104a690611501565b91505061041f565b5060008281526006602052604090819020805460ff19166001179055517f85392fd56cfeb44bd3078be9ad4b18cbcc4ad1256a9fe8922ef360ef1ed26927906104fa9084815260200190565b60405180910390a1505050505050565b60008061051986868686610ada565b60009081526002602052604090205460ff169695505050505050565b61053d611029565b6105476000611083565b565b6105516110d3565b60008281526006602052604090205460ff166105805760405163f3bf1c2360e01b815260040160405180910390fd5b600082815260056020908152604091829020825160e081018452815460a08201908152600183015460c08301528152835160808101808652919492938501929091600280860192849290830191849182845b8154815260200190600101908083116105d257505050918352505060408051808201918290526020909201919060028481019182845b815481526020019060010190808311610608575050509190925250505081526040805160808101808352602090930192909160068501918391820190839060029082845b81548152602001906001019080831161064c57505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116106825750505091909252505050815260408051608081018083526020909301929091600a8501918391820190839060029082845b8154815260200190600101908083116106c657505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116106fc575050505050815250508152602001600e8201805480602002602001604051908101604052809291908181526020016000905b8282101561078757838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610741565b505050915250909392505050565b6000806107a3858585610328565b60009081526006602052604090205460ff1695945050505050565b6107c6611029565b60006107d488878787610ada565b60008181526002602052604090205490915060ff1615610807576040516329fae11360e01b815260040160405180910390fd5b6000610814898988610328565b60008181526004602052604090205490915060ff161561084757604051630877857960e21b815260040160405180910390fd5b600082815260016020818152604090922086358155918601359082015560408501600282016108768282611441565b505060c085016006820161088a8282611441565b50506101408501600a820161089f8282611441565b90505060005b6108b36101c087018761149a565b90508160ff16101561093457600e82016108d16101c088018861149a565b8360ff168181106108e4576108e46114eb565b83546001810185556000948552602090942060409091029290920192600202909101905061091f828281358155602082013560018201555050565b5050808061092c90611501565b9150506108a5565b506000838152600260209081526040808320805460ff19166001179055848352600390915290208481610974828281358155602082013560018201555050565b505060408501600282016109888282611441565b505060c085016006820161099c8282611441565b50506101408501600a82016109b18282611441565b90505060005b6109c56101c087018761149a565b90508160ff161015610a4657600e82016109e36101c088018861149a565b8360ff168181106109f6576109f66114eb565b835460018101855560009485526020909420604090910292909201926002029091019050610a31828281358155602082013560018201555050565b50508080610a3e90611501565b9150506109b7565b5060008381526004602052604090819020805460ff19166001179055517f8f43c6d3469daf791f866fe1e4abbf6f0d05622995407c31724c500801558a3590610a929085815260200190565b60405180910390a16040518481527f865b6bc6650679c23b8967ee4ae722034eb0634534e4963caf7cf662a6f3731c9060200160405180910390a15050505050505050505050565b600082604085901b610af4608088901b60c086901b611429565b610afe9190611429565b610b089190611429565b95945050505050565b610b196110d3565b60008281526002602052604090205460ff16610b4857604051632f257a9d60e11b815260040160405180910390fd5b600082815260016020818152604092839020835160e081018552815460a082019081529382015460c0820152928352835160808101808652600280840180549784019788529596939594870194929384929091849160038901606086018083116105d257505050918352505060408051808201918290526002848101805483526020948501949293909260038701908501808311610608575050509190925250505081526040805160808101808352600685018054938301938452602090940193919283918390600290600789016060860180831161064c57505050918352505060408051808201918290526002848101805483526020948501949293909260038701908501808311610682575050509190925250505081526040805160808101808352600a85018054938301938452602090940193919283918390600290600b8901606086018083116106c6575050509183525050604080518082019182905260028481018054835260209485019492939092600387019085018083116106fc575050505050815250508152602001600e8201805480602002602001604051908101604052809291908181526020016000908282101561078757838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610741565b610d496110d3565b6000610d56858585610328565b9050610b08815b610d656110d3565b60008281526004602052604090205460ff16610d935760405162f7dd2f60e71b815260040160405180910390fd5b600082815260036020818152604092839020835160e081018552815460a08201908152600183015460c083015281528451608081018087526002808501805498840198895293979496958801959294859390928592918901606086018083116105d257505050918352505060408051808201918290526002848101805483526020948501949293909260038701908501808311610608575050509190925250505081526040805160808101808352600685018054938301938452602090940193919283918390600290600789016060860180831161064c57505050918352505060408051808201918290526002848101805483526020948501949293909260038701908501808311610682575050509190925250505081526040805160808101808352600a85018054938301938452602090940193919283918390600290600b8901606086018083116106c6575050509183525050604080518082019182905260028481018054835260209485019492939092600387019085018083116106fc575050505050815250508152602001600e8201805480602002602001604051908101604052809291908181526020016000908282101561078757838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610741565b610f936110d3565b6000610fa0858585610328565b9050610b0881610549565b610fb3611029565b6001600160a01b03811661101d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61102681611083565b50565b6000546001600160a01b031633146105475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611014565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110fd611124565b815260200161110a611124565b8152602001611117611124565b8152602001606081525090565b6040518060400160405280611137611149565b8152602001611144611149565b905290565b60405180604001604052806002906020820280368337509192915050565b6000806000806080858703121561117d57600080fd5b5050823594602084013594506040840135936060013592509050565b8060005b60028110156111bc57815184526020938401939091019060010161119d565b50505050565b6111cd828251611199565b60208101516111df6040840182611199565b505050565b60208082528251805183830152810151604083015260009061020083018185015161121260608601826111c2565b5060408086015161122660e08701826111c2565b50606086015161123a6101608701826111c2565b5060808601516101e0868101528051928390528301916000906102208701905b8083101561128b5761127782865180518252602090810151910152565b93850193600192909201919083019061125a565b50979650505050505050565b6000806000606084860312156112ac57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156112d557600080fd5b5035919050565b60006101e082840312156112ef57600080fd5b50919050565b6000806000806080858703121561130b57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561133757600080fd5b611343878288016112dc565b91505092959194509250565b600080600080600080600060e0888a03121561136a57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff808211156113a557600080fd5b6113b18b838c016112dc565b935060c08a01359150808211156113c757600080fd5b506113d48a828b016112dc565b91505092959891949750929550565b6000602082840312156113f557600080fd5b81356001600160a01b038116811461140c57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561143c5761143c611413565b500190565b818160005b6002811015611465578235825560209092019160019182019101611446565b50505060026040830181830160005b83811015611492578235825560209092019160019182019101611474565b505050505050565b6000808335601e198436030181126114b157600080fd5b83018035915067ffffffffffffffff8211156114cc57600080fd5b6020019150600681901b36038213156114e457600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81141561151857611518611413565b6001019291505056fea26469706673582212207cb32c10702aa0d1a65c7b1dccd58e57bf4ac25969017149c7ed25355724d5e864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "genProcessVkSig(uint256,uint256,uint256,uint256)": {
        "params": {
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        }
      },
      "genSubsidyVkSig(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "sig": "The signature"
        }
      },
      "genTallyVkSig(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "sig": "The signature"
        }
      },
      "getProcessVk(uint256,uint256,uint256,uint256)": {
        "params": {
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getProcessVkBySig(uint256)": {
        "params": {
          "_sig": "The signature"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getSubsidyVk(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getSubsidyVkBySig(uint256)": {
        "params": {
          "_sig": "The signature"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getTallyVk(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getTallyVkBySig(uint256)": {
        "params": {
          "_sig": "The signature"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "hasProcessVk(uint256,uint256,uint256,uint256)": {
        "params": {
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "hasSubsidyVk(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "hasTallyVk(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "isProcessVkSet(uint256)": {
        "params": {
          "_sig": "The signature"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "isSubsidyVkSet(uint256)": {
        "params": {
          "_sig": "The signature"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "isTallyVkSet(uint256)": {
        "params": {
          "_sig": "The signature"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSubsidyKeys(uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_subsidyVk": "The verifying key",
          "_voteOptionTreeDepth": "The vote option tree depth"
        }
      },
      "setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_processVk": "The process verifying key",
          "_stateTreeDepth": "The state tree depth",
          "_tallyVk": "The tally verifying key",
          "_voteOptionTreeDepth": "The vote option tree depth"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VkRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new instance of the VkRegistry contract"
      },
      "genProcessVkSig(uint256,uint256,uint256,uint256)": {
        "notice": "generate the signature for the process verifying key"
      },
      "genSubsidyVkSig(uint256,uint256,uint256)": {
        "notice": "generate the signature for the subsidy verifying key"
      },
      "genTallyVkSig(uint256,uint256,uint256)": {
        "notice": "generate the signature for the tally verifying key"
      },
      "getProcessVk(uint256,uint256,uint256,uint256)": {
        "notice": "Get the process verifying key"
      },
      "getProcessVkBySig(uint256)": {
        "notice": "Get the process verifying key by signature"
      },
      "getSubsidyVk(uint256,uint256,uint256)": {
        "notice": "Get the subsidy verifying key"
      },
      "getSubsidyVkBySig(uint256)": {
        "notice": "Get the subsidy verifying key by signature"
      },
      "getTallyVk(uint256,uint256,uint256)": {
        "notice": "Get the tally verifying key"
      },
      "getTallyVkBySig(uint256)": {
        "notice": "Get the tally verifying key by signature"
      },
      "hasProcessVk(uint256,uint256,uint256,uint256)": {
        "notice": "Check if the process verifying key is set"
      },
      "hasSubsidyVk(uint256,uint256,uint256)": {
        "notice": "Check if the subsidy verifying key is set"
      },
      "hasTallyVk(uint256,uint256,uint256)": {
        "notice": "Check if the tally verifying key is set"
      },
      "isProcessVkSet(uint256)": {
        "notice": "Check if the process verifying key is set"
      },
      "isSubsidyVkSet(uint256)": {
        "notice": "Check if the subsidy verifying key is set"
      },
      "isTallyVkSet(uint256)": {
        "notice": "Check if the tally verifying key is set"
      },
      "setSubsidyKeys(uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))": {
        "notice": "Set the process verifying key for a certain combination of parameters"
      },
      "setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))": {
        "notice": "Set the process and tally verifying keys for a certain combination of parameters"
      }
    },
    "notice": "Stores verifying keys for the circuits. Each circuit has a signature which is its compile-time constants represented as a uint256.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7733,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "processVks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(VerifyingKey)9129_storage)"
      },
      {
        "astId": 7737,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "processVkSet",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 7742,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "tallyVks",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(VerifyingKey)9129_storage)"
      },
      {
        "astId": 7746,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "tallyVkSet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 7751,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "subsidyVks",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(VerifyingKey)9129_storage)"
      },
      {
        "astId": 7755,
        "contract": "contracts/VkRegistry.sol:VkRegistry",
        "label": "subsidyVkSet",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(G1Point)8695_storage)dyn_storage": {
        "base": "t_struct(G1Point)8695_storage",
        "encoding": "dynamic_array",
        "label": "struct Pairing.G1Point[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(VerifyingKey)9129_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SnarkCommon.VerifyingKey)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifyingKey)9129_storage"
      },
      "t_struct(G1Point)8695_storage": {
        "encoding": "inplace",
        "label": "struct Pairing.G1Point",
        "members": [
          {
            "astId": 8692,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8694,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(G2Point)8704_storage": {
        "encoding": "inplace",
        "label": "struct Pairing.G2Point",
        "members": [
          {
            "astId": 8699,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 8703,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "y",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VerifyingKey)9129_storage": {
        "encoding": "inplace",
        "label": "struct SnarkCommon.VerifyingKey",
        "members": [
          {
            "astId": 9115,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "alpha1",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(G1Point)8695_storage"
          },
          {
            "astId": 9118,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "beta2",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(G2Point)8704_storage"
          },
          {
            "astId": 9121,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "gamma2",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(G2Point)8704_storage"
          },
          {
            "astId": 9124,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "delta2",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(G2Point)8704_storage"
          },
          {
            "astId": 9128,
            "contract": "contracts/VkRegistry.sol:VkRegistry",
            "label": "ic",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(G1Point)8695_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}