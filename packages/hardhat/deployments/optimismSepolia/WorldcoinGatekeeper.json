{
  "address": "0x38F6F2caE52217101D7CA2a5eC040014b4164E6C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_appId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_actionId",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMACI",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "maci",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredTokenIds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registeredUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maci",
          "type": "address"
        }
      ],
      "name": "setMaciInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x84143a5dc3a653aadbdfa6c18d97f3cc0ba7354bab198af0b9451acc977ea54e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x38F6F2caE52217101D7CA2a5eC040014b4164E6C",
    "transactionIndex": 2,
    "gasUsed": "520694",
    "logsBloom": "0x
    "blockHash": "0x3cc7a505622da6df708e2e5a6c30a42fb0e31e6a7d163d7ee22c520f8d06bf7b",
    "transactionHash": "0x84143a5dc3a653aadbdfa6c18d97f3cc0ba7354bab198af0b9451acc977ea54e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9415495,
        "transactionHash": "0x84143a5dc3a653aadbdfa6c18d97f3cc0ba7354bab198af0b9451acc977ea54e",
        "address": "0x38F6F2caE52217101D7CA2a5eC040014b4164E6C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3cc7a505622da6df708e2e5a6c30a42fb0e31e6a7d163d7ee22c520f8d06bf7b"
      }
    ],
    "blockNumber": 9415495,
    "cumulativeGasUsed": "600181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11cA3127182f7583EfC416a8771BD4d11Fae4334",
    "app_staging_20f05974c1aca041018b2aa53c5dda6c",
    "register"
  ],
  "numDeployments": 2,
  "solcInputHash": "9d5b1339aecc34aa8b010ee467f692dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_appId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_actionId\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMACI\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"maci\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredTokenIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maci\",\"type\":\"address\"}],\"name\":\"setMaciInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(address,bytes)\":{\"params\":{\"_data\":\"additional data\",\"_user\":\"The address of the user\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"externalNullifier\":{\"details\":\"The contract's external nullifier hash\"},\"groupId\":{\"details\":\"The World ID group ID (always 1)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\"},\"worldId\":{\"details\":\"The World ID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"kind\":\"user\",\"methods\":{\"register(address,bytes)\":{\"notice\":\"Registers the user\"},\"setMaciInstance(address)\":{\"notice\":\"Allows to set the MACI contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gatekeepers/WorldcoinGatekeeper.sol\":\"WorldcoinGatekeeper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n}\\n\",\"keccak256\":\"0x6a2d8b704a584adefc185fe25fac29e2d9174a29eb0834beef7e8191ed5028d3\",\"license\":\"MIT\"},\"contracts/gatekeepers/WorldcoinGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { SignUpGatekeeper } from \\\"./SignUpGatekeeper.sol\\\";\\nimport { ByteHasher } from \\\"../utilities/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"../interfaces/IWorldID.sol\\\";\\n\\ncontract WorldcoinGatekeeper is SignUpGatekeeper, Ownable {\\n\\tusing ByteHasher for bytes;\\n\\n\\taddress public maci;\\n\\tmapping(uint256 => bool) public registeredTokenIds;\\n\\n\\t/// @notice Thrown when attempting to reuse a nullifier\\n\\terror InvalidNullifier();\\n\\n\\t/// @dev The World ID instance that will be used for verifying proofs\\n\\tIWorldID internal immutable worldId;\\n\\n\\t/// @dev The contract's external nullifier hash\\n\\tuint256 internal immutable externalNullifier;\\n\\n\\t/// @dev The World ID group ID (always 1)\\n\\tuint256 internal immutable groupId = 1;\\n\\n\\t/// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\\n\\tmapping(uint256 => bool) internal nullifierHashes;\\n\\n\\tmapping(address => bool) public registeredUsers;\\n\\n\\terror InvalidProver();\\n\\terror OnlyMACI();\\n\\n\\tconstructor(\\n\\t\\tIWorldID _worldId,\\n\\t\\tstring memory _appId,\\n\\t\\tstring memory _actionId\\n\\t) payable Ownable() {\\n\\t\\tworldId = _worldId;\\n\\t\\texternalNullifier = abi\\n\\t\\t\\t.encodePacked(abi.encodePacked(_appId).hashToField(), _actionId)\\n\\t\\t\\t.hashToField();\\n\\t}\\n\\n\\tfunction setMaciInstance(address _maci) public override onlyOwner {\\n\\t\\tmaci = _maci;\\n\\t}\\n\\tfunction register(address _user, bytes memory _data) public override {\\n\\t\\tif (maci != msg.sender) revert OnlyMACI();\\n\\n\\t\\t(\\n\\t\\t\\taddress signal,\\n\\t\\t\\tuint256 root,\\n\\t\\t\\tuint256 nullifierHash,\\n\\t\\t\\tuint256[8] memory proof\\n\\t\\t) = abi.decode(_data, (address, uint256, uint256, uint256[8]));\\n\\n\\t\\tif (_user != signal) {\\n\\t\\t\\trevert InvalidProver();\\n\\t\\t}\\n\\n\\t\\tverifyAndExecute(signal, root, nullifierHash, proof);\\n\\n\\t\\tregisteredUsers[_user] = true;\\n\\t}\\n\\n\\tfunction verifyAndExecute(\\n\\t\\taddress signal,\\n\\t\\tuint256 root,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256[8] memory proof\\n\\t) internal {\\n\\t\\t// First, we make sure this person hasn't done this before\\n\\t\\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\n\\t\\t// We now verify the provided proof is valid and the user is verified by World ID\\n\\t\\tworldId.verifyProof(\\n\\t\\t\\troot,\\n\\t\\t\\tgroupId,\\n\\t\\t\\tabi.encodePacked(signal).hashToField(),\\n\\t\\t\\tnullifierHash,\\n\\t\\t\\texternalNullifier,\\n\\t\\t\\tproof\\n\\t\\t);\\n\\n\\t\\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\\n\\t\\tnullifierHashes[nullifierHash] = true;\\n\\n\\t\\t// Finally, execute your logic here, for example issue a token, NFT, etc...\\n\\t\\t// Make sure to emit some kind of event afterwards!\\n\\t}\\n}\\n\",\"keccak256\":\"0x599f683ec8c9eb839fc247c43ab9cfe619d6626013d7690d5e934b4e714d68c2\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWorldID {\\n\\t/// @notice Reverts if the zero-knowledge proof is invalid.\\n\\t/// @param root The of the Merkle tree\\n\\t/// @param groupId The id of the Semaphore group\\n\\t/// @param signalHash A keccak256 hash of the Semaphore signal\\n\\t/// @param nullifierHash The nullifier hash\\n\\t/// @param externalNullifierHash A keccak256 hash of the external nullifier\\n\\t/// @param proof The zero-knowledge proof\\n\\t/// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n\\tfunction verifyProof(\\n\\t\\tuint256 root,\\n\\t\\tuint256 groupId,\\n\\t\\tuint256 signalHash,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256 externalNullifierHash,\\n\\t\\tuint256[8] calldata proof\\n\\t) external view;\\n}\\n\",\"keccak256\":\"0x3c54b39a33ec54a982a75826e4f75bc0dbf28ad7b22bcb7c8558557edf1fa1ef\",\"license\":\"MIT\"},\"contracts/utilities/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary ByteHasher {\\n\\t/// @dev Creates a keccak256 hash of a bytestring.\\n\\t/// @param value The bytestring to hash\\n\\t/// @return The hash of the specified value\\n\\t/// @dev `>> 8` makes sure that the result is included in our field\\n\\tfunction hashToField(bytes memory value) internal pure returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encodePacked(value))) >> 8;\\n\\t}\\n}\\n\",\"keccak256\":\"0x244f7f162ddc2bf71d37d3753d975ce89ff9a44f1181fda2774eb0f58c625330\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600160c09081525060405162000ac638038062000ac68339810160408190526200002e9162000205565b6200003933620000a4565b6001600160a01b03831660805260405162000097906200008390620000639085906020016200028f565b604051602081830303815290604052620000f460201b620002d91760201c565b8260405160200162000063929190620002ad565b60a05250620002d5915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006008826040516020016200010b91906200028f565b60408051601f198184030181529190528051602090910120901c92915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200015e57818101518382015260200162000144565b838111156200016e576000848401525b50505050565b600082601f8301126200018657600080fd5b81516001600160401b0380821115620001a357620001a36200012b565b604051601f8301601f19908116603f01168101908282118183101715620001ce57620001ce6200012b565b81604052838152866020858801011115620001e857600080fd5b620001fb84602083016020890162000141565b9695505050505050565b6000806000606084860312156200021b57600080fd5b83516001600160a01b03811681146200023357600080fd5b60208501519093506001600160401b03808211156200025157600080fd5b6200025f8783880162000174565b935060408601519150808211156200027657600080fd5b50620002858682870162000174565b9150509250925092565b60008251620002a381846020870162000141565b9190910192915050565b82815260008251620002c781602085016020870162000141565b919091016020019392505050565b60805160a05160c0516107c16200030560003960006103ca0152600061042c0152600061039a01526107c16000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146101185780638da5cb5b14610120578063ca47cdc214610131578063f2fde38b1461015457600080fd5b80630e50cee51461008d57806313e65cf3146100c557806324b8fbf6146100da57806334a0922c146100ed575b600080fd5b6100b061009b366004610520565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100d86100d3366004610520565b610167565b005b6100d86100e836600461058b565b610191565b600154610100906001600160a01b031681565b6040516001600160a01b0390911681526020016100bc565b6100d8610247565b6000546001600160a01b0316610100565b6100b061013f366004610633565b60026020526000908152604090205460ff1681565b6100d8610162366004610520565b61025b565b61016f61030e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146101bc57604051630346d90560e21b815260040160405180910390fd5b600080600080848060200190518101906101d6919061064c565b9350935093509350836001600160a01b0316866001600160a01b03161461021057604051635945f53b60e01b815260040160405180910390fd5b61021c84848484610368565b5050506001600160a01b039092166000908152600460205260409020805460ff191660011790555050565b61024f61030e565b61025960006104bb565b565b61026361030e565b6001600160a01b0381166102cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102d6816104bb565b50565b60006008826040516020016102ee91906106f7565b60408051601f198184030181529190528051602090910120901c92915050565b6000546001600160a01b031633146102595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c4565b60008281526003602052604090205460ff161561039857604051632ec8265960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061042988604051602001610415919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040526102d9565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161046d96959493929190610732565b60006040518083038186803b15801561048557600080fd5b505afa158015610499573d6000803e3d6000fd5b50505060009283525050600360205260409020805460ff191660011790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102d657600080fd5b60006020828403121561053257600080fd5b813561053d8161050b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561058357610583610544565b604052919050565b6000806040838503121561059e57600080fd5b82356105a98161050b565b915060208381013567ffffffffffffffff808211156105c757600080fd5b818601915086601f8301126105db57600080fd5b8135818111156105ed576105ed610544565b6105ff601f8201601f1916850161055a565b9150808252878482850101111561061557600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121561064557600080fd5b5035919050565b60008060008061016080868803121561066457600080fd5b855161066f8161050b565b8095505060208087015194506040870151935087607f88011261069157600080fd5b604051610100810181811067ffffffffffffffff821117156106b5576106b5610544565b6040529187019180898411156106ca57600080fd5b606089015b848110156106e657805182529083019083016106cf565b505080935050505092959194509250565b6000825160005b8181101561071857602081860181015185830152016106fe565b81811115610727576000828501525b509190910192915050565b60006101a0820190508782526020878184015286604084015285606084015284608084015260a083018460005b600881101561077c5781518352918301919083019060010161075f565b5050505097965050505050505056fea2646970667358221220dfe4fb88ec08cf520e83b9d1e6660a6c79a508781fed64277235f4c2548fdc4364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146101185780638da5cb5b14610120578063ca47cdc214610131578063f2fde38b1461015457600080fd5b80630e50cee51461008d57806313e65cf3146100c557806324b8fbf6146100da57806334a0922c146100ed575b600080fd5b6100b061009b366004610520565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100d86100d3366004610520565b610167565b005b6100d86100e836600461058b565b610191565b600154610100906001600160a01b031681565b6040516001600160a01b0390911681526020016100bc565b6100d8610247565b6000546001600160a01b0316610100565b6100b061013f366004610633565b60026020526000908152604090205460ff1681565b6100d8610162366004610520565b61025b565b61016f61030e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146101bc57604051630346d90560e21b815260040160405180910390fd5b600080600080848060200190518101906101d6919061064c565b9350935093509350836001600160a01b0316866001600160a01b03161461021057604051635945f53b60e01b815260040160405180910390fd5b61021c84848484610368565b5050506001600160a01b039092166000908152600460205260409020805460ff191660011790555050565b61024f61030e565b61025960006104bb565b565b61026361030e565b6001600160a01b0381166102cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102d6816104bb565b50565b60006008826040516020016102ee91906106f7565b60408051601f198184030181529190528051602090910120901c92915050565b6000546001600160a01b031633146102595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c4565b60008281526003602052604090205460ff161561039857604051632ec8265960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061042988604051602001610415919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040526102d9565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161046d96959493929190610732565b60006040518083038186803b15801561048557600080fd5b505afa158015610499573d6000803e3d6000fd5b50505060009283525050600360205260409020805460ff191660011790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102d657600080fd5b60006020828403121561053257600080fd5b813561053d8161050b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561058357610583610544565b604052919050565b6000806040838503121561059e57600080fd5b82356105a98161050b565b915060208381013567ffffffffffffffff808211156105c757600080fd5b818601915086601f8301126105db57600080fd5b8135818111156105ed576105ed610544565b6105ff601f8201601f1916850161055a565b9150808252878482850101111561061557600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121561064557600080fd5b5035919050565b60008060008061016080868803121561066457600080fd5b855161066f8161050b565b8095505060208087015194506040870151935087607f88011261069157600080fd5b604051610100810181811067ffffffffffffffff821117156106b5576106b5610544565b6040529187019180898411156106ca57600080fd5b606089015b848110156106e657805182529083019083016106cf565b505080935050505092959194509250565b6000825160005b8181101561071857602081860181015185830152016106fe565b81811115610727576000828501525b509190910192915050565b60006101a0820190508782526020878184015286604084015285606084015284608084015260a083018460005b600881101561077c5781518352918301919083019060010161075f565b5050505097965050505050505056fea2646970667358221220dfe4fb88ec08cf520e83b9d1e6660a6c79a508781fed64277235f4c2548fdc4364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(address,bytes)": {
        "params": {
          "_data": "additional data",
          "_user": "The address of the user"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "externalNullifier": {
        "details": "The contract's external nullifier hash"
      },
      "groupId": {
        "details": "The World ID group ID (always 1)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person"
      },
      "worldId": {
        "details": "The World ID instance that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "register(address,bytes)": {
        "notice": "Registers the user"
      },
      "setMaciInstance(address)": {
        "notice": "Allows to set the MACI contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/gatekeepers/WorldcoinGatekeeper.sol:WorldcoinGatekeeper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 173,
        "contract": "contracts/gatekeepers/WorldcoinGatekeeper.sol:WorldcoinGatekeeper",
        "label": "maci",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 177,
        "contract": "contracts/gatekeepers/WorldcoinGatekeeper.sol:WorldcoinGatekeeper",
        "label": "registeredTokenIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 196,
        "contract": "contracts/gatekeepers/WorldcoinGatekeeper.sol:WorldcoinGatekeeper",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 200,
        "contract": "contracts/gatekeepers/WorldcoinGatekeeper.sol:WorldcoinGatekeeper",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}