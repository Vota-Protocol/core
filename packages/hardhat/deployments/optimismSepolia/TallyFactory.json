{
  "address": "0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_messageProcessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "tallyAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe09bc97632a4b5934ff1c37933cda3edff69a052dcc88b1aad00d97f4a46effc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE",
    "transactionIndex": 5,
    "gasUsed": "1936591",
    "logsBloom": "0x
    "blockHash": "0xfa24bb43f45da79275a644e84b6caa156345a2786bd102b91750788c670dceb0",
    "transactionHash": "0xe09bc97632a4b5934ff1c37933cda3edff69a052dcc88b1aad00d97f4a46effc",
    "logs": [],
    "blockNumber": 9401286,
    "cumulativeGasUsed": "2204306",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "29b47fc0ef6ba77ce0c1319ed31c0826",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tallyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,address,address,address)\":{\"params\":{\"_messageProcessor\":\"MessageProcessor contract\",\"_owner\":\"Owner of the contract\",\"_poll\":\"Poll contract\",\"_verifier\":\"Verifier contract\",\"_vkRegistry\":\"VkRegistry contract\"},\"returns\":{\"tallyAddr\":\"The deployed contract\"}}},\"title\":\"TallyFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address,address,address,address)\":{\"notice\":\"Deploy a new Tally or Subsidy contract and return the address.\"}},\"notice\":\"A factory contract which deploys Tally contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TallyFactory.sol\":\"TallyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Tally.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Hasher } from \\\"./crypto/Hasher.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { IMessageProcessor } from \\\"./interfaces/IMessageProcessor.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\nimport { CommonUtilities } from \\\"./utilities/CommonUtilities.sol\\\";\\n\\n/// @title Tally\\n/// @notice The Tally contract is used during votes tallying\\n/// and by users to verify the tally results.\\ncontract Tally is Ownable, SnarkCommon, CommonUtilities, Hasher {\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  /// @notice The commitment to the tally results. Its initial value is 0, but after\\n  /// the tally of each batch is proven on-chain via a zk-SNARK, it should be\\n  /// updated to:\\n  ///\\n  /// hash3(\\n  ///   hashLeftRight(merkle root of current results, salt0)\\n  ///   hashLeftRight(number of spent voice credits, salt1),\\n  ///   hashLeftRight(merkle root of the no. of spent voice credits per vote option, salt2)\\n  /// )\\n  ///\\n  /// Where each salt is unique and the merkle roots are of arrays of leaves\\n  /// TREE_ARITY ** voteOptionTreeDepth long.\\n  uint256 public tallyCommitment;\\n\\n  uint256 public tallyBatchNum;\\n\\n  // The final commitment to the state and ballot roots\\n  uint256 public sbCommitment;\\n\\n  IVerifier public immutable verifier;\\n  IVkRegistry public immutable vkRegistry;\\n  IPoll public immutable poll;\\n  IMessageProcessor public immutable messageProcessor;\\n\\n  /// @notice custom errors\\n  error ProcessingNotComplete();\\n  error InvalidTallyVotesProof();\\n  error AllBallotsTallied();\\n  error NumSignUpsTooLarge();\\n  error BatchStartIndexTooLarge();\\n  error TallyBatchSizeTooLarge();\\n\\n  /// @notice Create a new Tally contract\\n  /// @param _verifier The Verifier contract\\n  /// @param _vkRegistry The VkRegistry contract\\n  /// @param _poll The Poll contract\\n  /// @param _mp The MessageProcessor contract\\n  constructor(address _verifier, address _vkRegistry, address _poll, address _mp) payable {\\n    verifier = IVerifier(_verifier);\\n    vkRegistry = IVkRegistry(_vkRegistry);\\n    poll = IPoll(_poll);\\n    messageProcessor = IMessageProcessor(_mp);\\n  }\\n\\n  /// @notice Pack the batch start index and number of signups into a 100-bit value.\\n  /// @param _numSignUps: number of signups\\n  /// @param _batchStartIndex: the start index of given batch\\n  /// @param _tallyBatchSize: size of batch\\n  /// @return result an uint256 representing the 3 inputs packed together\\n  function genTallyVotesPackedVals(\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize\\n  ) public pure returns (uint256 result) {\\n    if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\\n    if (_batchStartIndex >= 2 ** 50) revert BatchStartIndexTooLarge();\\n    if (_tallyBatchSize >= 2 ** 50) revert TallyBatchSizeTooLarge();\\n\\n    result = (_batchStartIndex / _tallyBatchSize) + (_numSignUps << uint256(50));\\n  }\\n\\n  /// @notice Check if all ballots are tallied\\n  /// @return tallied whether all ballots are tallied\\n  function isTallied() public view returns (bool tallied) {\\n    (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\\n    (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\\n\\n    // Require that there are untallied ballots left\\n    tallied = tallyBatchNum * (TREE_ARITY ** intStateTreeDepth) >= numSignUps;\\n  }\\n\\n  /// @notice generate hash of public inputs for tally circuit\\n  /// @param _numSignUps: number of signups\\n  /// @param _batchStartIndex: the start index of given batch\\n  /// @param _tallyBatchSize: size of batch\\n  /// @param _newTallyCommitment: the new tally commitment to be updated\\n  /// @return inputHash hash of public inputs\\n  function genTallyVotesPublicInputHash(\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize,\\n    uint256 _newTallyCommitment\\n  ) public view returns (uint256 inputHash) {\\n    uint256 packedVals = genTallyVotesPackedVals(_numSignUps, _batchStartIndex, _tallyBatchSize);\\n    uint256[] memory input = new uint256[](4);\\n    input[0] = packedVals;\\n    input[1] = sbCommitment;\\n    input[2] = tallyCommitment;\\n    input[3] = _newTallyCommitment;\\n    inputHash = sha256Hash(input);\\n  }\\n\\n  /// @notice Update the state and ballot root commitment\\n  function updateSbCommitment() public onlyOwner {\\n    // Require that all messages have been processed\\n    if (!messageProcessor.processingComplete()) {\\n      revert ProcessingNotComplete();\\n    }\\n\\n    if (sbCommitment == 0) {\\n      sbCommitment = messageProcessor.sbCommitment();\\n    }\\n  }\\n\\n  /// @notice Verify the result of a tally batch\\n  /// @param _newTallyCommitment the new tally commitment to be verified\\n  /// @param _proof the proof generated after tallying this batch\\n  function tallyVotes(uint256 _newTallyCommitment, uint256[8] calldata _proof) public onlyOwner {\\n    _votingPeriodOver(poll);\\n    updateSbCommitment();\\n\\n    // get the batch size and start index\\n    (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\\n    uint256 tallyBatchSize = TREE_ARITY ** intStateTreeDepth;\\n    uint256 batchStartIndex = tallyBatchNum * tallyBatchSize;\\n\\n    // save some gas because we won't overflow uint256\\n    unchecked {\\n      tallyBatchNum++;\\n    }\\n\\n    (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\\n\\n    // Require that there are untallied ballots left\\n    if (batchStartIndex >= numSignUps) {\\n      revert AllBallotsTallied();\\n    }\\n\\n    bool isValid = verifyTallyProof(_proof, numSignUps, batchStartIndex, tallyBatchSize, _newTallyCommitment);\\n\\n    if (!isValid) {\\n      revert InvalidTallyVotesProof();\\n    }\\n\\n    // Update the tally commitment and the tally batch num\\n    tallyCommitment = _newTallyCommitment;\\n  }\\n\\n  /// @notice Verify the tally proof using the verifying key\\n  /// @param _proof the proof generated after processing all messages\\n  /// @param _numSignUps number of signups for a given poll\\n  /// @param _batchStartIndex the number of batches multiplied by the size of the batch\\n  /// @param _tallyBatchSize batch size for the tally\\n  /// @param _newTallyCommitment the tally commitment to be verified at a given batch index\\n  /// @return isValid whether the proof is valid\\n  function verifyTallyProof(\\n    uint256[8] calldata _proof,\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize,\\n    uint256 _newTallyCommitment\\n  ) public view returns (bool isValid) {\\n    (uint8 intStateTreeDepth, , , uint8 voteOptionTreeDepth) = poll.treeDepths();\\n\\n    (IMACI maci, , ) = poll.extContracts();\\n\\n    // Get the verifying key\\n    VerifyingKey memory vk = vkRegistry.getTallyVk(maci.stateTreeDepth(), intStateTreeDepth, voteOptionTreeDepth);\\n\\n    // Get the public inputs\\n    uint256 publicInputHash = genTallyVotesPublicInputHash(\\n      _numSignUps,\\n      _batchStartIndex,\\n      _tallyBatchSize,\\n      _newTallyCommitment\\n    );\\n\\n    // Verify the proof\\n    isValid = verifier.verify(_proof, vk, publicInputHash);\\n  }\\n\\n  /// @notice Compute the merkle root from the path elements\\n  /// and a leaf\\n  /// @param _depth the depth of the merkle tree\\n  /// @param _index the index of the leaf\\n  /// @param _leaf the leaf\\n  /// @param _pathElements the path elements to reconstruct the merkle root\\n  /// @return current The merkle root\\n  function computeMerkleRootFromPath(\\n    uint8 _depth,\\n    uint256 _index,\\n    uint256 _leaf,\\n    uint256[][] calldata _pathElements\\n  ) internal pure returns (uint256 current) {\\n    uint256 pos = _index % TREE_ARITY;\\n    current = _leaf;\\n    uint8 k;\\n\\n    uint256[TREE_ARITY] memory level;\\n\\n    for (uint8 i = 0; i < _depth; ++i) {\\n      for (uint8 j = 0; j < TREE_ARITY; ++j) {\\n        if (j == pos) {\\n          level[j] = current;\\n        } else {\\n          if (j > pos) {\\n            k = j - 1;\\n          } else {\\n            k = j;\\n          }\\n          level[j] = _pathElements[i][k];\\n        }\\n      }\\n\\n      _index /= TREE_ARITY;\\n      pos = _index % TREE_ARITY;\\n      current = hash5(level);\\n    }\\n  }\\n\\n  /// @notice Verify the number of spent voice credits from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice credits per vote option, salt)\\n  /// @return isValid Whether the provided values are valid\\n  function verifySpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) public view returns (bool isValid) {\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n    tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the number of spent voice credits per vote option from the tally.json\\n  /// @param _voteOptionIndex the index of the vote option where credits were spent\\n  /// @param _spent the spent voice credits for a given vote option index\\n  /// @param _spentProof proof generated for the perVOSpentVoiceCredits\\n  /// @param _spentSalt the corresponding salt given in the tally perVOSpentVoiceCredits object\\n  /// @param _voteOptionTreeDepth depth of the vote option tree\\n  /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt)\\n  // in the tally.json file\\n  /// @return isValid Whether the provided proof is valid\\n  function verifyPerVOSpentVoiceCredits(\\n    uint256 _voteOptionIndex,\\n    uint256 _spent,\\n    uint256[][] calldata _spentProof,\\n    uint256 _spentSalt,\\n    uint8 _voteOptionTreeDepth,\\n    uint256 _spentVoiceCreditsHash,\\n    uint256 _resultCommitment\\n  ) public view returns (bool isValid) {\\n    uint256 computedRoot = computeMerkleRootFromPath(_voteOptionTreeDepth, _voteOptionIndex, _spent, _spentProof);\\n\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = _spentVoiceCreditsHash;\\n    tally[2] = hashLeftRight(computedRoot, _spentSalt);\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the result generated from the tally.json\\n  /// @param _voteOptionIndex the index of the vote option to verify the correctness of the tally\\n  /// @param _tallyResult Flattened array of the tally\\n  /// @param _tallyResultProof Corresponding proof of the tally result\\n  /// @param _tallyResultSalt the respective salt in the results object in the tally.json\\n  /// @param _voteOptionTreeDepth depth of the vote option tree\\n  /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\\n  /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice\\n  /// credits per vote option, perVOSpentVoiceCredits salt)\\n  /// @return isValid Whether the provided proof is valid\\n  function verifyTallyResult(\\n    uint256 _voteOptionIndex,\\n    uint256 _tallyResult,\\n    uint256[][] calldata _tallyResultProof,\\n    uint256 _tallyResultSalt,\\n    uint8 _voteOptionTreeDepth,\\n    uint256 _spentVoiceCreditsHash,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) public view returns (bool isValid) {\\n    uint256 computedRoot = computeMerkleRootFromPath(\\n      _voteOptionTreeDepth,\\n      _voteOptionIndex,\\n      _tallyResult,\\n      _tallyResultProof\\n    );\\n\\n    uint256[3] memory tally;\\n    tally[0] = hashLeftRight(computedRoot, _tallyResultSalt);\\n    tally[1] = _spentVoiceCreditsHash;\\n    tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n}\\n\",\"keccak256\":\"0xd90c9fbfde5b22b76851001cd0aead666ae065938995038b498e9cc80bc8d168\",\"license\":\"MIT\"},\"contracts/TallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Tally } from \\\"./Tally.sol\\\";\\nimport { ITallySubsidyFactory } from \\\"./interfaces/ITallySubsidyFactory.sol\\\";\\n\\n/// @title TallyFactory\\n/// @notice A factory contract which deploys Tally contracts.\\ncontract TallyFactory is ITallySubsidyFactory {\\n  /// @inheritdoc ITallySubsidyFactory\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner\\n  ) public virtual returns (address tallyAddr) {\\n    // deploy Tally for this Poll\\n    Tally tally = new Tally(_verifier, _vkRegistry, _poll, _messageProcessor);\\n    tally.transferOwnership(_owner);\\n    tallyAddr = address(tally);\\n  }\\n}\\n\",\"keccak256\":\"0x92e628181a402dfb59f8a740acacc47e909af0868c452bb8459f41e2bf588eef\",\"license\":\"MIT\"},\"contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessor\\n/// @notice MessageProcessor interface\\ninterface IMessageProcessor {\\n  /// @notice Get the result of whether there are unprocessed messages left\\n  /// @return Whether there are unprocessed messages left\\n  function processingComplete() external view returns (bool);\\n\\n  /// @notice Get the commitment to the state and ballot roots\\n  /// @return The commitment to the state and ballot roots\\n  function sbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x917bdb4c5eae4d20ccf6d0c9dc0c2cf1868a6951bc6fb74efbc91977309f505a\",\"license\":\"MIT\"},\"contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"contracts/interfaces/ITallySubsidyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title ITallySubsidyFactory\\n/// @notice TallySubsidyFactory interface\\ninterface ITallySubsidyFactory {\\n  /// @notice Deploy a new Tally or Subsidy contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x7f488dbd759e1dfe40ba25f6282c7cb9c1aae20543f3fa943535d97115e1fb5a\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVerifier\\n/// @notice an interface for a Groth16 verifier contract\\ninterface IVerifier {\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    SnarkCommon.VerifyingKey memory vk,\\n    uint256 input\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf237bf3e3dbc948b577cb689eeecf3633c38205e6bd8e8ef0eb1356197e02247\",\"license\":\"MIT\"},\"contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the subsidy verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return The verifying key\\n  function getSubsidyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x0b6a2f530aca4db72c6551624123d6377c74ef1b4c0133939f88b8088e055518\",\"license\":\"MIT\"},\"contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"contracts/utilities/CommonUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IPoll } from \\\"../interfaces/IPoll.sol\\\";\\n\\n/// @title CommonUtilities\\n/// @notice A contract that holds common utilities\\n/// which are to be used by multiple contracts\\n/// namely Subsidy, Tally and MessageProcessor\\ncontract CommonUtilities {\\n  error VotingPeriodNotPassed();\\n\\n  /// @notice common function for MessageProcessor, Tally and Subsidy\\n  /// @param _poll the poll to be checked\\n  function _votingPeriodOver(IPoll _poll) internal view {\\n    (uint256 deployTime, uint256 duration) = _poll.getDeployTimeAndDuration();\\n    // Require that the voting period is over\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) {\\n      revert VotingPeriodNotPassed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xde731545f76b8f8f63b5a791860d381f74c30b1969769492c75c327c3159647b\",\"license\":\"MIT\"},\"contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061222d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639937a67814610030575b600080fd5b61004361003e36600461014a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868660405161007290610121565b6001600160a01b039485168152928416602084015290831660408301529091166060820152608001604051809103906000f0801580156100b6573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0385811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100fe57600080fd5b505af1158015610112573d6000803e3d6000fd5b50929998505050505050505050565b612048806101b083390190565b80356001600160a01b038116811461014557600080fd5b919050565b600080600080600060a0868803121561016257600080fd5b61016b8661012e565b94506101796020870161012e565b93506101876040870161012e565b92506101956060870161012e565b91506101a36080870161012e565b9050929550929590935056fe61010060405260405162002048380380620020488339810160408190526200002791620000c2565b620000323362000055565b6001600160a01b0393841660805291831660a052821660c0521660e0526200011f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000bd57600080fd5b919050565b60008060008060808587031215620000d957600080fd5b620000e485620000a5565b9350620000f460208601620000a5565b92506200010460408601620000a5565b91506200011460608601620000a5565b905092959194509250565b60805160a05160c05160e051611ea2620001a660003960008181610359015281816103e301526104890152600081816102f00152818161051c0152818161054c0152818161061b0152818161099901528181610a2301528181610d990152610e220152600081816101a50152610aab0152600081816102010152610bda0152611ea26000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063afb93bd311610097578063d0380fe211610071578063d0380fe214610354578063d13181b81461037b578063e3ff760614610384578063f2fde38b1461038c57600080fd5b8063afb93bd314610325578063b03698f21461032e578063bea140b31461034157600080fd5b8063715018a6146102ac5780637485dba1146102b45780638da5cb5b146102c75780639cfced97146102d8578063a1175279146102eb578063a21fb5111461031257600080fd5b80633dfb88b2116101305780633dfb88b21461023657806358bfc379146102575780635bb939951461026a578063617502931461027d57806362a361bb146102865780636b148b601461029957600080fd5b806310bc5f511461017857806313fb8932146101a057806316425eeb146101df57806323e3feb1146101e95780632b7ac3f3146101fc5780632d966bf414610223575b600080fd5b61018b61018636600461121d565b61039f565b60405190151581526020015b60405180910390f35b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b6101e76103d9565b005b6101e76101f7366004611261565b61050f565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b61018b6102313660046112ae565b6106e6565b6102496102443660046113f7565b610739565b604051908152602001610197565b610249610265366004611499565b6107ba565b610249610278366004611524565b610854565b61024960015481565b610249610294366004611546565b610879565b6102496102a736600461121d565b6108b3565b6101e7610980565b61018b6102c23660046115a6565b610992565b6000546001600160a01b03166101c7565b6102496102e63660046115ee565b610c63565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b61018b6103203660046112ae565b610c9d565b61024960025481565b61024961033c366004611647565b610cd3565b61024961034f366004611673565b610d5a565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b61024960035481565b61018b610d94565b6101e761039a3660046116e1565b610ec6565b60006103a96111c3565b8381526103b68686610854565b6020820152604081018390526001546103ce82610d5a565b149695505050505050565b6103e1610f44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638763d0c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610463919061171b565b6104805760405163f13e1b8560e01b815260040160405180910390fd5b60035461050d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d13181b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610509919061173d565b6003555b565b610517610f44565b6105407f0000000000000000000000000000000000000000000000000000000000000000610f9e565b6105486103d9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cc9190611756565b505050905060008160056105e091906118af565b90506000816002546105f291906118be565b60028054600101905560408051634f367f0f60e01b815281519293506000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634f367f0f92600480820193918290030181865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906118dd565b5090508082106106a95760405163b3f8c18960e01b815260040160405180910390fd5b60006106b8868385878b610992565b9050806106d8576040516341acf34d60e01b815260040160405180910390fd5b505050600193909355505050565b6000806106f6858b8b8b8b61103b565b90506107006111c3565b838152602081018590526107148288610854565b8160025b602002015260015461072982610d5a565b149b9a5050505050505050505050565b60405163248f667760e01b81526000907330426D33a78afdb8788597D5BFaBdADc3Be956989063248f667790610773908590600401611901565b602060405180830381865af4158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061173d565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016002836040516020016107f09190611932565b60408051601f198184030181529082905261080a91611968565b602060405180830381855afa158015610827573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061084a919061173d565b6107b491906119b9565b600061085e6111e1565b8381526020810183905261087181610879565b949350505050565b6040516314d2f97b60e11b81526000907349149a233de6E4cD6835971506F47EE5862289c1906329a5f2f6906107739085906004016119cd565b6000806108c1868686610cd3565b60408051600480825260a08201909252919250600091906020820160808036833701905050905081816000815181106108fc576108fc611705565b6020026020010181815250506003548160018151811061091e5761091e611705565b6020026020010181815250506001548160028151811061094057610940611705565b602002602001018181525050838160038151811061096057610960611705565b602002602001018181525050610975816107ba565b979650505050505050565b610988610f44565b61050d6000611173565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a199190611756565b93505050915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14ee2b6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa391906119f5565b5050905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7c8beec836001600160a01b031663652c76e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190611a42565b6040516001600160e01b031960e084901b16815260ff918216600482015281881660248201529086166044820152606401600060405180830381865afa158015610b88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb09190810190611b14565b90506000610bc08a8a8a8a6108b3565b6040516308adcb2560e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322b72c9490610c13908e9086908690600401611c72565b602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c54919061171b565b9b9a5050505050505050505050565b604051630926f44b60e31b81526000907385495222Fd7069B987Ca38C2142732EbBFb7175D90634937a25890610773908590600401611d45565b600080610cad858b8b8b8b61103b565b9050610cb76111c3565b610cc18288610854565b81526020810185905283816002610718565b6000600160321b8410610cf957604051631805864f60e21b815260040160405180910390fd5b600160321b8310610d1d576040516334dd29a960e21b815260040160405180910390fd5b600160321b8210610d415760405163cdc3c16b60e01b815260040160405180910390fd5b603284901b610d508385611d6d565b6108719190611d81565b6040516304b98e1d60e31b815260009073Ae2563b4315469bF6bdD41A6ea26157dE57Ed94e906325cc70e890610773908590600401611d99565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e199190611756565b505050905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea191906118dd565b50905080610eb08360056118af565b600254610ebd91906118be565b10159250505090565b610ece610f44565b6001600160a01b038116610f385760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610f4181611173565b50565b6000546001600160a01b0316331461050d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f2f565b600080826001600160a01b0316634909229f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100291906118dd565b909250905060006110138342611dc1565b905081811161103557604051635c3017c560e11b815260040160405180910390fd5b50505050565b6000806110496005876119b9565b905084915060006110586111ff565b60005b8960ff168160ff1610156111665760005b60058160ff16101561113057848160ff1614156110a35785838260ff166005811061109957611099611705565b6020020152611120565b848160ff1611156110c0576110b9600182611dd8565b93506110c4565b8093505b87878360ff168181106110d9576110d9611705565b90506020028101906110eb9190611dfb565b8560ff168181106110fe576110fe611705565b90506020020135838260ff166005811061111a5761111a611705565b60200201525b61112981611e4c565b905061106c565b5061113c60058a611d6d565b985061114960058a6119b9565b935061115482610c63565b945061115f81611e4c565b905061105b565b5050505095945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6000806000806080858703121561123357600080fd5b5050823594602084013594506040840135936060013592509050565b8061010081018310156107b457600080fd5b600080610120838503121561127557600080fd5b82359150611286846020850161124f565b90509250929050565b60ff81168114610f4157600080fd5b80356112a98161128f565b919050565b60008060008060008060008060e0898b0312156112ca57600080fd5b8835975060208901359650604089013567ffffffffffffffff808211156112f057600080fd5b818b0191508b601f83011261130457600080fd5b81358181111561131357600080fd5b8c60208260051b850101111561132857600080fd5b6020830198508097505050506060890135935061134760808a0161129e565b925060a0890135915060c089013590509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561139d5761139d611364565b60405290565b60405160a0810167ffffffffffffffff8111828210171561139d5761139d611364565b604051601f8201601f1916810167ffffffffffffffff811182821017156113ef576113ef611364565b604052919050565b60006080828403121561140957600080fd5b82601f83011261141857600080fd5b6040516080810181811067ffffffffffffffff8211171561143b5761143b611364565b60405280608084018581111561145057600080fd5b845b8181101561146a578035835260209283019201611452565b509195945050505050565b600067ffffffffffffffff82111561148f5761148f611364565b5060051b60200190565b600060208083850312156114ac57600080fd5b823567ffffffffffffffff8111156114c357600080fd5b8301601f810185136114d457600080fd5b80356114e76114e282611475565b6113c6565b81815260059190911b8201830190838101908783111561150657600080fd5b928401925b828410156109755783358252928401929084019061150b565b6000806040838503121561153757600080fd5b50508035926020909101359150565b60006040828403121561155857600080fd5b82601f83011261156757600080fd5b61156f61137a565b80604084018581111561158157600080fd5b845b8181101561159b578035845260209384019301611583565b509095945050505050565b600080600080600061018086880312156115bf57600080fd5b6115c9878761124f565b9761010087013597506101208701359661014081013596506101600135945092505050565b600060a0828403121561160057600080fd5b82601f83011261160f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561163257611632611364565b6040528060a084018581111561145057600080fd5b60008060006060848603121561165c57600080fd5b505081359360208301359350604090920135919050565b60006060828403121561168557600080fd5b82601f83011261169457600080fd5b6040516060810181811067ffffffffffffffff821117156116b7576116b7611364565b60405280606084018581111561145057600080fd5b6001600160a01b0381168114610f4157600080fd5b6000602082840312156116f357600080fd5b81356116fe816116cc565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561172d57600080fd5b815180151581146116fe57600080fd5b60006020828403121561174f57600080fd5b5051919050565b6000806000806080858703121561176c57600080fd5b84516117778161128f565b60208601519094506117888161128f565b60408601519093506117998161128f565b60608601519092506117aa8161128f565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156118065781600019048211156117ec576117ec6117b5565b808516156117f957918102915b93841c93908002906117d0565b509250929050565b60008261181d575060016107b4565b8161182a575060006107b4565b8160018114611840576002811461184a57611866565b60019150506107b4565b60ff84111561185b5761185b6117b5565b50506001821b6107b4565b5060208310610133831016604e8410600b8410161715611889575081810a6107b4565b61189383836117cb565b80600019048211156118a7576118a76117b5565b029392505050565b60006116fe60ff84168361180e565b60008160001904831182151516156118d8576118d86117b5565b500290565b600080604083850312156118f057600080fd5b505080516020909101519092909150565b60808101818360005b600481101561192957815183526020928301929091019060010161190a565b50505092915050565b815160009082906020808601845b8381101561195c57815185529382019390820190600101611940565b50929695505050505050565b6000825160005b81811015611989576020818601810151858301520161196f565b81811115611998576000828501525b509190910192915050565b634e487b7160e01b600052601260045260246000fd5b6000826119c8576119c86119a3565b500690565b60408101818360005b60028110156119295781518352602092830192909101906001016119d6565b600080600060608486031215611a0a57600080fd5b8351611a15816116cc565b6020850151909350611a26816116cc565b6040850151909250611a37816116cc565b809150509250925092565b600060208284031215611a5457600080fd5b81516116fe8161128f565b600060408284031215611a7157600080fd5b611a7961137a565b9050815181526020820151602082015292915050565b600082601f830112611aa057600080fd5b611aa861137a565b806040840185811115611aba57600080fd5b845b8181101561159b578051845260209384019301611abc565b600060808284031215611ae657600080fd5b611aee61137a565b9050611afa8383611a8f565b8152611b098360408401611a8f565b602082015292915050565b60006020808385031215611b2757600080fd5b825167ffffffffffffffff80821115611b3f57600080fd5b908401906101e08287031215611b5457600080fd5b611b5c6113a3565b611b668784611a5f565b81526040611b7688828601611ad4565b85830152611b878860c08601611ad4565b81830152611b99886101408601611ad4565b60608301526101c084015183811115611bb157600080fd5b80850194505087601f850112611bc657600080fd5b83519250611bd66114e284611475565b83815260069390931b84018501928581019089851115611bf557600080fd5b948601945b84861015611c1b57611c0c8a87611a5f565b82529482019490860190611bfa565b60808401525090979650505050505050565b8060005b6002811015611035578151845260209384019390910190600101611c31565b611c5b828251611c2d565b6020810151611c6d6040840182611c2d565b505050565b60006101406101008087853783018190528451805182850190815260209182015191015261032083016020915081860151611cb1610180860182611c50565b50604080870151611cc6610200870182611c50565b506060870151611cda610280870182611c50565b5060808701516101e06103008701528051928390528301916000906103408701905b80831015611d2d57611d1982865180518252602090810151910152565b938501936001929092019190830190611cfc565b50809550505050505082610120830152949350505050565b60a08101818360005b6005811015611929578151835260209283019290910190600101611d4e565b600082611d7c57611d7c6119a3565b500490565b60008219821115611d9457611d946117b5565b500190565b60608101818360005b6003811015611929578151835260209283019290910190600101611da2565b600082821015611dd357611dd36117b5565b500390565b600060ff821660ff841680821015611df257611df26117b5565b90039392505050565b6000808335601e19843603018112611e1257600080fd5b83018035915067ffffffffffffffff821115611e2d57600080fd5b6020019150600581901b3603821315611e4557600080fd5b9250929050565b600060ff821660ff811415611e6357611e636117b5565b6001019291505056fea26469706673582212207796c4e698aafb8e143799ba367ccf70e3f5a13341b0e87a4f462f798661c19e64736f6c634300080a0033a2646970667358221220af3222dbab7b26f2f107c85de92a596bfab0a67f4e38097fce16be9a7c562e3a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639937a67814610030575b600080fd5b61004361003e36600461014a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868660405161007290610121565b6001600160a01b039485168152928416602084015290831660408301529091166060820152608001604051809103906000f0801580156100b6573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0385811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100fe57600080fd5b505af1158015610112573d6000803e3d6000fd5b50929998505050505050505050565b612048806101b083390190565b80356001600160a01b038116811461014557600080fd5b919050565b600080600080600060a0868803121561016257600080fd5b61016b8661012e565b94506101796020870161012e565b93506101876040870161012e565b92506101956060870161012e565b91506101a36080870161012e565b9050929550929590935056fe61010060405260405162002048380380620020488339810160408190526200002791620000c2565b620000323362000055565b6001600160a01b0393841660805291831660a052821660c0521660e0526200011f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000bd57600080fd5b919050565b60008060008060808587031215620000d957600080fd5b620000e485620000a5565b9350620000f460208601620000a5565b92506200010460408601620000a5565b91506200011460608601620000a5565b905092959194509250565b60805160a05160c05160e051611ea2620001a660003960008181610359015281816103e301526104890152600081816102f00152818161051c0152818161054c0152818161061b0152818161099901528181610a2301528181610d990152610e220152600081816101a50152610aab0152600081816102010152610bda0152611ea26000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063afb93bd311610097578063d0380fe211610071578063d0380fe214610354578063d13181b81461037b578063e3ff760614610384578063f2fde38b1461038c57600080fd5b8063afb93bd314610325578063b03698f21461032e578063bea140b31461034157600080fd5b8063715018a6146102ac5780637485dba1146102b45780638da5cb5b146102c75780639cfced97146102d8578063a1175279146102eb578063a21fb5111461031257600080fd5b80633dfb88b2116101305780633dfb88b21461023657806358bfc379146102575780635bb939951461026a578063617502931461027d57806362a361bb146102865780636b148b601461029957600080fd5b806310bc5f511461017857806313fb8932146101a057806316425eeb146101df57806323e3feb1146101e95780632b7ac3f3146101fc5780632d966bf414610223575b600080fd5b61018b61018636600461121d565b61039f565b60405190151581526020015b60405180910390f35b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b6101e76103d9565b005b6101e76101f7366004611261565b61050f565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b61018b6102313660046112ae565b6106e6565b6102496102443660046113f7565b610739565b604051908152602001610197565b610249610265366004611499565b6107ba565b610249610278366004611524565b610854565b61024960015481565b610249610294366004611546565b610879565b6102496102a736600461121d565b6108b3565b6101e7610980565b61018b6102c23660046115a6565b610992565b6000546001600160a01b03166101c7565b6102496102e63660046115ee565b610c63565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b61018b6103203660046112ae565b610c9d565b61024960025481565b61024961033c366004611647565b610cd3565b61024961034f366004611673565b610d5a565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b61024960035481565b61018b610d94565b6101e761039a3660046116e1565b610ec6565b60006103a96111c3565b8381526103b68686610854565b6020820152604081018390526001546103ce82610d5a565b149695505050505050565b6103e1610f44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638763d0c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610463919061171b565b6104805760405163f13e1b8560e01b815260040160405180910390fd5b60035461050d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d13181b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610509919061173d565b6003555b565b610517610f44565b6105407f0000000000000000000000000000000000000000000000000000000000000000610f9e565b6105486103d9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cc9190611756565b505050905060008160056105e091906118af565b90506000816002546105f291906118be565b60028054600101905560408051634f367f0f60e01b815281519293506000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634f367f0f92600480820193918290030181865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906118dd565b5090508082106106a95760405163b3f8c18960e01b815260040160405180910390fd5b60006106b8868385878b610992565b9050806106d8576040516341acf34d60e01b815260040160405180910390fd5b505050600193909355505050565b6000806106f6858b8b8b8b61103b565b90506107006111c3565b838152602081018590526107148288610854565b8160025b602002015260015461072982610d5a565b149b9a5050505050505050505050565b60405163248f667760e01b815260009073__$ce9c2c925f157047e54fa833ec4e61409f$__9063248f667790610773908590600401611901565b602060405180830381865af4158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061173d565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016002836040516020016107f09190611932565b60408051601f198184030181529082905261080a91611968565b602060405180830381855afa158015610827573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061084a919061173d565b6107b491906119b9565b600061085e6111e1565b8381526020810183905261087181610879565b949350505050565b6040516314d2f97b60e11b815260009073__$6574937f64fc1d7710ec0e28b7a36713bb$__906329a5f2f6906107739085906004016119cd565b6000806108c1868686610cd3565b60408051600480825260a08201909252919250600091906020820160808036833701905050905081816000815181106108fc576108fc611705565b6020026020010181815250506003548160018151811061091e5761091e611705565b6020026020010181815250506001548160028151811061094057610940611705565b602002602001018181525050838160038151811061096057610960611705565b602002602001018181525050610975816107ba565b979650505050505050565b610988610f44565b61050d6000611173565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a199190611756565b93505050915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14ee2b6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa391906119f5565b5050905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7c8beec836001600160a01b031663652c76e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190611a42565b6040516001600160e01b031960e084901b16815260ff918216600482015281881660248201529086166044820152606401600060405180830381865afa158015610b88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb09190810190611b14565b90506000610bc08a8a8a8a6108b3565b6040516308adcb2560e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322b72c9490610c13908e9086908690600401611c72565b602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c54919061171b565b9b9a5050505050505050505050565b604051630926f44b60e31b815260009073__$20527677031d76601747626a9845039fe4$__90634937a25890610773908590600401611d45565b600080610cad858b8b8b8b61103b565b9050610cb76111c3565b610cc18288610854565b81526020810185905283816002610718565b6000600160321b8410610cf957604051631805864f60e21b815260040160405180910390fd5b600160321b8310610d1d576040516334dd29a960e21b815260040160405180910390fd5b600160321b8210610d415760405163cdc3c16b60e01b815260040160405180910390fd5b603284901b610d508385611d6d565b6108719190611d81565b6040516304b98e1d60e31b815260009073__$dc01a9744591ab014bc46a3b7671cdaefb$__906325cc70e890610773908590600401611d99565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac98e5df6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e199190611756565b505050905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f367f0f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea191906118dd565b50905080610eb08360056118af565b600254610ebd91906118be565b10159250505090565b610ece610f44565b6001600160a01b038116610f385760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610f4181611173565b50565b6000546001600160a01b0316331461050d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f2f565b600080826001600160a01b0316634909229f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100291906118dd565b909250905060006110138342611dc1565b905081811161103557604051635c3017c560e11b815260040160405180910390fd5b50505050565b6000806110496005876119b9565b905084915060006110586111ff565b60005b8960ff168160ff1610156111665760005b60058160ff16101561113057848160ff1614156110a35785838260ff166005811061109957611099611705565b6020020152611120565b848160ff1611156110c0576110b9600182611dd8565b93506110c4565b8093505b87878360ff168181106110d9576110d9611705565b90506020028101906110eb9190611dfb565b8560ff168181106110fe576110fe611705565b90506020020135838260ff166005811061111a5761111a611705565b60200201525b61112981611e4c565b905061106c565b5061113c60058a611d6d565b985061114960058a6119b9565b935061115482610c63565b945061115f81611e4c565b905061105b565b5050505095945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6000806000806080858703121561123357600080fd5b5050823594602084013594506040840135936060013592509050565b8061010081018310156107b457600080fd5b600080610120838503121561127557600080fd5b82359150611286846020850161124f565b90509250929050565b60ff81168114610f4157600080fd5b80356112a98161128f565b919050565b60008060008060008060008060e0898b0312156112ca57600080fd5b8835975060208901359650604089013567ffffffffffffffff808211156112f057600080fd5b818b0191508b601f83011261130457600080fd5b81358181111561131357600080fd5b8c60208260051b850101111561132857600080fd5b6020830198508097505050506060890135935061134760808a0161129e565b925060a0890135915060c089013590509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561139d5761139d611364565b60405290565b60405160a0810167ffffffffffffffff8111828210171561139d5761139d611364565b604051601f8201601f1916810167ffffffffffffffff811182821017156113ef576113ef611364565b604052919050565b60006080828403121561140957600080fd5b82601f83011261141857600080fd5b6040516080810181811067ffffffffffffffff8211171561143b5761143b611364565b60405280608084018581111561145057600080fd5b845b8181101561146a578035835260209283019201611452565b509195945050505050565b600067ffffffffffffffff82111561148f5761148f611364565b5060051b60200190565b600060208083850312156114ac57600080fd5b823567ffffffffffffffff8111156114c357600080fd5b8301601f810185136114d457600080fd5b80356114e76114e282611475565b6113c6565b81815260059190911b8201830190838101908783111561150657600080fd5b928401925b828410156109755783358252928401929084019061150b565b6000806040838503121561153757600080fd5b50508035926020909101359150565b60006040828403121561155857600080fd5b82601f83011261156757600080fd5b61156f61137a565b80604084018581111561158157600080fd5b845b8181101561159b578035845260209384019301611583565b509095945050505050565b600080600080600061018086880312156115bf57600080fd5b6115c9878761124f565b9761010087013597506101208701359661014081013596506101600135945092505050565b600060a0828403121561160057600080fd5b82601f83011261160f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561163257611632611364565b6040528060a084018581111561145057600080fd5b60008060006060848603121561165c57600080fd5b505081359360208301359350604090920135919050565b60006060828403121561168557600080fd5b82601f83011261169457600080fd5b6040516060810181811067ffffffffffffffff821117156116b7576116b7611364565b60405280606084018581111561145057600080fd5b6001600160a01b0381168114610f4157600080fd5b6000602082840312156116f357600080fd5b81356116fe816116cc565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561172d57600080fd5b815180151581146116fe57600080fd5b60006020828403121561174f57600080fd5b5051919050565b6000806000806080858703121561176c57600080fd5b84516117778161128f565b60208601519094506117888161128f565b60408601519093506117998161128f565b60608601519092506117aa8161128f565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156118065781600019048211156117ec576117ec6117b5565b808516156117f957918102915b93841c93908002906117d0565b509250929050565b60008261181d575060016107b4565b8161182a575060006107b4565b8160018114611840576002811461184a57611866565b60019150506107b4565b60ff84111561185b5761185b6117b5565b50506001821b6107b4565b5060208310610133831016604e8410600b8410161715611889575081810a6107b4565b61189383836117cb565b80600019048211156118a7576118a76117b5565b029392505050565b60006116fe60ff84168361180e565b60008160001904831182151516156118d8576118d86117b5565b500290565b600080604083850312156118f057600080fd5b505080516020909101519092909150565b60808101818360005b600481101561192957815183526020928301929091019060010161190a565b50505092915050565b815160009082906020808601845b8381101561195c57815185529382019390820190600101611940565b50929695505050505050565b6000825160005b81811015611989576020818601810151858301520161196f565b81811115611998576000828501525b509190910192915050565b634e487b7160e01b600052601260045260246000fd5b6000826119c8576119c86119a3565b500690565b60408101818360005b60028110156119295781518352602092830192909101906001016119d6565b600080600060608486031215611a0a57600080fd5b8351611a15816116cc565b6020850151909350611a26816116cc565b6040850151909250611a37816116cc565b809150509250925092565b600060208284031215611a5457600080fd5b81516116fe8161128f565b600060408284031215611a7157600080fd5b611a7961137a565b9050815181526020820151602082015292915050565b600082601f830112611aa057600080fd5b611aa861137a565b806040840185811115611aba57600080fd5b845b8181101561159b578051845260209384019301611abc565b600060808284031215611ae657600080fd5b611aee61137a565b9050611afa8383611a8f565b8152611b098360408401611a8f565b602082015292915050565b60006020808385031215611b2757600080fd5b825167ffffffffffffffff80821115611b3f57600080fd5b908401906101e08287031215611b5457600080fd5b611b5c6113a3565b611b668784611a5f565b81526040611b7688828601611ad4565b85830152611b878860c08601611ad4565b81830152611b99886101408601611ad4565b60608301526101c084015183811115611bb157600080fd5b80850194505087601f850112611bc657600080fd5b83519250611bd66114e284611475565b83815260069390931b84018501928581019089851115611bf557600080fd5b948601945b84861015611c1b57611c0c8a87611a5f565b82529482019490860190611bfa565b60808401525090979650505050505050565b8060005b6002811015611035578151845260209384019390910190600101611c31565b611c5b828251611c2d565b6020810151611c6d6040840182611c2d565b505050565b60006101406101008087853783018190528451805182850190815260209182015191015261032083016020915081860151611cb1610180860182611c50565b50604080870151611cc6610200870182611c50565b506060870151611cda610280870182611c50565b5060808701516101e06103008701528051928390528301916000906103408701905b80831015611d2d57611d1982865180518252602090810151910152565b938501936001929092019190830190611cfc565b50809550505050505082610120830152949350505050565b60a08101818360005b6005811015611929578151835260209283019290910190600101611d4e565b600082611d7c57611d7c6119a3565b500490565b60008219821115611d9457611d946117b5565b500190565b60608101818360005b6003811015611929578151835260209283019290910190600101611da2565b600082821015611dd357611dd36117b5565b500390565b600060ff821660ff841680821015611df257611df26117b5565b90039392505050565b6000808335601e19843603018112611e1257600080fd5b83018035915067ffffffffffffffff821115611e2d57600080fd5b6020019150600581901b3603821315611e4557600080fd5b9250929050565b600060ff821660ff811415611e6357611e636117b5565b6001019291505056fea26469706673582212207796c4e698aafb8e143799ba367ccf70e3f5a13341b0e87a4f462f798661c19e64736f6c634300080a0033a2646970667358221220af3222dbab7b26f2f107c85de92a596bfab0a67f4e38097fce16be9a7c562e3a64736f6c634300080a0033",
  "libraries": {
    "PoseidonT3": "0x49149a233de6E4cD6835971506F47EE5862289c1",
    "PoseidonT4": "0xAe2563b4315469bF6bdD41A6ea26157dE57Ed94e",
    "PoseidonT5": "0x30426D33a78afdb8788597D5BFaBdADc3Be95698",
    "PoseidonT6": "0x85495222Fd7069B987Ca38C2142732EbBFb7175D"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address,address,address,address,address)": {
        "params": {
          "_messageProcessor": "MessageProcessor contract",
          "_owner": "Owner of the contract",
          "_poll": "Poll contract",
          "_verifier": "Verifier contract",
          "_vkRegistry": "VkRegistry contract"
        },
        "returns": {
          "tallyAddr": "The deployed contract"
        }
      }
    },
    "title": "TallyFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(address,address,address,address,address)": {
        "notice": "Deploy a new Tally or Subsidy contract and return the address."
      }
    },
    "notice": "A factory contract which deploys Tally contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}